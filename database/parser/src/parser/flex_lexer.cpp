#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 137
#define YY_END_OF_BUFFER 138
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[944] =
    {   0,
        0,    0,    2,    2,  138,  136,    4,    4,  136,  129,
      136,  129,  129,  132,  129,  129,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
        2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,    0,    0,  135,    1,
      131,  130,  132,  127,  126,  128,  134,  134,  134,  134,
      134,  107,  134,  134,  108,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  109,  134,  110,  111,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  112,  113,  114,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  115,  134,  134,  134,  134,  134,  134,  134,  134,
        2,    2,    2,    2,    2,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  133,  130,   94,  134,
       95,  134,  134,   96,   97,  124,  134,  134,  134,  134,
      134,  134,  134,  134,  134,   98,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,   99,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  100,  134,  134,  101,  134,  134,

      134,  134,  134,  122,  134,  123,  134,  102,  134,  134,
      103,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  104,  134,  134,  134,  125,  134,
      105,  134,  134,  106,  134,  134,  134,  134,  118,  134,
      134,  134,  134,  134,  134,  134,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  134,  134,  134,  134,
      134,   72,  134,   90,  134,  134,  134,  134,  134,   73,
      134,  134,  134,  134,   74,  134,  134,  134,   75,  134,
      134,  134,  134,  134,   76,   77,   78,  134,  134,   79,
      134,   80,  134,  134,  134,  134,  134,  134,   81,  134,
       82,   83,   84,  134,   85,  134,  134,  134,  134,   86,

      134,  134,  134,  134,  134,   87,   88,  134,  134,  121,
      120,  134,  134,  134,  134,  134,   89,  134,  134,  134,
      134,   91,  134,  134,  134,  134,  134,  134,  134,  134,
       92,  134,  134,   93,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   54,   55,  134,  134,  134,  134,  134,  134,
      134,   56,  134,  134,  134,  134,   57,  134,  134,  134,
      134,  134,  134,  134,  134,  134,   58,  134,  134,  134,
       59,   60,  134,  134,  134,  134,   61,   62,   63,   64,
      134,  134,  134,   65,   66,  134,  134,  134,  134,  134,
       67,  134,  134,  134,  134,   68,  134,  134,  134,   69,
      134,  134,  134,   70,  134,  134,  134,   71,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  134,   30,  134,  134,   31,  134,
       32,  134,  134,  134,   33,   34,  134,   35,   36,   37,
      134,   38,  134,   39,   40,  134,   41,   42,  134,  134,
       43,  134,  134,   44,  134,  134,  134,   45,  134,   46,
       47,   48,  134,   49,  134,  134,  134,   50,   51,   52,

       53,  134,  134,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   14,   15,   16,   17,   18,  134,  134,   19,
      134,   20,   21,   22,   23,  134,   24,  134,  134,   25,
       26,  134,   27,   28,  134,  134,  134,  119,   29,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,  116,  134,   10,  134,
       11,  134,   12,  134,  134,   13,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  117,  134,    7,  134,
        8,    9,    2,    2,    2,    2,    2,    2,    5,    6,
        2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[951] =
    {   0,
        0,    0,   65,    0,  428, 3773,  129,  131,    0, 3773,
      414,  411,  408,  127,  126,  405,  123,  123,  175,  221,
      112,  123,  121,  142,  167,  115,  129,  182,  183,  222,
      227,  228,  119,  180,  273,  321,  163,  226,  223,    0,
        0,  156,  159,  410,    0,  407,  393,  359,  156,  196,
      348,  378,  439,  491,  543,  260,  591,  275,  323,  639,
      337,  277,  378,  390,  691,  739,  791,  312,  329,  841,
      893,  941,  442,  441,  293,  208,  351,  347, 3773, 3773,
      343,  338,  205, 3773, 3773, 3773,    0,  221,  208,  222,
      273,  280,  279,  374,    0,  429,  318,  384,  440,  309,

      365,  489,  434,  365,  421,  451,  495,  444,  439,  443,
      447,  445,  446,  483,  493,    0,  446,  526,  483,  505,
      490,  514,  538,  552,  526,  536,  542,  539,  540,  550,
      562,  558,    0,  561,  546,  552,  573,  589,  575,  601,
      592,  595,  593,  589,  589,  607,  597,  612,  607,  609,
      611,  612,  617,  645,  644,  651,  649,  645,  654,  642,
        0,  300,  307,  303,    0,    0,  254,  250,  299,    0,
        0,    0,  668,  697,  716,  722,  754,  673,  768,  793,
      699,  776,  789,  847,  822,  826,  845,  993,  882,  885,
      898,  938, 1043,  919,  944,  949,  983,  992,  995, 1011,

     1037,  745, 1033, 1092,  828, 1062,  880, 1049, 1094, 1115,
     1097, 1110, 1136, 1105, 1131, 1148, 1164, 1165,  954, 1154,
     1179, 1176, 1190, 1198, 1200, 1252, 1222, 1230, 1256, 1254,
     1265, 1284, 1235, 1289, 1295, 1300, 1306, 1310, 1318, 1339,
     1297, 1351, 1349, 1354, 1352, 1360, 3773,  241,    0,  663,
        0,  665,  670,    0,    0,    0,  684,  685,  698,  708,
      738,  741,  758,  806,  792,    0, 1099,  800,  854,  972,
      906,  910,  900,  924,  932,  955,  997, 1010,  995, 1011,
     1048,    0, 1048, 1052, 1064, 1145, 1167, 1201, 1192, 1194,
     1204, 1219, 1240, 1350, 1358, 1347, 1355,    0, 1369, 1388,

     1388, 1394, 1401,    0, 1398, 1387, 1388,    0, 1398, 1393,
     1394, 1409, 1410, 1425, 1403, 1403, 1408, 1402, 1419, 1426,
     1408, 1422, 1426, 1428,    0, 1411, 1419, 1423,    0, 1435,
        0, 1435, 1447,    0, 1442, 1447, 1444, 1462,    0, 1451,
     1446, 1465, 1446, 1451, 1455, 1467,    0,  208, 1472, 1476,
     1480, 1482, 1494, 1488, 1498, 1504, 1506, 1512, 1540, 1536,
     1542, 1538, 1564, 1548, 1566, 1550, 1576, 1594, 1592, 1590,
     1600, 1602, 1616, 1633, 1624, 1646, 1618, 1650, 1654, 1652,
     1656, 1664, 1682, 1678, 1707, 1694, 1713, 1688, 1724, 1730,
     1722, 1726, 1728, 1736, 1758, 1764, 1761, 1747, 1786, 1762,

     1792, 1800, 1802, 1790, 1814, 1815, 1824, 1818, 1846, 1850,
     1854, 1832, 1855, 1876, 1878, 1889, 1884, 1906, 1908, 1917,
     1930, 1912, 1929, 1938, 1941, 1951, 1947, 1960, 1943, 1966,
     1979, 1981, 1983, 1984, 2005, 2017, 2023, 1995, 2020, 2039,
     2035, 2038, 2053, 2057, 2061, 2076, 1470, 1509, 1526, 1621,
     1640,    0, 1700,    0, 1730, 1739, 1761, 1807, 1833,    0,
     1849, 1966, 1982, 2072,    0, 2085, 2083, 2082,    0, 2079,
     2080, 2076, 2078, 2098,    0,    0,    0, 2101, 2091,    0,
     2096,    0, 2097, 2096, 2092, 2099, 2100, 2113,    0, 2115,
        0,    0,    0, 2110,    0, 2120, 2128, 2116, 2118,    0,

     2135, 2135, 2124, 2128, 2135,    0,    0, 2148, 2149,    0,
        0, 2138, 2134, 2133, 2142, 2153,    0, 2156, 2155, 2161,
     2153, 2151, 2168, 2158, 2153, 2180, 2164, 2178, 2181, 2179,
        0, 2168, 2185,    0, 2197, 2200, 2195, 2201, 2198, 2199,
     2233, 2216, 2230, 2239, 2234, 2255, 2267, 2231, 2283, 2268,
     2285, 2293, 2272, 2306, 2318, 2301, 2309, 2323, 2344, 2342,
     2339, 2367, 2352, 2357, 2368, 2378, 2392, 2373, 2397, 2396,
     2408, 2409, 2407, 2437, 2438, 2446, 2440, 2461, 2442, 2452,
     2463, 2476, 2474, 2497, 2480, 2492, 2502, 2505, 2516, 2520,
     2535, 2537, 2526, 2538, 2551, 2560, 2570, 2554, 2559, 2568,

     2589, 2599, 2600, 2612, 2591, 2604, 2630, 2613, 2642, 2644,
     2645, 2654, 2666, 2653, 2668, 2694, 2628, 2699, 2678, 2704,
     2707, 2708,    0,    0, 2184, 2235, 2270, 2272, 2315, 2365,
     2383,    0, 2475, 2472, 2538, 2569,    0, 2579, 2675, 2703,
     2706, 2697, 2701, 2703, 2714, 2715,    0, 2730, 2723, 2722,
        0,    0, 2723, 2740, 2728, 2741,    0,    0,    0,    0,
     2754, 2749, 2738,    0,    0, 2756, 2744, 2745, 2760, 2757,
        0, 2766, 2751, 2769, 2774, 2757, 2759, 2758, 2778,    0,
     2776, 2779, 2781,    0, 2768, 2790, 2794,    0, 2791, 2792,
     2794, 2796, 2802, 2807, 2826, 2810, 2804, 2825, 2836, 2840,

     2848, 2844, 2858, 2861, 2870, 2866, 2869, 2884, 2892, 2900,
     2898, 2915, 2874, 2928, 2923, 2938, 2924, 2932, 2946, 2940,
     2954, 2969, 2964, 2972, 2977, 2978, 2986, 3007, 3002, 2994,
     3008, 3012, 3018, 3023, 3020, 3026, 3042, 3052, 3051, 3061,
     3080, 3077, 3082, 3086, 3094, 3085, 3096, 3111, 3115, 3119,
     3120, 3130, 3148, 3125, 2910,    0, 2947, 3056, 3122, 3142,
        0, 3137, 3156, 3140,    0,    0, 3158,    0,    0,    0,
     3159,    0, 3151,    0,    0, 3144,    0,    0, 3152, 3169,
        0, 3163, 3177,    0, 3159, 3179, 3160,    0, 3186, 3171,
        0,    0, 3181,    0, 3193, 3194, 3178,    0,    0,    0,

        0, 3181, 3191, 3199, 3202, 3204, 3203, 3214, 3232, 3218,
     3233, 3237, 3243, 3248, 3256, 3269, 3271, 3272, 3273, 3277,
     3281, 3302, 3286, 3287, 3305, 3310, 3315, 3323, 3321, 3326,
     3340, 3331, 3339, 3356, 3345, 3355, 3361, 3379, 3380, 3364,
     3369, 3390, 3385, 3413, 3418, 3415, 3419, 3423, 3428, 3429,
     3431, 3447,    0,    0,    0,    0,    0, 3209, 3231,    0,
     3267,    0,    0,    0,    0, 3319,    0, 3380, 3395,    0,
        0, 3410,    0,    0, 3421, 3445, 3459,    0,    0, 3463,
     3464, 3468, 3469, 3472, 3473, 3501, 3482, 3498, 3485, 3487,
     3503, 3506, 3537, 3522, 3531, 3527, 3536, 3539, 3552, 3541,

     3555, 3560, 3577, 3576, 3581, 3589, 3463, 3523,    0, 3528,
        0, 3577,    0, 3571, 3581,    0, 3606, 3595, 3605, 3614,
     3611, 3630, 3635, 3639, 3640, 3644,    0, 3621,    0, 3613,
        0,    0, 3645, 3649, 3663, 3674, 3673, 3675,    0,    0,
     3679, 3684, 3773, 3748, 3752,  182, 3756, 3760, 3764, 3768
    } ;

static yyconst flex_int16_t yy_def[951] =
    {   0,
      943,    1,  943,    3,  943,  943,  943,  943,  944,  943,
      945,  943,  943,  943,  943,  943,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      947,  947,  943,  948,  947,  949,  947,  947,  947,  947,
      947,  950,  950,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  943,  944,  945,  943,  943,
      943,  943,  943,  943,  943,  943,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      947,  947,  948,  949,  947,  947,  947,  947,  947,  947,
      947,  947,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  943,  943,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  947,  947,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  946,  946,  946,  946,
      946,  946,   53,   53,   53,   53,   53,   53,  946,  946,
       53,   53,    0,  943,  943,  943,  943,  943,  943,  943
    } ;

static yyconst flex_int16_t yy_nxt[3839] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   40,   40,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   40,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   45,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,

       75,   75,   75,   41,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   75,   75,
       76,   76,   76,   76,   82,   83,   84,   85,   88,   94,
       89,  120,  106,  108,  112,  121,   90,  107,   91,  109,
      113,  139,  110,   92,  114,  111,   93,  162,   76,   95,
       76,   76,  115,  168,  169,   88,   94,   89,  120,  106,
      108,  112,  121,   90,  107,   91,  109,  113,  139,  110,
       92,  114,  111,   93,  116,   87,   95,   96,  154,  115,
      155,  117,  118,  156,   97,  125,  140,  119,  122,  126,

      141,   98,  123,  127,   99,  100,  170,  171,  124,   76,
       76,  116,   82,   83,   96,  154,  348,  155,  117,  118,
      156,   97,  125,  140,  119,  122,  126,  141,   98,  123,
      127,   99,  100,  101,  128,  124,  249,  102,  157,  250,
      136,  103,  159,  160,  132,  251,  158,  104,  129,  248,
      105,  137,  133,  252,  130,  131,  134,  138,  348,  135,
      101,  128,  167,  249,  102,  157,  250,  136,  103,  159,
      160,  132,  251,  158,  104,  129,  173,  105,  137,  133,
      252,  130,  131,  134,  138,  253,  135,  142,  254,  143,
      192,  173,  144,  207,  255,  193,  173,  256,  198,  145,

      146,  162,   76,  173,  199,  147,  168,  169,  165,  173,
      347,  173,  253,  173,  142,  254,  143,  192,  173,  144,
      207,  255,  193,  173,  256,  198,  145,  146,  173,  173,
      261,  199,  147,  148,  149,  200,  173,  150,  173,  173,
      173,  151,  266,  201,  225,  226,  248,  152,  173,  227,
      153,   81,   79,  173,  247,  173,  173,  261,  172,  173,
      148,  149,  200,  206,  150,  173,  173,  167,  151,  266,
      201,  225,  226,  173,  152,  173,  227,  153,  161,  161,
      173,  161,  161,  161,  161,  161,  173,  161,  161,  161,
      206,  257,  173,  174,  208,  175,  267,  274,  209,  166,

      173,  176,  211,  177,  210,  258,  212,  262,  178,  263,
      213,  179,  165,  161,  173,   86,   81,   80,  257,   79,
      174,  208,  175,  267,  274,  209,  173,  943,  176,  211,
      177,  210,  258,  212,  262,  178,  263,  213,  179,  161,
      161,  173,  161,  161,  161,  161,  161,  275,  161,  161,
      161,  943,  259,  173,  243,  180,  264,  173,  173,  260,
      245,  246,  244,  272,  273,  276,  265,  281,  282,  283,
      284,  285,  286,  291,  275,  181,  943,  173,  173,  259,
      943,  243,  180,  264,  173,  173,  260,  245,  246,  244,
      272,  273,  276,  265,  281,  282,  283,  284,  285,  286,

      291,  268,  181,  182,  173,  173,  269,  173,  296,  277,
      183,  278,  270,  287,  943,  279,  288,  184,  289,  271,
      185,  186,  280,  290,  943,  297,  298,  173,  268,  943,
      182,  299,  943,  269,  173,  296,  277,  183,  278,  270,
      287,  292,  279,  288,  184,  289,  271,  185,  186,  280,
      290,  293,  297,  298,  173,  187,  294,  295,  299,  188,
      300,  304,  301,  189,  302,  305,  303,  306,  292,  190,
      307,  308,  191,  309,  310,  311,  312,  313,  293,  173,
      943,  314,  187,  294,  295,  315,  188,  300,  304,  301,
      189,  302,  305,  303,  306,  318,  190,  307,  308,  191,

      309,  310,  311,  312,  313,  316,  173,  173,  314,  317,
      322,  194,  315,  319,  323,  326,  324,  195,  327,  328,
      196,  329,  318,  197,  325,  330,  320,  173,  943,  943,
      331,  321,  316,  332,  173,  333,  317,  322,  194,  334,
      319,  323,  326,  324,  195,  327,  328,  196,  329,  335,
      197,  325,  330,  320,  173,  173,  202,  331,  321,  338,
      332,  343,  333,  203,  204,  336,  334,  339,  337,  205,
      345,  340,  341,  346,  344,  173,  335,  943,  342,  447,
      943,  448,  173,  202,  173,  943,  338,  355,  343,  173,
      203,  204,  336,  449,  339,  337,  205,  345,  340,  341,

      346,  344,  173,  214,  173,  342,  447,  173,  448,  173,
      450,  173,  349,  173,  355,  173,  173,  215,  943,  451,
      449,  452,  453,  216,  217,  943,  943,  173,  943,  943,
      214,  173,  173,  173,  173,  173,  173,  450,  173,  349,
      173,  943,  173,  943,  215,  351,  451,  350,  452,  453,
      216,  217,  173,  352,  173,  173,  218,  943,  173,  173,
      173,  173,  173,  943,  219,  173,  353,  454,  220,  354,
      173,  221,  351,  455,  350,  173,  943,  943,  943,  173,
      352,  173,  173,  218,  173,  173,  356,  943,  173,  456,
      173,  219,  173,  353,  454,  220,  354,  173,  221,  359,

      455,  361,  173,  222,  173,  173,  360,  173,  173,  173,
      357,  173,  173,  356,  223,  943,  456,  173,  457,  173,
      224,  943,  458,  461,  358,  173,  359,  173,  361,  173,
      222,  173,  173,  360,  173,  943,  173,  357,  364,  173,
      943,  223,  173,  943,  173,  457,  943,  224,  365,  458,
      461,  358,  173,  396,  173,  228,  173,  229,  173,  366,
      230,  173,  173,  173,  173,  364,  462,  231,  232,  173,
      362,  173,  363,  233,  943,  365,  367,  173,  943,  943,
      396,  173,  228,  173,  229,  173,  366,  230,  173,  173,
      173,  173,  943,  462,  231,  232,  173,  362,  173,  363,

      233,  173,  943,  367,  173,  234,  235,  943,  173,  236,
      173,  372,  373,  237,  173,  943,  398,  374,  173,  238,
      465,  173,  239,  173,  375,  173,  466,  943,  173,  173,
      943,  467,  234,  235,  173,  173,  236,  468,  372,  373,
      237,  173,  381,  398,  374,  173,  238,  465,  173,  239,
      943,  375,  376,  466,  173,  173,  173,  173,  467,  469,
      173,  173,  173,  943,  468,  173,  240,  470,  241,  381,
      173,  242,  943,  382,  173,  383,  943,  173,  943,  376,
      173,  173,  173,  943,  173,  173,  469,  173,  463,  943,
      173,  943,  173,  240,  470,  241,  943,  173,  242,  173,

      382,  173,  383,  464,  173,  368,  384,  173,  173,  173,
      369,  173,  173,  471,  943,  463,  370,  173,  385,  173,
      943,  386,  943,  371,  472,  473,  173,  173,  173,  173,
      464,  173,  368,  384,  474,  173,  173,  369,  173,  943,
      471,  387,  943,  370,  388,  385,  173,  173,  386,  173,
      371,  472,  473,  173,  173,  173,  173,  377,  173,  378,
      391,  474,  389,  379,  475,  173,  399,  390,  387,  173,
      380,  388,  476,  173,  173,  477,  173,  478,  173,  173,
      173,  943,  397,  943,  377,  173,  378,  391,  943,  389,
      379,  475,  173,  399,  390,  943,  173,  380,  173,  476,

      173,  943,  477,  943,  478,  173,  173,  392,  173,  397,
      173,  459,  173,  173,  943,  460,  400,  393,  401,  943,
      943,  173,  394,  395,  943,  173,  173,  402,  173,  403,
      173,  173,  404,  173,  392,  173,  407,  173,  459,  405,
      173,  173,  460,  400,  393,  401,  173,  173,  173,  394,
      395,  173,  173,  173,  402,  173,  403,  173,  173,  404,
      173,  406,  408,  407,  173,  943,  405,  173,  173,  412,
      173,  409,  173,  173,  173,  943,  410,  479,  173,  173,
      173,  173,  411,  943,  173,  943,  480,  943,  406,  408,
      173,  173,  173,  943,  173,  173,  412,  173,  409,  173,

      173,  173,  415,  410,  479,  414,  173,  173,  173,  411,
      413,  173,  173,  480,  416,  173,  173,  173,  417,  173,
      418,  481,  173,  482,  943,  483,  173,  173,  173,  415,
      484,  943,  414,  173,  173,  485,  173,  413,  173,  173,
      422,  416,  173,  173,  943,  417,  173,  418,  481,  423,
      482,  173,  483,  173,  943,  943,  486,  484,  173,  429,
      943,  173,  485,  173,  419,  173,  173,  422,  173,  943,
      173,  173,  173,  173,  943,  943,  423,  420,  173,  424,
      426,  173,  421,  486,  943,  173,  429,  425,  173,  943,
      173,  419,  173,  173,  427,  173,  428,  173,  173,  173,

      173,  173,  430,  943,  420,  173,  424,  426,  173,  421,
      943,  173,  438,  173,  425,  173,  173,  173,  431,  173,
      173,  427,  173,  428,  432,  173,  173,  173,  173,  430,
      433,  173,  173,  173,  173,  943,  173,  434,  173,  438,
      173,  943,  173,  173,  943,  431,  173,  173,  943,  173,
      435,  432,  173,  173,  173,  173,  943,  433,  173,  436,
      173,  173,  437,  173,  434,  173,  487,  439,  445,  173,
      443,  440,  441,  173,  488,  173,  173,  435,  442,  490,
      491,  173,  173,  444,  489,  173,  436,  173,  173,  437,
      173,  446,  173,  487,  439,  445,  173,  443,  440,  441,

      492,  488,  173,  173,  493,  442,  490,  491,  494,  495,
      444,  489,  173,  496,  173,  173,  497,  173,  446,  498,
      499,  500,  501,  173,  502,  503,  504,  492,  507,  943,
      508,  493,  509,  510,  511,  494,  495,  505,  512,  513,
      496,  514,  515,  497,  516,  517,  498,  499,  500,  501,
      518,  502,  503,  504,  519,  507,  506,  508,  520,  509,
      510,  511,  521,  522,  505,  512,  513,  523,  514,  515,
      526,  516,  517,  524,  527,  525,  528,  518,  529,  530,
      531,  519,  532,  506,  533,  520,  534,  943,  173,  521,
      522,  943,  535,  943,  523,  943,  173,  526,  536,  623,

      524,  527,  525,  528,  173,  529,  530,  531,  173,  532,
      173,  533,  173,  534,  173,  173,  173,  537,  173,  535,
      173,  943,  173,  173,  173,  536,  623,  943,  173,  943,
      173,  173,  538,  943,  173,  173,  943,  173,  624,  173,
      173,  173,  173,  173,  537,  173,  539,  173,  173,  173,
      541,  173,  173,  943,  173,  173,  173,  173,  173,  538,
      545,  173,  625,  540,  173,  624,  173,  173,  943,  173,
      543,  542,  173,  539,  173,  173,  173,  541,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  545,  547,  625,
      540,  173,  548,  173,  943,  544,  546,  543,  542,  173,

      173,  173,  173,  173,  550,  173,  551,  173,  173,  173,
      173,  173,  173,  173,  553,  547,  173,  549,  554,  548,
      943,  552,  544,  546,  943,  943,  173,  173,  173,  173,
      173,  550,  173,  551,  559,  173,  173,  173,  173,  173,
      173,  553,  943,  173,  549,  554,  556,  555,  552,  173,
      626,  557,  173,  173,  173,  173,  627,  173,  558,  173,
      173,  559,  173,  173,  560,  173,  173,  173,  173,  173,
      173,  943,  563,  556,  555,  562,  173,  626,  557,  173,
      173,  173,  173,  627,  561,  558,  173,  173,  173,  173,
      173,  560,  173,  173,  173,  173,  173,  173,  173,  563,

      173,  565,  562,  943,  173,  943,  564,  173,  569,  173,
      173,  561,  628,  173,  173,  173,  943,  173,  173,  173,
      566,  173,  943,  173,  173,  173,  567,  173,  565,  173,
      173,  173,  568,  564,  943,  569,  943,  173,  173,  628,
      173,  173,  573,  173,  574,  173,  173,  566,  572,  173,
      173,  173,  575,  567,  629,  570,  173,  173,  173,  568,
      173,  571,  173,  173,  173,  173,  173,  173,  630,  573,
      173,  574,  173,  173,  576,  572,  173,  173,  581,  575,
      173,  629,  570,  173,  577,  173,  579,  173,  571,  173,
      173,  173,  631,  173,  173,  630,  578,  173,  173,  173,

      173,  576,  173,  943,  173,  581,  173,  173,  173,  943,
      173,  577,  582,  579,  584,  583,  173,  580,  173,  631,
      943,  173,  173,  578,  173,  173,  173,  173,  173,  173,
      173,  173,  585,  173,  173,  173,  173,  632,  173,  582,
      173,  584,  583,  173,  580,  173,  633,  586,  591,  173,
      173,  173,  943,  173,  173,  173,  587,  173,  173,  585,
      173,  173,  173,  173,  632,  173,  173,  173,  173,  588,
      173,  592,  634,  633,  586,  591,  943,  173,  173,  589,
      943,  173,  173,  587,  590,  943,  173,  173,  593,  173,
      173,  173,  173,  173,  173,  173,  588,  173,  592,  634,

      173,  943,  943,  595,  943,  173,  589,  594,  597,  173,
      943,  590,  173,  173,  173,  593,  596,  173,  173,  173,
      173,  173,  173,  599,  173,  173,  943,  173,  173,  600,
      595,  602,  173,  173,  594,  597,  943,  598,  943,  173,
      943,  173,  173,  596,  173,  603,  173,  173,  173,  173,
      599,  173,  173,  173,  604,  173,  600,  173,  602,  173,
      173,  601,  943,  173,  598,  173,  173,  173,  943,  173,
      943,  173,  603,  173,  173,  173,  173,  173,  606,  173,
      173,  604,  173,  173,  173,  605,  173,  173,  601,  608,
      173,  607,  173,  173,  173,  173,  173,  173,  635,  610,

      173,  173,  173,  173,  173,  606,  173,  615,  609,  173,
      173,  173,  605,  636,  173,  173,  608,  173,  607,  173,
      173,  173,  173,  173,  173,  635,  610,  173,  943,  173,
      611,  173,  943,  173,  615,  609,  173,  943,  173,  173,
      636,  173,  173,  612,  173,  613,  173,  173,  173,  614,
      943,  173,  618,  173,  173,  173,  173,  611,  173,  173,
      173,  943,  943,  173,  616,  943,  173,  617,  173,  173,
      612,  173,  613,  173,  173,  173,  614,  173,  173,  618,
      173,  173,  173,  173,  637,  943,  173,  619,  620,  173,
      621,  616,  173,  173,  617,  622,  173,  173,  173,  638,

      173,  173,  173,  639,  173,  640,  641,  642,  643,  644,
      645,  637,  173,  646,  619,  620,  173,  621,  647,  173,
      173,  648,  622,  649,  173,  650,  638,  651,  652,  653,
      639,  654,  640,  641,  642,  643,  644,  645,  656,  173,
      646,  657,  655,  658,  659,  647,  660,  661,  648,  662,
      649,  663,  650,  664,  651,  652,  653,  665,  654,  666,
      667,  668,  669,  670,  671,  656,  672,  673,  657,  655,
      658,  659,  674,  660,  661,  675,  662,  676,  663,  677,
      664,  678,  679,  680,  665,  681,  666,  667,  668,  669,
      670,  671,  682,  672,  673,  683,  684,  685,  686,  674,

      687,  688,  675,  943,  676,  943,  677,  943,  678,  679,
      680,  173,  681,  173,  693,  173,  173,  173,  943,  682,
      943,  755,  683,  684,  685,  686,  689,  687,  688,  690,
      692,  691,  173,  173,  173,  173,  173,  173,  173,  943,
      173,  693,  173,  173,  173,  694,  173,  173,  755,  173,
      173,  756,  173,  689,  695,  173,  690,  692,  691,  173,
      173,  173,  173,  173,  173,  697,  173,  173,  696,  173,
      173,  173,  694,  173,  173,  173,  173,  173,  756,  173,
      699,  695,  173,  173,  173,  698,  757,  758,  173,  943,
      943,  173,  697,  173,  173,  696,  173,  173,  173,  173,

      701,  173,  173,  173,  173,  703,  700,  699,  173,  173,
      173,  173,  698,  757,  758,  173,  702,  173,  173,  173,
      704,  173,  173,  943,  706,  173,  173,  701,  173,  173,
      173,  173,  703,  700,  173,  173,  173,  173,  705,  173,
      759,  943,  173,  702,  173,  173,  173,  704,  173,  173,
      707,  706,  173,  943,  173,  173,  173,  943,  173,  173,
      173,  173,  943,  943,  173,  705,  173,  759,  173,  173,
      710,  708,  173,  173,  709,  173,  943,  707,  173,  711,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      712,  760,  943,  173,  173,  173,  943,  710,  708,  761,

      173,  709,  173,  173,  173,  173,  711,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  712,  760,  713,
      173,  173,  714,  173,  173,  173,  761,  943,  173,  943,
      173,  173,  173,  173,  715,  173,  173,  943,  716,  173,
      173,  173,  717,  173,  173,  173,  713,  943,  943,  714,
      173,  173,  173,  173,  173,  173,  173,  943,  173,  173,
      173,  715,  173,  943,  720,  716,  718,  719,  173,  717,
      173,  173,  173,  173,  173,  721,  173,  173,  173,  173,
      173,  173,  173,  173,  722,  173,  943,  762,  173,  173,
      173,  720,  173,  718,  719,  173,  725,  173,  763,  173,

      173,  173,  721,  173,  173,  173,  173,  723,  173,  173,
      173,  722,  173,  173,  762,  173,  173,  173,  173,  173,
      724,  173,  726,  725,  173,  763,  173,  943,  173,  943,
      728,  727,  173,  173,  723,  173,  729,  173,  173,  173,
      173,  173,  173,  173,  943,  173,  943,  724,  173,  726,
      732,  173,  173,  173,  173,  173,  173,  728,  727,  173,
      173,  764,  173,  729,  730,  173,  731,  173,  173,  173,
      173,  173,  733,  173,  173,  173,  173,  732,  173,  173,
      173,  173,  734,  173,  173,  765,  173,  173,  764,  173,
      173,  730,  735,  731,  173,  173,  173,  173,  173,  733,

      173,  173,  173,  173,  173,  173,  173,  173,  943,  734,
      766,  173,  765,  173,  173,  173,  173,  173,  736,  735,
      740,  943,  173,  173,  738,  173,  739,  173,  173,  742,
      737,  173,  173,  173,  173,  173,  173,  766,  943,  943,
      173,  943,  173,  173,  751,  736,  173,  740,  173,  173,
      741,  738,  173,  739,  173,  173,  742,  737,  173,  745,
      173,  173,  173,  173,  173,  748,  173,  173,  743,  173,
      173,  751,  943,  173,  744,  173,  173,  741,  173,  746,
      173,  173,  173,  943,  173,  173,  745,  173,  173,  173,
      173,  173,  748,  173,  173,  743,  173,  173,  747,  749,

      767,  744,  173,  943,  173,  173,  746,  173,  173,  173,
      173,  173,  750,  943,  173,  173,  173,  173,  752,  768,
      173,  173,  769,  754,  173,  747,  749,  767,  770,  173,
      173,  173,  771,  772,  773,  173,  753,  173,  774,  750,
      173,  173,  173,  173,  173,  752,  768,  173,  775,  769,
      754,  173,  776,  777,  778,  770,  779,  173,  780,  771,
      772,  773,  173,  753,  781,  774,  782,  173,  783,  784,
      173,  173,  785,  786,  787,  775,  788,  789,  790,  776,
      777,  778,  791,  779,  792,  780,  793,  794,  795,  796,
      797,  781,  798,  782,  799,  783,  784,  800,  801,  785,

      786,  787,  802,  788,  789,  790,  803,  173,  173,  791,
      173,  792,  805,  793,  794,  795,  796,  797,  806,  798,
      810,  799,  807,  173,  800,  801,  173,  173,  173,  802,
      173,  804,  173,  803,  173,  173,  809,  173,  173,  805,
      173,  173,  173,  173,  943,  806,  173,  810,  811,  807,
      173,  808,  173,  173,  173,  173,  173,  173,  804,  173,
      814,  173,  173,  809,  173,  173,  812,  173,  173,  173,
      173,  813,  173,  173,  173,  811,  173,  173,  808,  173,
      173,  943,  817,  173,  173,  818,  173,  814,  173,  173,
      173,  173,  815,  812,  173,  816,  943,  173,  813,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  817,
      173,  173,  818,  173,  173,  819,  173,  173,  822,  815,
      173,  173,  816,  820,  173,  943,  853,  173,  173,  173,
      821,  173,  173,  173,  173,  173,  173,  173,  823,  173,
      173,  173,  819,  173,  173,  822,  824,  173,  173,  943,
      820,  173,  825,  853,  173,  173,  828,  821,  173,  173,
      173,  173,  173,  173,  173,  823,  173,  173,  173,  826,
      173,  173,  854,  824,  173,  173,  173,  827,  173,  825,
      173,  173,  173,  828,  829,  173,  173,  173,  173,  173,
      173,  173,  830,  173,  173,  173,  826,  173,  831,  854,

      173,  173,  173,  173,  827,  173,  943,  173,  173,  173,
      173,  829,  173,  173,  173,  173,  943,  173,  173,  830,
      173,  173,  173,  173,  173,  831,  832,  173,  834,  173,
      173,  943,  173,  833,  173,  173,  837,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  838,  835,  173,  173,
      173,  173,  836,  832,  173,  834,  173,  173,  173,  173,
      833,  173,  173,  837,  839,  173,  173,  173,  173,  173,
      173,  173,  855,  838,  835,  173,  841,  173,  173,  836,
      943,  173,  840,  173,  943,  173,  173,  173,  173,  173,
      943,  839,  842,  173,  173,  173,  173,  173,  173,  855,

      943,  173,  173,  841,  173,  173,  846,  843,  943,  840,
      173,  844,  847,  173,  173,  173,  173,  845,  173,  842,
      173,  173,  173,  173,  173,  173,  848,  173,  173,  173,
      173,  849,  173,  846,  843,  173,  173,  173,  844,  847,
      173,  173,  851,  173,  845,  173,  173,  173,  173,  173,
      850,  173,  856,  848,  173,  173,  173,  173,  849,  173,
      852,  173,  173,  173,  173,  857,  173,  858,  173,  851,
      859,  860,  861,  173,  173,  862,  863,  850,  173,  856,
      864,  865,  173,  173,  173,  866,  867,  852,  173,  868,
      869,  173,  857,  173,  858,  870,  871,  859,  860,  861,

      872,  873,  862,  863,  874,  875,  876,  864,  865,  877,
      878,  173,  866,  867,  879,  880,  868,  869,  173,  882,
      173,  943,  870,  871,  943,  907,  943,  872,  873,  881,
      173,  874,  875,  876,  173,  173,  877,  878,  173,  173,
      173,  879,  880,  908,  883,  173,  882,  173,  173,  173,
      173,  886,  907,  173,  173,  884,  881,  173,  943,  173,
      943,  173,  173,  885,  173,  173,  173,  173,  173,  173,
      908,  883,  173,  173,  887,  173,  173,  173,  886,  173,
      173,  173,  884,  888,  173,  173,  173,  173,  173,  173,
      885,  173,  173,  889,  943,  173,  173,  173,  909,  173,

      173,  887,  173,  173,  943,  173,  173,  173,  173,  173,
      888,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      889,  173,  173,  173,  173,  909,  173,  890,  943,  173,
      173,  173,  173,  910,  173,  173,  173,  893,  173,  173,
      173,  891,  173,  895,  173,  173,  173,  173,  173,  173,
      173,  173,  892,  173,  890,  173,  173,  173,  173,  173,
      910,  897,  173,  894,  893,  173,  173,  173,  891,  173,
      895,  173,  173,  173,  173,  173,  173,  173,  173,  892,
      173,  173,  173,  173,  173,  173,  173,  896,  897,  173,
      894,  898,  173,  899,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  911,
      900,  912,  173,  901,  896,  173,  173,  943,  898,  173,
      899,  173,  173,  173,  173,  902,  173,  173,  173,  173,
      903,  173,  173,  173,  173,  173,  911,  900,  912,  173,
      901,  913,  173,  173,  173,  173,  904,  173,  173,  173,
      914,  173,  902,  173,  173,  173,  173,  903,  173,  173,
      905,  173,  173,  173,  173,  173,  173,  173,  913,  915,
      906,  173,  173,  904,  173,  916,  173,  914,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  905,  173,  917,
      173,  173,  173,  927,  173,  943,  915,  906,  173,  173,

      173,  173,  916,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  918,  173,  173,  917,  173,  173,  173,
      927,  173,  173,  173,  943,  173,  173,  173,  173,  919,
      173,  173,  173,  943,  173,  173,  173,  173,  173,  173,
      918,  173,  173,  922,  173,  173,  173,  173,  173,  173,
      173,  920,  173,  173,  928,  173,  919,  173,  173,  929,
      921,  173,  943,  173,  173,  173,  173,  173,  173,  173,
      922,  173,  173,  173,  173,  173,  173,  173,  920,  173,
      173,  928,  173,  923,  173,  173,  929,  921,  173,  924,
      173,  173,  926,  173,  173,  173,  173,  173,  173,  173,

      173,  925,  173,  173,  173,  173,  930,  931,  932,  943,
      923,  173,  173,  173,  943,  173,  924,  173,  173,  926,
      173,  173,  173,  173,  173,  173,  934,  173,  925,  943,
      173,  173,  173,  930,  931,  932,  933,  939,  173,  173,
      173,  173,  173,  940,  173,  935,  173,  173,  173,  173,
      173,  173,  173,  934,  173,  173,  173,  173,  173,  936,
      173,  173,  943,  933,  939,  941,  173,  938,  173,  173,
      940,  173,  935,  173,  173,  937,  173,  173,  173,  173,
      173,  173,  173,  173,  943,  173,  936,  173,  173,  173,
      173,  173,  941,  173,  938,  173,  943,  943,  173,  173,

      173,  943,  937,  173,  942,  943,  173,  173,  173,  173,
      173,  173,  173,  943,  943,  173,  173,  173,  173,  943,
      173,  943,  173,  943,  943,  943,  173,  173,  943,  943,
      943,  942,  943,  943,  943,  943,  173,  173,  173,  943,
      943,  943,  173,  943,  943,  943,  943,  173,   77,  943,
      943,   77,   78,  943,   78,   78,  161,  943,  161,  161,
      163,  943,  163,  163,  164,  943,  164,  164,  173,  943,
      173,  173,    5,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943
    } ;

static yyconst flex_int16_t yy_chk[3839] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   26,   21,   22,   23,   27,   17,   21,   17,   22,
       23,   33,   22,   17,   24,   22,   17,   42,   42,   18,
       43,   43,   24,   49,   49,   17,   18,   17,   26,   21,
       22,   23,   27,   17,   21,   17,   22,   23,   33,   22,
       17,   24,   22,   17,   25,  946,   18,   19,   37,   24,
       37,   25,   25,   37,   19,   29,   34,   25,   28,   29,

       34,   19,   28,   29,   19,   19,   50,   50,   28,   76,
       76,   25,   83,   83,   19,   37,  348,   37,   25,   25,
       37,   19,   29,   34,   25,   28,   29,   34,   19,   28,
       29,   19,   19,   20,   30,   28,   88,   20,   38,   89,
       32,   20,   39,   39,   31,   90,   38,   20,   30,  248,
       20,   32,   31,   90,   30,   30,   31,   32,  168,   31,
       20,   30,  167,   88,   20,   38,   89,   32,   20,   39,
       39,   31,   90,   38,   20,   30,   56,   20,   32,   31,
       90,   30,   30,   31,   32,   91,   31,   35,   91,   35,
       56,   58,   35,   62,   92,   56,   56,   93,   58,   35,

       35,  162,  162,   56,   58,   35,  169,  169,  164,   75,
      163,   58,   91,   62,   35,   91,   35,   56,   58,   35,
       62,   92,   56,   56,   93,   58,   35,   35,   68,   75,
       97,   58,   35,   36,   36,   59,   75,   36,   58,   59,
       62,   36,  100,   59,   68,   69,   82,   36,   68,   69,
       36,   81,   78,   61,   77,   68,   75,   97,   51,   59,
       36,   36,   59,   61,   36,   69,   59,   48,   36,  100,
       59,   68,   69,   61,   36,   68,   69,   36,   52,   52,
       61,   52,   52,   52,   52,   52,   59,   52,   52,   52,
       61,   94,   69,   52,   63,   52,  101,  104,   63,   47,

       61,   52,   64,   52,   63,   94,   64,   98,   52,   98,
       64,   52,   46,   44,   63,   16,   13,   12,   94,   11,
       52,   63,   52,  101,  104,   63,   64,    5,   52,   64,
       52,   63,   94,   64,   98,   52,   98,   64,   52,   53,
       53,   63,   53,   53,   53,   53,   53,  105,   53,   53,
       53,    0,   96,   64,   73,   53,   99,   74,   73,   96,
       74,   74,   73,  103,  103,  106,   99,  108,  109,  110,
      111,  112,  113,  117,  105,   53,    0,   74,   73,   96,
        0,   73,   53,   99,   74,   73,   96,   74,   74,   73,
      103,  103,  106,   99,  108,  109,  110,  111,  112,  113,

      117,  102,   53,   54,   74,   73,  102,   54,  119,  107,
       54,  107,  102,  114,    0,  107,  114,   54,  115,  102,
       54,   54,  107,  115,    0,  120,  121,   54,  102,    0,
       54,  122,    0,  102,   54,  119,  107,   54,  107,  102,
      114,  118,  107,  114,   54,  115,  102,   54,   54,  107,
      115,  118,  120,  121,   54,   55,  118,  118,  122,   55,
      123,  125,  123,   55,  124,  126,  124,  127,  118,   55,
      128,  129,   55,  130,  131,  132,  134,  135,  118,   55,
        0,  136,   55,  118,  118,  137,   55,  123,  125,  123,
       55,  124,  126,  124,  127,  139,   55,  128,  129,   55,

      130,  131,  132,  134,  135,  138,   55,   57,  136,  138,
      141,   57,  137,  140,  142,  144,  143,   57,  145,  146,
       57,  147,  139,   57,  143,  148,  140,   57,    0,    0,
      149,  140,  138,  150,   57,  151,  138,  141,   57,  152,
      140,  142,  144,  143,   57,  145,  146,   57,  147,  153,
       57,  143,  148,  140,   57,   60,   60,  149,  140,  155,
      150,  158,  151,   60,   60,  154,  152,  156,  154,   60,
      159,  156,  157,  160,  158,   60,  153,    0,  157,  250,
        0,  252,   60,   60,  173,    0,  155,  178,  158,  178,
       60,   60,  154,  253,  156,  154,   60,  159,  156,  157,

      160,  158,   60,   65,  173,  157,  250,   65,  252,  178,
      257,  173,  174,  174,  178,  181,  178,   65,    0,  258,
      253,  259,  260,   65,   65,    0,    0,   65,    0,    0,
       65,  173,  175,  174,   65,  181,  178,  257,  176,  174,
      174,    0,  181,    0,   65,  176,  258,  175,  259,  260,
       65,   65,  175,  176,   65,   66,   66,    0,  176,  175,
      174,  202,  181,    0,   66,  176,  177,  261,   66,  177,
      177,   66,  176,  262,  175,   66,    0,    0,    0,  175,
      176,  202,   66,   66,  179,  176,  179,    0,  202,  263,
      177,   66,  182,  177,  261,   66,  177,  177,   66,  182,

      262,  183,   66,   67,  179,  183,  182,   67,  202,  180,
      180,  179,  182,  179,   67,    0,  263,  177,  264,  182,
       67,    0,  265,  268,  180,  183,  182,   67,  183,  180,
       67,  179,  183,  182,   67,    0,  180,  180,  185,  182,
        0,   67,  186,    0,  205,  264,    0,   67,  185,  265,
      268,  180,  183,  205,   67,   70,  180,   70,  185,  186,
       70,  187,  186,  184,  205,  185,  269,   70,   70,  186,
      184,  205,  184,   70,    0,  185,  187,   70,    0,    0,
      205,  187,   70,  184,   70,  185,  186,   70,  187,  186,
      184,  205,    0,  269,   70,   70,  207,  184,  189,  184,

       70,  190,    0,  187,   70,   71,   71,    0,  187,   71,
      184,  189,  189,   71,  191,    0,  207,  190,  189,   71,
      271,  190,   71,  207,  191,  189,  272,    0,  190,   71,
        0,  273,   71,   71,  191,  194,   71,  274,  189,  189,
       71,  191,  194,  207,  190,  189,   71,  271,  190,   71,
        0,  191,  192,  272,  192,  194,   71,   72,  273,  275,
      195,  191,  194,    0,  274,  196,   72,  276,   72,  194,
      219,   72,    0,  195,  192,  196,    0,   72,    0,  192,
      195,  192,  194,    0,   72,  196,  275,  195,  270,    0,
      219,    0,  196,   72,  276,   72,    0,  219,   72,  197,

      195,  192,  196,  270,   72,  188,  197,  195,  198,  188,
      188,  199,  196,  277,    0,  270,  188,  219,  198,  197,
        0,  199,    0,  188,  278,  279,  197,  200,  198,  188,
      270,  199,  188,  197,  280,  198,  188,  188,  199,    0,
      277,  200,    0,  188,  200,  198,  197,  200,  199,  203,
      188,  278,  279,  201,  200,  198,  188,  193,  199,  193,
      203,  280,  201,  193,  281,  208,  208,  201,  200,  203,
      193,  200,  283,  201,  200,  284,  203,  285,  206,  193,
      201,    0,  206,    0,  193,  208,  193,  203,    0,  201,
      193,  281,  208,  208,  201,    0,  203,  193,  206,  283,

      201,    0,  284,    0,  285,  206,  193,  204,  204,  206,
      209,  267,  208,  211,    0,  267,  209,  204,  209,    0,
        0,  214,  204,  204,    0,  206,  212,  210,  204,  210,
      209,  210,  211,  211,  204,  204,  214,  209,  267,  212,
      211,  214,  267,  209,  204,  209,  212,  215,  214,  204,
      204,  210,  213,  212,  210,  204,  210,  209,  210,  211,
      211,  213,  215,  214,  216,    0,  212,  215,  214,  220,
      220,  216,  213,  212,  215,    0,  217,  286,  210,  213,
      217,  218,  218,    0,  216,    0,  287,    0,  213,  215,
      220,  216,  222,    0,  215,  221,  220,  220,  216,  213,

      217,  218,  223,  217,  286,  222,  223,  217,  218,  218,
      221,  216,  222,  287,  224,  221,  225,  220,  224,  222,
      225,  288,  221,  289,    0,  290,  223,  217,  218,  223,
      291,    0,  222,  223,  224,  292,  225,  221,  227,  222,
      227,  224,  221,  225,    0,  224,  228,  225,  288,  228,
      289,  233,  290,  223,    0,    0,  293,  291,  227,  233,
        0,  224,  292,  225,  226,  227,  228,  227,  226,    0,
      230,  233,  229,  228,    0,    0,  228,  226,  233,  229,
      230,  231,  226,  293,    0,  227,  233,  229,  226,    0,
      230,  226,  229,  228,  231,  226,  232,  230,  233,  229,

      232,  231,  234,    0,  226,  234,  229,  230,  231,  226,
        0,  235,  241,  241,  229,  226,  236,  230,  235,  229,
      232,  231,  237,  232,  236,  234,  238,  232,  231,  234,
      237,  235,  234,  241,  239,    0,  236,  238,  235,  241,
      241,    0,  237,  236,    0,  235,  238,  232,    0,  237,
      239,  236,  234,  238,  239,  240,    0,  237,  235,  240,
      241,  239,  240,  236,  238,  243,  294,  242,  245,  237,
      244,  242,  243,  238,  295,  240,  246,  239,  243,  296,
      297,  239,  240,  244,  295,  243,  240,  242,  245,  240,
      244,  246,  243,  294,  242,  245,  246,  244,  242,  243,

      299,  295,  240,  246,  300,  243,  296,  297,  301,  302,
      244,  295,  243,  303,  242,  245,  305,  244,  246,  306,
      307,  309,  310,  246,  311,  312,  313,  299,  315,    0,
      316,  300,  317,  318,  319,  301,  302,  314,  320,  321,
      303,  322,  323,  305,  324,  326,  306,  307,  309,  310,
      327,  311,  312,  313,  328,  315,  314,  316,  330,  317,
      318,  319,  332,  333,  314,  320,  321,  335,  322,  323,
      337,  324,  326,  336,  338,  336,  340,  327,  341,  342,
      343,  328,  344,  314,  345,  330,  346,    0,  349,  332,
      333,    0,  350,    0,  335,    0,  351,  337,  352,  447,

      336,  338,  336,  340,  354,  341,  342,  343,  349,  344,
      353,  345,  350,  346,  355,  349,  351,  353,  352,  350,
      356,    0,  357,  351,  354,  352,  447,    0,  358,    0,
      353,  354,  357,    0,  355,  349,    0,  353,  448,  350,
      356,  355,  357,  351,  353,  352,  358,  356,  358,  357,
      360,  354,  360,    0,  362,  358,  359,  353,  361,  357,
      364,  355,  449,  359,  364,  448,  366,  356,    0,  357,
      362,  361,  360,  358,  362,  358,  359,  360,  361,  360,
      363,  362,  365,  359,  364,  361,  366,  364,  367,  449,
      359,  364,  367,  366,    0,  363,  365,  362,  361,  360,

      363,  362,  365,  359,  369,  361,  370,  363,  369,  365,
      368,  364,  367,  366,  371,  367,  371,  368,  372,  367,
        0,  370,  363,  365,    0,    0,  370,  363,  369,  365,
      368,  369,  373,  370,  377,  369,  371,  368,  372,  367,
      375,  371,    0,  371,  368,  372,  374,  373,  370,  374,
      450,  375,  373,  370,  377,  369,  451,  368,  376,  373,
      375,  377,  376,  371,  378,  372,  378,  375,  380,  374,
      379,    0,  381,  374,  373,  380,  374,  450,  375,  373,
      382,  377,  376,  451,  379,  376,  378,  375,  380,  376,
      379,  378,  381,  378,  384,  380,  374,  379,  383,  381,

      382,  384,  380,    0,  388,    0,  383,  382,  388,  376,
      386,  379,  453,  378,  384,  380,    0,  379,  383,  381,
      385,  384,    0,  385,  388,  383,  386,  382,  384,  387,
      386,  388,  387,  383,    0,  388,    0,  386,  391,  453,
      389,  384,  392,  385,  393,  383,  390,  385,  391,  387,
      385,  388,  394,  386,  455,  389,  387,  386,  391,  387,
      389,  390,  392,  398,  393,  391,  390,  389,  456,  392,
      385,  393,  394,  390,  395,  391,  387,  397,  400,  394,
      396,  455,  389,  398,  395,  391,  397,  389,  390,  392,
      398,  393,  457,  390,  395,  456,  396,  397,  400,  394,

      396,  395,  399,    0,  397,  400,  404,  396,  401,    0,
      398,  395,  401,  397,  403,  402,  402,  399,  403,  457,
        0,  395,  399,  396,  397,  400,  404,  396,  401,  399,
      405,  406,  405,  404,  408,  401,  402,  458,  403,  401,
      407,  403,  402,  402,  399,  403,  459,  406,  412,  399,
      405,  406,    0,  404,  408,  401,  407,  405,  406,  405,
      407,  408,  409,  402,  458,  403,  410,  407,  412,  409,
      411,  413,  461,  459,  406,  412,    0,  405,  406,  410,
        0,  408,  409,  407,  411,    0,  410,  407,  414,  409,
      411,  413,  414,  410,  415,  412,  409,  411,  413,  461,

      417,    0,    0,  415,    0,  416,  410,  414,  417,  409,
        0,  411,  414,  410,  415,  414,  416,  411,  413,  414,
      417,  415,  418,  419,  419,  416,    0,  417,  422,  420,
      415,  422,  416,  420,  414,  417,    0,  418,    0,  414,
        0,  415,  418,  416,  419,  423,  421,  417,  422,  418,
      419,  419,  416,  420,  424,  422,  420,  425,  422,  429,
      420,  421,    0,  427,  418,  423,  421,  426,    0,  418,
        0,  419,  423,  421,  424,  422,  428,  425,  427,  429,
      420,  424,  430,  427,  425,  426,  429,  426,  421,  430,
      427,  428,  423,  421,  426,  431,  428,  432,  462,  433,

      434,  424,  430,  428,  425,  427,  429,  438,  432,  430,
      427,  438,  426,  463,  426,  431,  430,  432,  428,  433,
      434,  435,  431,  428,  432,  462,  433,  434,    0,  430,
      435,  438,    0,  436,  438,  432,  439,    0,  438,  437,
      463,  435,  431,  436,  432,  436,  433,  434,  435,  437,
        0,  441,  442,  436,  442,  440,  439,  435,  438,  437,
      436,    0,    0,  439,  440,    0,  437,  441,  435,  443,
      436,  441,  436,  444,  442,  440,  437,  445,  441,  442,
      436,  442,  440,  439,  464,    0,  437,  443,  444,  443,
      445,  440,  446,  444,  441,  446,  443,  445,  441,  466,

      444,  442,  440,  467,  445,  468,  470,  471,  472,  473,
      474,  464,  446,  478,  443,  444,  443,  445,  479,  446,
      444,  481,  446,  483,  445,  484,  466,  485,  486,  487,
      467,  488,  468,  470,  471,  472,  473,  474,  490,  446,
      478,  494,  488,  496,  497,  479,  498,  499,  481,  501,
      483,  502,  484,  503,  485,  486,  487,  504,  488,  505,
      508,  509,  512,  513,  514,  490,  515,  516,  494,  488,
      496,  497,  518,  498,  499,  519,  501,  520,  502,  521,
      503,  522,  523,  524,  504,  525,  505,  508,  509,  512,
      513,  514,  526,  515,  516,  527,  528,  529,  530,  518,

      532,  533,  519,    0,  520,    0,  521,    0,  522,  523,
      524,  537,  525,  535,  539,  540,  536,  538,    0,  526,
        0,  625,  527,  528,  529,  530,  535,  532,  533,  536,
      538,  537,  542,  535,  539,  540,  536,  538,  537,    0,
      535,  539,  540,  536,  538,  541,  543,  548,  625,  541,
      545,  626,  542,  535,  543,  544,  536,  538,  537,  542,
      535,  539,  540,  536,  538,  545,  543,  548,  544,  541,
      545,  546,  541,  543,  548,  544,  541,  545,  626,  542,
      547,  543,  544,  547,  550,  546,  627,  628,  553,    0,
        0,  546,  545,  543,  548,  544,  541,  545,  546,  549,

      550,  551,  544,  547,  550,  552,  549,  547,  553,  552,
      547,  550,  546,  627,  628,  553,  551,  556,  546,  549,
      554,  551,  554,    0,  556,  557,  549,  550,  551,  552,
      547,  550,  552,  549,  555,  553,  552,  556,  555,  558,
      629,    0,  554,  551,  556,  557,  549,  554,  551,  554,
      558,  556,  557,    0,  555,  561,  552,    0,  560,  558,
      559,  555,    0,    0,  556,  555,  558,  629,  563,  554,
      561,  559,  557,  564,  560,  561,    0,  558,  560,  562,
      559,  555,  561,  562,  565,  560,  558,  559,  563,  568,
      566,  630,    0,  564,  566,  563,    0,  561,  559,  631,

      564,  560,  561,  562,  565,  560,  562,  559,  567,  568,
      562,  565,  570,  569,  566,  563,  568,  566,  630,  567,
      564,  566,  569,  573,  571,  572,  631,    0,  567,    0,
      562,  565,  570,  569,  571,  567,  568,    0,  572,  570,
      569,  566,  573,  573,  571,  572,  567,    0,    0,  569,
      573,  571,  572,  574,  575,  567,  577,    0,  579,  570,
      569,  571,  576,    0,  576,  572,  574,  575,  580,  573,
      573,  571,  572,  574,  575,  576,  577,  578,  579,  581,
      574,  575,  576,  577,  578,  579,    0,  633,  580,  576,
      583,  576,  582,  574,  575,  580,  585,  578,  634,  581,

      574,  575,  576,  577,  578,  579,  581,  582,  586,  576,
      583,  578,  582,  584,  633,  580,  585,  583,  587,  582,
      584,  588,  586,  585,  578,  634,  581,    0,  586,    0,
      589,  587,  589,  584,  582,  586,  590,  583,  587,  582,
      584,  588,  593,  585,    0,  587,    0,  584,  588,  586,
      593,  591,  589,  592,  594,  586,  590,  589,  587,  589,
      584,  635,  593,  590,  591,  587,  592,  595,  588,  593,
      598,  591,  596,  592,  594,  599,  596,  593,  591,  589,
      592,  594,  597,  590,  600,  636,  597,  595,  635,  593,
      598,  591,  600,  592,  595,  599,  596,  598,  591,  596,

      592,  594,  599,  596,  600,  601,  597,  605,    0,  597,
      638,  600,  636,  597,  595,  602,  603,  598,  601,  600,
      606,    0,  599,  596,  603,  601,  604,  605,  604,  608,
      602,  600,  601,  597,  605,  602,  603,  638,    0,    0,
      606,    0,  602,  603,  617,  601,  607,  606,  604,  608,
      607,  603,  601,  604,  605,  604,  608,  602,  609,  611,
      610,  611,  602,  603,  617,  614,  607,  606,  609,  614,
      612,  617,    0,  607,  610,  604,  608,  607,  609,  612,
      610,  611,  613,    0,  615,  609,  611,  610,  611,  614,
      612,  617,  614,  607,  619,  609,  614,  612,  613,  615,

      639,  610,  613,    0,  615,  609,  612,  610,  611,  613,
      616,  615,  616,    0,  619,  618,  614,  612,  618,  640,
      620,  619,  641,  621,  622,  613,  615,  639,  642,  613,
      616,  615,  643,  644,  645,  618,  620,  616,  646,  616,
      620,  619,  618,  621,  622,  618,  640,  620,  648,  641,
      621,  622,  649,  650,  653,  642,  654,  616,  655,  643,
      644,  645,  618,  620,  656,  646,  661,  620,  662,  663,
      621,  622,  666,  667,  668,  648,  669,  670,  672,  649,
      650,  653,  673,  654,  674,  655,  675,  676,  677,  678,
      679,  656,  681,  661,  682,  662,  663,  683,  685,  666,

      667,  668,  686,  669,  670,  672,  687,  689,  690,  673,
      691,  674,  692,  675,  676,  677,  678,  679,  693,  681,
      697,  682,  694,  694,  683,  685,  696,  689,  690,  686,
      691,  691,  692,  687,  689,  690,  696,  691,  693,  692,
      697,  698,  695,  694,    0,  693,  696,  697,  699,  694,
      694,  695,  699,  696,  689,  690,  700,  691,  691,  692,
      702,  698,  695,  696,  701,  693,  700,  697,  698,  695,
      694,  701,  699,  696,  703,  699,  700,  704,  695,  699,
      702,    0,  706,  700,  701,  707,  705,  702,  698,  695,
      713,  701,  704,  700,  703,  705,    0,  704,  701,  699,

      708,  703,  706,  700,  704,  707,  705,  702,  709,  706,
      713,  701,  707,  705,  711,  708,  710,  713,  711,  704,
      708,  703,  705,  709,  704,    0,  755,  708,  709,  706,
      710,  712,  707,  705,  711,  709,  710,  713,  712,  715,
      717,  711,  708,  710,  714,  711,  714,  708,  718,    0,
      709,  712,  715,  755,  716,  709,  720,  710,  712,  715,
      717,  711,  719,  710,  714,  712,  715,  717,  718,  716,
      721,  714,  757,  714,  716,  718,  720,  719,  712,  715,
      723,  716,  719,  720,  721,  722,  715,  717,  724,  719,
      721,  714,  722,  725,  726,  718,  716,  721,  727,  757,

      723,  716,  727,  720,  719,  722,    0,  723,  724,  719,
      730,  721,  722,  725,  726,  724,    0,  721,  729,  722,
      725,  726,  727,  728,  731,  727,  728,  723,  732,  727,
      730,    0,  722,  729,  733,  724,  735,  730,  729,  734,
      725,  726,  736,  728,  731,  729,  736,  733,  732,  727,
      728,  731,  734,  728,  733,  732,  735,  730,  737,  734,
      729,  733,  736,  735,  738,  729,  734,  739,  738,  736,
      728,  731,  758,  736,  733,  732,  740,  740,  737,  734,
        0,  733,  739,  735,    0,  737,  734,  739,  738,  736,
        0,  738,  741,  742,  739,  738,  741,  740,  743,  758,

        0,  746,  744,  740,  740,  737,  745,  742,    0,  739,
      745,  743,  747,  742,  739,  738,  741,  744,  743,  741,
      742,  746,  744,  741,  740,  743,  748,  748,  746,  744,
      745,  749,  747,  745,  742,  750,  751,  745,  743,  747,
      742,  754,  752,  741,  744,  743,  752,  748,  746,  744,
      751,  749,  759,  748,  748,  750,  751,  745,  749,  747,
      753,  754,  750,  751,  753,  760,  752,  762,  754,  752,
      763,  764,  767,  752,  748,  771,  773,  751,  749,  759,
      776,  779,  750,  751,  753,  780,  782,  753,  754,  783,
      785,  753,  760,  752,  762,  786,  787,  763,  764,  767,

      789,  790,  771,  773,  793,  795,  796,  776,  779,  797,
      802,  753,  780,  782,  803,  804,  783,  785,  805,  807,
      806,    0,  786,  787,    0,  858,    0,  789,  790,  806,
      808,  793,  795,  796,  810,  804,  797,  802,  805,  807,
      806,  803,  804,  859,  808,  805,  807,  806,  809,  811,
      808,  812,  858,  812,  810,  809,  806,  808,    0,  813,
        0,  810,  804,  811,  814,  805,  807,  806,  809,  811,
      859,  808,  815,  812,  813,  809,  811,  808,  812,  813,
      812,  810,  809,  816,  814,  816,  813,  817,  818,  819,
      811,  814,  815,  820,    0,  809,  811,  821,  861,  815,

      812,  813,  823,  824,    0,  816,  813,  817,  818,  819,
      816,  814,  816,  820,  817,  818,  819,  821,  822,  815,
      820,  825,  823,  824,  821,  861,  826,  822,    0,  823,
      824,  827,  816,  866,  817,  818,  819,  829,  822,  828,
      820,  825,  830,  832,  821,  822,  826,  832,  825,  823,
      824,  827,  828,  826,  822,  833,  831,  829,  827,  828,
      866,  835,  830,  831,  829,  822,  828,  832,  825,  830,
      832,  836,  834,  826,  832,  833,  831,  837,  827,  828,
      840,  835,  833,  831,  829,  841,  828,  834,  835,  830,
      831,  836,  834,  838,  832,  838,  839,  837,  836,  834,

      840,  843,  833,  831,  837,  841,  842,  840,  835,  868,
      839,  869,  841,  842,  834,  838,  839,    0,  836,  834,
      838,  843,  838,  839,  837,  844,  842,  840,  843,  844,
      845,  846,  841,  842,  845,  847,  868,  839,  869,  848,
      842,  872,  838,  839,  849,  850,  846,  851,  843,  844,
      875,  846,  844,  842,  845,  847,  844,  845,  846,  848,
      851,  845,  847,  852,  849,  850,  848,  851,  872,  876,
      852,  849,  850,  846,  851,  877,  844,  875,  846,  880,
      881,  845,  847,  852,  882,  883,  848,  851,  884,  885,
      852,  849,  850,  907,  851,    0,  876,  852,  887,  880,

      881,  889,  877,  890,  882,  883,  880,  881,  884,  885,
      852,  882,  883,  886,  888,  884,  885,  886,  887,  891,
      907,  889,  892,  890,    0,  887,  880,  881,  889,  888,
      890,  882,  883,    0,  888,  884,  885,  886,  894,  891,
      886,  888,  892,  896,  886,  887,  891,  895,  889,  892,
      890,  893,  897,  893,  908,  898,  888,  900,  894,  910,
      895,  888,    0,  896,  886,  894,  891,  895,  899,  892,
      896,  901,  897,  893,  895,  898,  902,  900,  893,  897,
      893,  908,  898,  899,  900,  894,  910,  895,  899,  902,
      896,  901,  904,  903,  895,  899,  902,  905,  901,  897,

      893,  903,  898,  902,  900,  906,  912,  914,  915,    0,
      899,  918,  904,  903,    0,  899,  902,  905,  901,  904,
      903,  919,  917,  902,  905,  906,  918,  921,  903,    0,
      920,  918,  906,  912,  914,  915,  917,  928,  918,  904,
      903,  919,  917,  930,  905,  920,  922,  921,  919,  917,
      920,  923,  906,  918,  921,  924,  925,  920,  918,  922,
      926,  933,    0,  917,  928,  934,  922,  925,  919,  917,
      930,  923,  920,  922,  921,  924,  925,  920,  923,  935,
      926,  933,  924,  925,    0,  934,  922,  926,  933,  937,
      936,  938,  934,  922,  925,  941,    0,    0,  923,  935,

      942,    0,  924,  925,  936,    0,  935,  926,  933,  937,
      936,  938,  934,    0,    0,  941,  937,  936,  938,    0,
      942,    0,  941,    0,    0,    0,  935,  942,    0,    0,
        0,  936,    0,    0,    0,    0,  937,  936,  938,    0,
        0,    0,  941,    0,    0,    0,    0,  942,  944,    0,
        0,  944,  945,    0,  945,  945,  947,    0,  947,  947,
      948,    0,  948,  948,  949,    0,  949,  949,  950,    0,
      950,  950,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,

      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1618 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1862 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 944 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 943 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(READ)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(QUIT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(AVG)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 130:
#line 196 "flex_lexer.l"
case 131:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_DFLOATVAL;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2646 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 944 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 944 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 943);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 226 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
	fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
