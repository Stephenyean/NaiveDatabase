#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 132
#define YY_END_OF_BUFFER 133
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[928] =
    {   0,
        0,    0,    2,    2,  133,  131,    4,    4,  131,  124,
      131,  124,  124,  127,  124,  124,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
        2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,    0,    0,  130,    1,
      126,  125,  127,  122,  121,  123,  129,  129,  129,  129,
      129,  107,  129,  108,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  109,  129,  110,  111,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  112,  113,
      114,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  115,  129,  129,
      129,  129,  129,  129,  129,  129,    2,    2,    2,    2,
        2,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  128,  125,
       94,  129,   95,  129,  129,   96,   97,  129,  129,  129,
      129,  129,  129,  129,  129,   98,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   99,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  100,  129,  129,  101,  129,  129,
      129,  129,  129,  129,  129,  129,  102,  129,  129,  103,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  104,  129,  129,  129,  129,  105,  129,
      129,  129,  106,  129,  129,  129,  129,  117,  129,  129,
      129,  129,  129,  129,  129,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  129,  129,  129,  129,  129,   72,  129,  129,
      129,  129,  129,  129,   73,  129,  129,  129,  129,   74,
      129,  129,  129,   75,  129,  129,  129,  129,  129,   76,
       77,   78,  129,  129,   79,  129,   80,  129,  129,  129,
      129,  129,  129,   81,  129,   82,   83,   84,  129,   85,
      129,  129,  129,  129,   86,  129,  129,  129,  129,  129,
       87,   88,  129,  129,  120,  119,  129,  129,  129,  129,

      129,   89,  129,  129,  129,  129,   90,   91,  129,  129,
      129,  129,  129,  129,  129,  129,   92,  129,  129,   93,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,   54,   55,
      129,  129,  129,  129,  129,  129,  129,   56,  129,  129,
      129,  129,   57,  129,  129,  129,  129,  129,  129,  129,
      129,  129,   58,  129,  129,  129,   59,   60,  129,  129,
      129,  129,   61,   62,   63,   64,  129,  129,  129,   65,
       66,  129,  129,  129,  129,  129,   67,  129,  129,  129,
      129,   68,  129,  129,  129,   69,  129,  129,  129,   70,
      129,  129,  129,   71,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      129,   30,  129,  129,   31,  129,   32,  129,  129,  129,
       33,   34,  129,   35,   36,   37,  129,   38,  129,   39,
       40,  129,   41,   42,  129,  129,   43,  129,  129,   44,
      129,  129,  129,   45,  129,   46,   47,   48,  129,   49,
      129,  129,  129,   50,   51,   52,   53,  129,  129,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   15,
       16,   17,   18,  129,  129,   19,  129,   20,   21,   22,
       23,  129,   24,  129,  129,   25,   26,  129,   27,   28,
      129,  129,  129,  118,   29,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  116,  129,   10,  129,   11,  129,   12,  129,

      129,   13,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  129,    7,  129,    8,    9,    2,    2,    2,
        2,    2,    5,    6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[935] =
    {   0,
        0,    0,   65,    0,  400, 3699,  129,  131,    0, 3699,
      392,  390,  355,  127,  126,  348,  123,  123,  131,  177,
      112,  170,  121,  129,  183,  119,  135,  138,  136,  186,
      219,  182,  123,  194,  265,  308,  228,  230,  240,    0,
        0,  161,  255,  347,    0,  344,  340,  337,  254,  254,
      334,  365,  423,  475,  527,  260,  575,  362,  293,  623,
      299,  231,  357,  415,  675,  723,  775,  405,  420,  825,
      877,  925,  433,  473,  343,  271,  335,  302, 3699, 3699,
      294,  293,  281, 3699, 3699, 3699,    0,  180,  170,  281,
      315,  190,  350,    0,  303,  291,  428,  210,  235,  483,

      417,  251,  358,  373,  483,  366,  363,  412,  420,  424,
      426,  455,  477,    0,  428,  520,  432,  470,  458,  481,
      520,  534,  512,  524,  521,  523,  532,  545,  541,    0,
      544,  529,  532,  553,  573,  547,  584,  579,  579,  577,
      573,  573,  591,  592,  583,  619,  586,  588,  585,  626,
      630,  635,  627,  636,  641,  627,    0,  296,  265,  249,
        0,    0,  244,  241,  292,    0,    0,    0,  652,  674,
      688,  713,  684,  729,  737,  714,  767,  783,  806,  780,
      829,  977,  791,  726,  841,  839, 1027,  875,  879,  883,
      921,  913,  927,  915,  967,  793,  869, 1076,  979,  965,

      891,  982, 1013, 1036, 1017, 1042, 1053, 1066, 1072, 1101,
     1087, 1023, 1105, 1120, 1109, 1130, 1138, 1139, 1191, 1161,
     1172, 1189, 1183, 1213, 1201, 1215, 1234, 1237, 1243, 1247,
     1249, 1273, 1288, 1151, 1282, 1286, 1271, 1297, 3699,  207,
        0,  655,    0,  678,  682,    0,    0,  680,  727,  751,
      764,  805,  842,  862,  853,    0,  993,  924,  947,  980,
      946, 1001, 1040, 1070, 1060, 1088, 1110, 1129, 1119, 1134,
     1146,    0, 1171, 1173, 1198, 1201, 1222, 1297, 1288, 1290,
     1300, 1311, 1319, 1321, 1331, 1307, 1316,    0, 1312, 1334,
     1332, 1341, 1346, 1341, 1329, 1331,    0, 1342, 1338, 1339,

     1355, 1356, 1364, 1348, 1348, 1354, 1349, 1366, 1370, 1356,
     1370, 1375, 1377,    0, 1363, 1370, 1373, 1383,    0, 1383,
     1380, 1396,    0, 1388, 1389, 1393, 1409,    0, 1398, 1393,
     1412, 1393, 1398, 1401, 1413,    0,  201, 1419, 1425, 1427,
     1429, 1435, 1431, 1433, 1457, 1461, 1463, 1473, 1448, 1487,
     1489, 1499, 1501, 1515, 1517, 1527, 1541, 1505, 1533, 1543,
     1569, 1567, 1559, 1545, 1575, 1557, 1601, 1591, 1597, 1599,
     1603, 1612, 1613, 1642, 1627, 1651, 1653, 1655, 1643, 1657,
     1661, 1676, 1667, 1697, 1685, 1701, 1691, 1715, 1727, 1729,
     1737, 1745, 1751, 1750, 1773, 1755, 1769, 1759, 1781, 1803,

     1804, 1814, 1809, 1812, 1822, 1837, 1838, 1843, 1835, 1847,
     1866, 1871, 1868, 1872, 1897, 1876, 1900, 1906, 1881, 1902,
     1925, 1930, 1936, 1939, 1951, 1955, 1954, 1960, 1976, 1984,
     1992, 1990, 1446, 1452, 1502, 1612, 1707,    0, 1713, 1723,
     1747, 1748, 1864, 1944,    0, 1972, 1972, 1974, 1999,    0,
     2002, 2004, 2002,    0, 2002, 2003, 2002, 2009, 2029,    0,
        0,    0, 2032, 2018,    0, 2021,    0, 2023, 2021, 2019,
     2029, 2030, 2045,    0, 2037,    0,    0,    0, 2031,    0,
     2041, 2049, 2036, 2040,    0, 2056, 2059, 2049, 2050, 2056,
        0,    0, 2070, 2071,    0,    0, 2060, 2059, 2063, 2071,

     2084,    0, 2083, 2080, 2087, 2078,    0, 2078, 2098, 2088,
     2082, 2104, 2086, 2100, 2103, 2101,    0, 2091, 2108,    0,
     2113, 2132, 2116, 2137, 2121, 2122, 2151, 2138, 2162, 2161,
     2166, 2170, 2191, 2192, 2200, 2195, 2205, 2204, 2235, 2230,
     2229, 2221, 2253, 2254, 2259, 2269, 2270, 2258, 2267, 2283,
     2299, 2298, 2288, 2304, 2307, 2323, 2328, 2337, 2339, 2349,
     2361, 2338, 2371, 2353, 2367, 2372, 2382, 2393, 2403, 2395,
     2407, 2412, 2406, 2438, 2435, 2444, 2447, 2441, 2446, 2469,
     2479, 2481, 2470, 2478, 2492, 2509, 2503, 2513, 2534, 2511,
     2515, 2537, 2524, 2543, 2546, 2555, 2567, 2577, 2579, 2578,

     2588, 2589, 2600, 2628, 2612, 2617, 2623, 2629,    0,    0,
     2091, 2117, 2156, 2188, 2187, 2234, 2245,    0, 2324, 2367,
     2409, 2445,    0, 2441, 2471, 2520, 2583, 2592, 2596, 2605,
     2636, 2634,    0, 2640, 2632, 2636,    0,    0, 2637, 2653,
     2640, 2650,    0,    0,    0,    0, 2665, 2659, 2648,    0,
        0, 2665, 2653, 2658, 2673, 2670,    0, 2681, 2667, 2684,
     2689, 2672, 2674, 2676, 2698,    0, 2695, 2697, 2697,    0,
     2685, 2706, 2707,    0, 2705, 2707, 2715, 2711, 2717, 2720,
     2739, 2733, 2741, 2745, 2773, 2771, 2777, 2756, 2774, 2787,
     2790, 2785, 2789, 2813, 2815, 2825, 2823, 2831, 2841, 2844,

     2856, 2859, 2867, 2875, 2877, 2880, 2885, 2908, 2889, 2890,
     2893, 2898, 2933, 2931, 2923, 2921, 2939, 2944, 2949, 2954,
     2952, 2973, 2963, 2988, 2982, 3006, 3007, 2998, 3023, 3022,
     3021, 3031, 3040, 3056, 3046, 3052, 3057, 3065, 3090, 3074,
     2728,    0, 2742, 2779, 2781, 2877,    0, 2916, 2989, 2977,
        0,    0, 3064,    0,    0,    0, 3075,    0, 3071,    0,
        0, 3061,    0,    0, 3078, 3095,    0, 3089, 3101,    0,
     3085, 3105, 3086,    0, 3111, 3097,    0,    0, 3107,    0,
     3119, 3120, 3104,    0,    0,    0,    0, 3107, 3118, 3128,
     3129, 3130, 3131, 3140, 3162, 3144, 3145, 3163, 3153, 3174,

     3179, 3204, 3185, 3193, 3198, 3203, 3207, 3208, 3216, 3219,
     3222, 3233, 3237, 3248, 3238, 3247, 3252, 3277, 3256, 3278,
     3262, 3281, 3287, 3292, 3296, 3291, 3302, 3306, 3315, 3331,
     3336, 3330, 3321, 3344, 3346, 3347, 3369, 3379,    0,    0,
        0,    0,    0, 3170, 3188,    0, 3199,    0,    0,    0,
        0, 3362,    0, 3348, 3365,    0,    0, 3355,    0,    0,
     3362, 3368, 3380,    0,    0, 3381, 3384, 3385, 3390, 3395,
     3398, 3423, 3400, 3414, 3424, 3433, 3435, 3438, 3454, 3439,
     3463, 3448, 3457, 3467, 3473, 3469, 3472, 3478, 3509, 3506,
     3507, 3508,    0, 3482,    0, 3496,    0, 3499,    0, 3493,

     3510,    0, 3522, 3530, 3531, 3532, 3541, 3560, 3543, 3562,
     3564, 3565, 3566,    0, 3553,    0,    0, 3576, 3581, 3599,
     3595, 3597,    0,    0, 3598, 3610, 3699, 3674, 3678,  189,
     3682, 3686, 3690, 3694
    } ;

static yyconst flex_int16_t yy_def[935] =
    {   0,
      927,    1,  927,    3,  927,  927,  927,  927,  928,  927,
      929,  927,  927,  927,  927,  927,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      931,  931,  927,  932,  931,  933,  931,  931,  931,  931,
      931,  934,  934,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  927,  928,  929,  927,  927,
      927,  927,  927,  927,  927,  927,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  931,  931,  932,  933,
      931,  931,  931,  931,  931,  931,  931,  931,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  927,  927,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  931,  931,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  930,  930,  930,  930,  930,   53,   53,   53,
       53,   53,  930,  930,   53,   53,    0,  927,  927,  927,
      927,  927,  927,  927
    } ;

static yyconst flex_int16_t yy_nxt[3765] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   40,   40,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   40,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   45,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,

       75,   75,   75,   41,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   75,   75,
       76,   76,   76,   76,   82,   83,   84,   85,   88,   93,
       89,  112,  104,   95,  110,  118,   90,  105,   91,  113,
      111,  119,  123,   92,  120,  136,  124,   96,  121,   94,
       97,   98,  158,   76,  122,   88,   93,   89,  112,  104,
       95,  110,  118,   90,  105,   91,  113,  111,  119,  123,
       92,  120,  136,  124,   96,  121,   94,   97,   98,   99,
      106,  122,   87,  100,  133,  241,  107,  101,  125,  108,

      114,  242,  109,  102,  247,  134,  103,  115,  116,  337,
      137,  135,  126,  117,  138,  240,   99,  106,  127,  128,
      100,  133,  241,  107,  101,  125,  108,  114,  242,  109,
      102,  247,  134,  103,  115,  116,  129,  137,  135,  126,
      117,  138,  153,  256,  130,  127,  128,  201,  131,  337,
      154,  132,  163,  150,  161,  151,   76,   76,  152,  155,
      156,  164,  165,  129,  166,  167,  257,  169,  336,  153,
      256,  130,   76,   76,  201,  131,  169,  154,  132,  139,
      150,  140,  151,  264,  141,  152,  155,  156,   82,   83,
      186,  142,  143,  257,  169,  187,  169,  158,   76,  164,

      165,  240,   81,  169,  243,  194,  139,   79,  140,  169,
      264,  141,  244,  195,  252,  169,  253,  186,  142,  143,
      144,  145,  187,  169,  146,  200,  250,  245,  147,  169,
      246,  243,  194,  251,  148,  169,  169,  149,  239,  244,
      195,  252,  169,  253,  168,  163,  162,  144,  145,  161,
      157,  146,  200,  250,  245,  147,  169,  246,   86,  169,
      251,  148,  169,   81,  149,  157,  157,  248,  157,  157,
      157,  157,  157,  202,  157,  157,  157,  203,  169,  169,
      170,  249,  171,  204,  265,  192,  169,  266,  172,  271,
      173,  193,  272,  169,  248,  174,   80,   79,  169,  927,

      202,  927,  927,  927,  203,  169,  169,  170,  249,  171,
      204,  265,  192,  927,  266,  172,  271,  173,  193,  272,
      169,  169,  174,  157,  157,  169,  157,  157,  157,  157,
      157,  205,  157,  157,  157,  206,  219,  218,  273,  175,
      220,  169,  927,  274,  254,  235,  262,  263,  169,  169,
      275,  169,  276,  236,  255,  281,  169,  286,  205,  176,
      927,  927,  206,  219,  218,  273,  175,  220,  169,  169,
      274,  254,  235,  262,  263,  927,  169,  275,  169,  276,
      236,  255,  281,  169,  286,  277,  176,  177,  278,  169,
      287,  169,  237,  238,  288,  258,  169,  267,  289,  268,

      259,  178,  279,  269,  179,  180,  260,  280,  927,  169,
      270,  169,  277,  261,  177,  278,  169,  287,  169,  237,
      238,  288,  258,  927,  267,  289,  268,  259,  178,  279,
      269,  179,  180,  260,  280,  282,  169,  270,  169,  181,
      261,  294,  290,  182,  291,  283,  292,  183,  293,  295,
      284,  285,  296,  184,  297,  298,  185,  299,  300,  301,
      302,  303,  282,  169,  927,  304,  181,  307,  294,  290,
      182,  291,  283,  292,  183,  293,  295,  284,  285,  296,
      184,  297,  298,  185,  299,  300,  301,  302,  303,  305,
      169,  169,  304,  306,  307,  188,  308,  311,  312,  315,

      313,  189,  316,  317,  190,  318,  319,  191,  314,  309,
      322,  169,  927,  927,  310,  323,  305,  324,  169,  927,
      306,  927,  188,  308,  311,  312,  315,  313,  189,  316,
      317,  190,  318,  319,  191,  314,  309,  322,  169,  169,
      196,  310,  323,  320,  324,  327,  325,  197,  198,  326,
      330,  328,  332,  199,  321,  329,  331,  334,  335,  169,
      927,  927,  927,  927,  927,  333,  169,  196,  169,  927,
      320,  433,  327,  325,  197,  198,  326,  330,  328,  332,
      199,  321,  329,  331,  334,  335,  169,  207,  169,  338,
      169,  169,  333,  927,  434,  169,  342,  927,  433,  343,

      169,  208,  927,  927,  169,  435,  436,  209,  210,  927,
      169,  169,  927,  927,  207,  169,  338,  169,  169,  339,
      169,  434,  927,  342,  169,  927,  343,  169,  208,  169,
      169,  169,  435,  436,  209,  210,  340,  169,  169,  169,
      211,  927,  169,  344,  341,  169,  339,  169,  212,  169,
      169,  169,  213,  169,  345,  214,  169,  169,  361,  169,
      927,  437,  169,  340,  927,  169,  169,  211,  346,  169,
      344,  341,  169,  169,  438,  212,  169,  169,  439,  213,
      169,  345,  214,  169,  927,  361,  169,  215,  437,  169,
      347,  169,  169,  927,  927,  346,  169,  348,  216,  169,

      169,  438,  927,  169,  217,  439,  349,  169,  350,  169,
      169,  169,  927,  353,  215,  927,  169,  347,  169,  169,
      359,  360,  351,  169,  348,  216,  169,  169,  927,  169,
      169,  217,  352,  349,  169,  350,  169,  440,  169,  221,
      353,  222,  169,  169,  223,  169,  169,  359,  360,  351,
      927,  224,  225,  363,  169,  169,  169,  169,  927,  352,
      354,  169,  927,  927,  440,  169,  221,  362,  222,  169,
      927,  223,  169,  441,  442,  169,  927,  169,  224,  225,
      363,  927,  169,  443,  169,  169,  927,  354,  169,  226,
      227,  169,  169,  228,  362,  169,  378,  229,  368,  169,

      441,  442,  169,  230,  169,  169,  231,  169,  369,  370,
      443,  169,  169,  169,  927,  169,  226,  227,  169,  169,
      228,  927,  169,  378,  229,  368,  169,  385,  927,  169,
      230,  169,  169,  231,  169,  369,  370,  169,  169,  372,
      169,  169,  169,  169,  371,  374,  169,  446,  375,  169,
      232,  169,  233,  373,  385,  234,  169,  169,  169,  447,
      450,  169,  927,  169,  169,  927,  372,  927,  169,  927,
      169,  371,  374,  927,  446,  375,  169,  232,  169,  233,
      373,  169,  234,  169,  169,  384,  447,  450,  169,  355,
      169,  927,  376,  169,  356,  169,  448,  377,  169,  386,

      357,  169,  927,  169,  383,  444,  927,  358,  169,  445,
      169,  449,  384,  169,  927,  169,  355,  451,  169,  376,
      169,  356,  169,  448,  377,  169,  386,  357,  169,  169,
      169,  383,  444,  169,  358,  387,  445,  388,  449,  169,
      169,  364,  169,  365,  451,  169,  391,  366,  389,  169,
      390,  927,  169,  169,  367,  927,  169,  927,  169,  169,
      169,  927,  387,  169,  388,  927,  169,  392,  364,  169,
      365,  452,  169,  391,  366,  389,  169,  390,  169,  169,
      169,  367,  169,  453,  393,  169,  169,  454,  169,  169,
      169,  379,  169,  927,  392,  395,  169,  394,  452,  169,

      455,  380,  169,  169,  397,  169,  381,  382,  169,  169,
      453,  393,  169,  396,  454,  169,  169,  169,  379,  169,
      398,  169,  395,  169,  394,  169,  456,  455,  380,  169,
      169,  397,  927,  381,  382,  169,  169,  169,  400,  169,
      396,  169,  401,  457,  169,  169,  169,  398,  169,  458,
      169,  399,  169,  456,  402,  169,  169,  459,  403,  404,
      927,  927,  460,  169,  169,  400,  169,  425,  169,  401,
      457,  426,  169,  169,  169,  169,  458,  169,  399,  408,
      927,  402,  169,  169,  459,  403,  404,  169,  169,  460,
      927,  409,  927,  169,  425,  461,  462,  169,  426,  169,

      927,  169,  169,  405,  169,  169,  408,  169,  169,  412,
      927,  463,  410,  414,  169,  169,  406,  169,  409,  169,
      411,  407,  461,  462,  169,  169,  169,  169,  415,  169,
      405,  169,  169,  464,  169,  169,  412,  169,  463,  410,
      414,  465,  413,  406,  169,  927,  169,  411,  407,  169,
      169,  169,  169,  169,  169,  415,  169,  416,  169,  169,
      464,  417,  927,  169,  169,  169,  927,  419,  465,  413,
      169,  927,  418,  169,  420,  927,  169,  169,  169,  169,
      169,  421,  927,  169,  416,  169,  169,  431,  417,  169,
      169,  927,  169,  422,  419,  927,  423,  169,  169,  418,

      169,  420,  429,  424,  169,  427,  169,  169,  421,  169,
      169,  428,  169,  169,  431,  430,  169,  466,  169,  467,
      422,  468,  169,  423,  169,  169,  469,  470,  432,  429,
      424,  169,  427,  169,  169,  471,  169,  472,  428,  475,
      169,  476,  430,  477,  466,  169,  467,  473,  468,  169,
      478,  169,  479,  469,  470,  432,  480,  474,  481,  482,
      169,  483,  471,  484,  472,  485,  475,  486,  476,  487,
      477,  488,  489,  492,  473,  493,  490,  478,  494,  479,
      495,  496,  497,  480,  474,  481,  482,  498,  483,  499,
      484,  500,  485,  501,  486,  491,  487,  502,  488,  489,

      492,  503,  493,  490,  504,  494,  505,  495,  496,  497,
      506,  507,  508,  509,  498,  510,  499,  511,  500,  512,
      501,  513,  491,  514,  502,  515,  516,  517,  503,  518,
      519,  504,  520,  505,  927,  169,  927,  506,  507,  508,
      509,  521,  510,  169,  511,  522,  512,  169,  513,  169,
      514,  169,  515,  516,  517,  169,  518,  519,  523,  520,
      927,  169,  169,  169,  169,  169,  927,  169,  521,  169,
      169,  169,  522,  169,  169,  609,  169,  169,  169,  169,
      528,  610,  169,  524,  169,  523,  526,  527,  169,  169,
      169,  169,  169,  169,  169,  525,  169,  169,  169,  169,

      169,  530,  609,  169,  169,  169,  169,  528,  610,  169,
      524,  169,  927,  526,  527,  169,  169,  169,  529,  538,
      169,  169,  525,  169,  169,  169,  169,  532,  530,  531,
      169,  533,  169,  169,  927,  169,  169,  169,  611,  535,
      534,  169,  169,  169,  169,  529,  538,  927,  169,  539,
      169,  169,  169,  169,  532,  927,  531,  536,  533,  169,
      169,  544,  169,  169,  169,  611,  535,  534,  169,  169,
      169,  543,  537,  169,  540,  169,  539,  169,  169,  169,
      169,  169,  541,  169,  536,  169,  169,  546,  544,  545,
      169,  169,  927,  169,  542,  169,  169,  927,  543,  537,

      169,  540,  169,  169,  169,  169,  169,  548,  169,  541,
      169,  169,  169,  169,  546,  169,  545,  169,  169,  169,
      169,  542,  169,  549,  547,  551,  550,  169,  169,  169,
      169,  927,  169,  169,  548,  169,  927,  169,  169,  169,
      169,  612,  169,  169,  169,  552,  169,  554,  169,  169,
      549,  547,  551,  550,  169,  169,  169,  927,  169,  558,
      169,  553,  169,  169,  169,  927,  169,  169,  612,  169,
      169,  169,  552,  559,  554,  169,  169,  560,  169,  169,
      927,  557,  555,  169,  556,  169,  558,  169,  553,  169,
      169,  169,  561,  169,  169,  927,  169,  169,  169,  563,

      559,  169,  562,  169,  560,  169,  169,  566,  557,  555,
      169,  556,  169,  169,  169,  927,  169,  169,  169,  561,
      169,  169,  564,  613,  169,  614,  563,  169,  169,  562,
      169,  169,  565,  169,  566,  567,  927,  169,  927,  169,
      169,  569,  568,  169,  169,  169,  927,  615,  169,  564,
      613,  169,  614,  169,  169,  570,  927,  927,  169,  565,
      169,  169,  567,  169,  169,  169,  169,  169,  569,  568,
      169,  169,  169,  169,  615,  576,  616,  571,  169,  617,
      169,  169,  570,  572,  574,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  573,  577,  169,  575,

      169,  927,  576,  616,  571,  169,  617,  927,  169,  169,
      572,  574,  169,  169,  169,  578,  169,  169,  169,  169,
      169,  927,  169,  573,  577,  169,  575,  927,  169,  580,
      169,  927,  169,  582,  579,  927,  169,  584,  169,  169,
      169,  581,  578,  583,  169,  169,  169,  169,  169,  585,
      169,  588,  169,  169,  169,  169,  580,  169,  169,  169,
      582,  579,  587,  589,  584,  169,  169,  169,  581,  586,
      583,  169,  169,  169,  169,  169,  585,  169,  588,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  587,
      589,  927,  169,  927,  618,  927,  586,  596,  169,  591,

      169,  169,  169,  592,  169,  590,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      593,  618,  169,  927,  596,  927,  591,  594,  927,  169,
      592,  169,  590,  169,  169,  169,  169,  595,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  593,  927,  169,
      597,  601,  169,  927,  594,  169,  598,  619,  599,  927,
      169,  169,  600,  169,  595,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  604,  169,  169,  597,  601,  169,
      602,  927,  169,  598,  619,  599,  603,  169,  169,  600,
      169,  169,  169,  169,  169,  620,  169,  169,  169,  169,

      169,  604,  169,  169,  621,  622,  169,  602,  169,  608,
      605,  623,  169,  603,  169,  606,  624,  169,  169,  169,
      169,  607,  620,  169,  625,  626,  169,  169,  169,  627,
      628,  621,  622,  169,  629,  169,  608,  605,  623,  169,
      630,  631,  606,  624,  632,  633,  634,  169,  607,  635,
      636,  625,  626,  169,  637,  169,  627,  628,  638,  639,
      642,  629,  643,  640,  644,  645,  646,  630,  631,  647,
      648,  632,  633,  634,  641,  649,  635,  636,  650,  651,
      652,  637,  653,  654,  655,  638,  639,  642,  656,  643,
      640,  644,  645,  646,  657,  658,  647,  648,  659,  660,

      661,  641,  649,  662,  663,  650,  651,  652,  664,  653,
      654,  655,  665,  666,  667,  656,  668,  669,  670,  671,
      672,  657,  658,  673,  674,  659,  660,  661,  741,  169,
      662,  663,  169,  742,  927,  664,  927,  679,  169,  665,
      666,  667,  675,  668,  669,  670,  671,  672,  169,  169,
      673,  674,  677,  169,  169,  741,  169,  169,  169,  169,
      742,  676,  681,  680,  679,  169,  678,  169,  169,  675,
      927,  927,  743,  169,  169,  169,  169,  169,  169,  677,
      169,  169,  169,  685,  169,  169,  169,  169,  676,  681,
      680,  682,  683,  678,  169,  169,  684,  169,  169,  743,

      169,  169,  169,  744,  169,  169,  169,  169,  169,  169,
      685,  169,  745,  169,  169,  686,  169,  689,  682,  683,
      169,  169,  927,  684,  169,  169,  688,  169,  169,  169,
      744,  169,  687,  169,  169,  169,  169,  169,  169,  745,
      169,  169,  686,  169,  689,  169,  169,  169,  169,  690,
      691,  169,  692,  688,  169,  169,  927,  169,  169,  687,
      746,  747,  927,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  690,  691,  169,  692,
      693,  694,  697,  169,  169,  169,  169,  746,  747,  169,
      169,  695,  169,  169,  169,  169,  169,  169,  169,  169,

      696,  169,  169,  169,  169,  169,  169,  693,  694,  697,
      169,  698,  169,  169,  169,  169,  169,  169,  695,  169,
      169,  169,  169,  169,  169,  699,  169,  696,  927,  700,
      169,  169,  169,  169,  169,  169,  748,  927,  698,  169,
      169,  169,  169,  169,  169,  927,  169,  169,  927,  701,
      169,  169,  699,  169,  169,  169,  700,  702,  927,  169,
      927,  169,  169,  748,  169,  169,  169,  169,  704,  169,
      169,  169,  703,  169,  169,  169,  701,  169,  705,  706,
      169,  169,  169,  169,  702,  169,  169,  169,  169,  169,
      707,  169,  169,  749,  708,  704,  169,  169,  169,  703,

      169,  169,  169,  169,  169,  705,  706,  169,  169,  169,
      169,  711,  169,  709,  169,  169,  169,  707,  169,  169,
      749,  708,  169,  169,  169,  169,  710,  927,  169,  169,
      169,  169,  750,  927,  169,  169,  169,  712,  711,  169,
      709,  713,  169,  169,  927,  169,  169,  927,  169,  169,
      169,  715,  714,  710,  169,  169,  169,  169,  169,  750,
      169,  751,  169,  169,  712,  718,  169,  927,  713,  169,
      169,  169,  752,  716,  169,  169,  717,  169,  715,  714,
      169,  169,  169,  169,  169,  169,  169,  169,  751,  169,
      169,  719,  718,  720,  169,  169,  753,  169,  169,  752,

      716,  169,  927,  717,  169,  169,  169,  169,  169,  169,
      169,  927,  169,  169,  169,  169,  721,  169,  719,  169,
      720,  169,  169,  753,  169,  169,  927,  169,  169,  169,
      927,  726,  169,  169,  723,  169,  754,  724,  722,  169,
      728,  169,  169,  721,  169,  169,  169,  169,  725,  169,
      169,  169,  169,  169,  169,  169,  169,  727,  726,  169,
      169,  723,  169,  754,  724,  722,  169,  728,  927,  729,
      169,  169,  169,  169,  169,  725,  169,  169,  169,  169,
      169,  731,  169,  169,  727,  730,  169,  169,  927,  169,
      734,  169,  927,  169,  169,  169,  729,  169,  169,  755,

      169,  927,  732,  169,  169,  169,  169,  736,  731,  169,
      169,  733,  730,  169,  169,  169,  737,  734,  169,  735,
      169,  169,  169,  756,  169,  169,  755,  757,  169,  732,
      169,  169,  169,  169,  736,  758,  169,  927,  733,  740,
      169,  169,  169,  737,  169,  169,  735,  738,  169,  739,
      756,  169,  169,  169,  757,  169,  759,  760,  761,  169,
      169,  762,  758,  169,  169,  169,  740,  763,  764,  765,
      766,  169,  169,  767,  738,  169,  739,  768,  769,  770,
      169,  771,  772,  759,  760,  761,  169,  773,  762,  774,
      775,  169,  169,  776,  763,  764,  765,  766,  777,  778,

      767,  779,  780,  781,  768,  769,  770,  782,  771,  772,
      783,  784,  785,  786,  773,  787,  774,  775,  788,  789,
      776,  169,  927,  169,  927,  777,  778,  791,  779,  780,
      781,  169,  927,  792,  782,  793,  169,  783,  784,  785,
      786,  169,  787,  169,  839,  788,  789,  169,  169,  169,
      169,  169,  790,  169,  791,  169,  169,  796,  169,  795,
      792,  169,  793,  169,  794,  927,  927,  840,  169,  169,
      169,  839,  800,  927,  169,  169,  169,  169,  169,  790,
      169,  169,  169,  169,  796,  797,  795,  169,  169,  169,
      169,  794,  169,  169,  840,  841,  169,  798,  927,  800,

      799,  803,  169,  169,  169,  804,  169,  169,  169,  169,
      169,  842,  797,  169,  169,  802,  169,  169,  801,  169,
      169,  169,  841,  169,  798,  169,  169,  799,  803,  169,
      169,  169,  804,  169,  169,  927,  169,  169,  842,  169,
      169,  169,  802,  808,  805,  801,  806,  169,  169,  169,
      169,  169,  169,  169,  809,  807,  169,  169,  169,  169,
      169,  169,  810,  927,  927,  927,  169,  169,  169,  927,
      808,  805,  169,  806,  169,  169,  169,  169,  169,  927,
      169,  809,  807,  169,  169,  811,  169,  169,  169,  810,
      812,  169,  169,  169,  169,  169,  814,  927,  927,  169,

      843,  169,  169,  169,  169,  169,  169,  169,  813,  169,
      169,  169,  811,  169,  169,  815,  169,  812,  169,  169,
      169,  169,  169,  814,  169,  169,  169,  843,  169,  169,
      169,  816,  169,  169,  169,  813,  169,  169,  169,  169,
      169,  169,  815,  169,  169,  817,  844,  169,  169,  169,
      818,  169,  169,  169,  819,  169,  169,  169,  816,  169,
      820,  169,  927,  927,  169,  169,  169,  169,  823,  169,
      169,  169,  817,  844,  169,  169,  169,  818,  821,  169,
      169,  819,  169,  822,  169,  169,  169,  820,  169,  169,
      169,  927,  169,  824,  169,  823,  169,  169,  169,  169,

      825,  927,  169,  845,  169,  821,  169,  169,  846,  169,
      822,  927,  169,  826,  169,  169,  169,  169,  169,  828,
      824,  827,  169,  169,  169,  169,  169,  825,  829,  927,
      845,  169,  927,  832,  169,  846,  169,  169,  169,  169,
      826,  169,  169,  169,  927,  169,  828,  169,  827,  169,
      169,  169,  830,  831,  927,  829,  833,  169,  169,  169,
      832,  169,  835,  927,  169,  169,  169,  169,  169,  169,
      169,  834,  169,  169,  169,  927,  169,  837,  847,  830,
      831,  169,  169,  833,  169,  169,  169,  836,  169,  835,
      169,  848,  169,  169,  169,  169,  849,  850,  834,  169,

      169,  169,  838,  169,  837,  847,  169,  851,  169,  169,
      169,  852,  853,  854,  836,  169,  855,  169,  848,  169,
      169,  856,  857,  849,  850,  858,  169,  859,  169,  838,
      860,  861,  862,  169,  851,  863,  864,  169,  852,  853,
      854,  865,  927,  855,  866,  169,  169,  868,  856,  857,
      927,  927,  858,  169,  859,  867,  169,  860,  861,  862,
      169,  169,  863,  864,  169,  169,  169,  169,  865,  169,
      869,  866,  169,  169,  868,  871,  169,  872,  169,  169,
      169,  169,  867,  169,  873,  870,  893,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  869,  169,  169,

      894,  169,  871,  169,  872,  169,  169,  169,  169,  169,
      169,  873,  870,  893,  169,  169,  169,  169,  874,  875,
      169,  169,  169,  169,  169,  169,  169,  894,  169,  169,
      895,  927,  169,  876,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  874,  875,  169,  169,  169,
      169,  169,  169,  169,  879,  169,  169,  895,  877,  169,
      876,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  880,  169,  878,  883,  169,
      169,  879,  169,  169,  169,  877,  927,  927,  169,  881,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  880,  169,  878,  883,  885,  169,  169,  882,
      169,  169,  169,  169,  169,  169,  881,  884,  169,  169,
      169,  169,  169,  169,  169,  169,  886,  169,  169,  887,
      169,  169,  169,  885,  169,  169,  882,  169,  169,  169,
      169,  169,  169,  888,  884,  169,  169,  169,  889,  169,
      169,  169,  169,  886,  169,  169,  887,  169,  169,  169,
      169,  890,  169,  169,  169,  169,  169,  169,  927,  169,
      888,  927,  169,  169,  169,  889,  896,  897,  169,  169,
      169,  898,  169,  169,  169,  169,  899,  169,  890,  169,
      169,  900,  901,  169,  169,  169,  902,  169,  891,  169,

      169,  169,  892,  896,  897,  169,  169,  169,  898,  169,
      169,  169,  169,  899,  903,  169,  169,  169,  900,  901,
      169,  169,  169,  902,  169,  891,  169,  169,  169,  892,
      169,  169,  169,  169,  169,  904,  169,  927,  169,  169,
      169,  903,  169,  169,  169,  905,  927,  169,  169,  169,
      169,  169,  927,  169,  169,  169,  927,  169,  169,  169,
      169,  169,  904,  169,  908,  927,  169,  169,  906,  169,
      169,  169,  905,  169,  169,  169,  169,  169,  169,  169,
      927,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  908,  907,  169,  169,  906,  169,  169,  169,  169,

      169,  169,  169,  169,  909,  169,  169,  910,  169,  169,
      169,  169,  169,  913,  169,  169,  169,  169,  927,  907,
      169,  169,  912,  169,  169,  169,  169,  914,  915,  916,
      169,  909,  169,  911,  910,  169,  169,  917,  169,  927,
      913,  169,  169,  169,  169,  169,  169,  169,  169,  912,
      169,  169,  169,  927,  914,  915,  916,  169,  169,  169,
      911,  918,  927,  919,  917,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  923,  924,  169,  169,  169,  927,  918,  920,
      919,  922,  925,  169,  169,  169,  169,  169,  921,  927,

      169,  169,  927,  169,  169,  169,  169,  169,  169,  923,
      924,  169,  169,  169,  169,  169,  920,  169,  922,  925,
      927,  927,  927,  169,  169,  921,  169,  169,  169,  926,
      927,  169,  927,  169,  169,  169,  927,  927,  169,  169,
      169,  169,  169,  927,  169,  927,  169,  927,  927,  927,
      927,  927,  927,  169,  927,  927,  926,  927,  169,  927,
      169,  169,  169,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  169,   77,  927,  927,   77,   78,  927,
       78,   78,  157,  927,  157,  157,  159,  927,  159,  159,
      160,  927,  160,  160,  169,  927,  169,  169,    5,  927,

      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927
    } ;

static yyconst flex_int16_t yy_chk[3765] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   24,   21,   19,   23,   26,   17,   21,   17,   24,
       23,   27,   29,   17,   28,   33,   29,   19,   28,   18,
       19,   19,   42,   42,   28,   17,   18,   17,   24,   21,
       19,   23,   26,   17,   21,   17,   24,   23,   27,   29,
       17,   28,   33,   29,   19,   28,   18,   19,   19,   20,
       22,   28,  930,   20,   32,   88,   22,   20,   30,   22,

       25,   89,   22,   20,   92,   32,   20,   25,   25,  337,
       34,   32,   30,   25,   34,  240,   20,   22,   30,   30,
       20,   32,   88,   22,   20,   30,   22,   25,   89,   22,
       20,   92,   32,   20,   25,   25,   31,   34,   32,   30,
       25,   34,   38,   98,   31,   30,   30,   62,   31,  164,
       38,   31,  163,   37,  160,   37,   43,   43,   37,   39,
       39,   49,   49,   31,   50,   50,   99,   62,  159,   38,
       98,   31,   76,   76,   62,   31,   56,   38,   31,   35,
       37,   35,   37,  102,   35,   37,   39,   39,   83,   83,
       56,   35,   35,   99,   62,   56,   56,  158,  158,  165,

      165,   82,   81,   56,   90,   59,   35,   78,   35,   59,
      102,   35,   90,   59,   96,   61,   96,   56,   35,   35,
       36,   36,   56,   56,   36,   61,   95,   91,   36,   59,
       91,   90,   59,   95,   36,   61,   59,   36,   77,   90,
       59,   96,   61,   96,   51,   48,   47,   36,   36,   46,
       44,   36,   61,   95,   91,   36,   59,   91,   16,   75,
       95,   36,   61,   13,   36,   52,   52,   93,   52,   52,
       52,   52,   52,   63,   52,   52,   52,   63,   58,   75,
       52,   93,   52,   63,  103,   58,   75,  104,   52,  106,
       52,   58,  107,   63,   93,   52,   12,   11,   58,    5,

       63,    0,    0,    0,   63,   58,   75,   52,   93,   52,
       63,  103,   58,    0,  104,   52,  106,   52,   58,  107,
       63,   68,   52,   53,   53,   58,   53,   53,   53,   53,
       53,   64,   53,   53,   53,   64,   69,   68,  108,   53,
       69,   68,    0,  109,   97,   73,  101,  101,   68,   73,
      110,   64,  111,   73,   97,  115,   69,  117,   64,   53,
        0,    0,   64,   69,   68,  108,   53,   69,   68,   73,
      109,   97,   73,  101,  101,    0,   73,  110,   64,  111,
       73,   97,  115,   69,  117,  112,   53,   54,  112,   74,
      118,   54,   74,   74,  119,  100,   73,  105,  120,  105,

      100,   54,  113,  105,   54,   54,  100,  113,    0,   74,
      105,   54,  112,  100,   54,  112,   74,  118,   54,   74,
       74,  119,  100,    0,  105,  120,  105,  100,   54,  113,
      105,   54,   54,  100,  113,  116,   74,  105,   54,   55,
      100,  123,  121,   55,  121,  116,  122,   55,  122,  124,
      116,  116,  125,   55,  126,  127,   55,  128,  129,  131,
      132,  133,  116,   55,    0,  134,   55,  136,  123,  121,
       55,  121,  116,  122,   55,  122,  124,  116,  116,  125,
       55,  126,  127,   55,  128,  129,  131,  132,  133,  135,
       55,   57,  134,  135,  136,   57,  137,  138,  139,  141,

      140,   57,  142,  143,   57,  144,  145,   57,  140,  137,
      147,   57,    0,    0,  137,  148,  135,  149,   57,    0,
      135,    0,   57,  137,  138,  139,  141,  140,   57,  142,
      143,   57,  144,  145,   57,  140,  137,  147,   57,   60,
       60,  137,  148,  146,  149,  151,  150,   60,   60,  150,
      153,  152,  154,   60,  146,  152,  153,  155,  156,   60,
        0,    0,    0,    0,    0,  154,   60,   60,  169,    0,
      146,  242,  151,  150,   60,   60,  150,  153,  152,  154,
       60,  146,  152,  153,  155,  156,   60,   65,  169,  170,
      170,   65,  154,    0,  244,  169,  173,    0,  242,  173,

      173,   65,    0,    0,  171,  245,  248,   65,   65,    0,
      170,   65,    0,    0,   65,  169,  170,  170,   65,  171,
      173,  244,    0,  173,  171,    0,  173,  173,   65,  172,
      176,  171,  245,  248,   65,   65,  172,  170,   65,   66,
       66,    0,  184,  174,  172,  174,  171,  173,   66,  172,
      176,  171,   66,  175,  175,   66,  172,  176,  184,   66,
        0,  249,  184,  172,    0,  174,   66,   66,  175,  184,
      174,  172,  174,  175,  250,   66,  172,  176,  251,   66,
      175,  175,   66,  177,    0,  184,   66,   67,  249,  184,
      177,   67,  174,    0,    0,  175,  180,  177,   67,  178,

      175,  250,    0,  177,   67,  251,  178,  183,  178,  196,
      177,   67,    0,  180,   67,    0,  180,  177,   67,  178,
      183,  183,  179,  180,  177,   67,  178,  183,    0,  196,
      177,   67,  179,  178,  183,  178,  196,  252,   67,   70,
      180,   70,  179,  180,   70,  181,  178,  183,  183,  179,
        0,   70,   70,  186,  183,  186,  196,  185,    0,  179,
      181,   70,    0,    0,  252,  181,   70,  185,   70,  179,
        0,   70,  181,  253,  254,  186,    0,  185,   70,   70,
      186,    0,  186,  255,  185,  197,    0,  181,   70,   71,
       71,  188,  181,   71,  185,  189,  197,   71,  188,  190,

      253,  254,  186,   71,  185,  197,   71,  201,  189,  190,
      255,  188,  197,   71,    0,  189,   71,   71,  188,  190,
       71,    0,  189,  197,   71,  188,  190,  201,    0,  192,
       71,  194,  197,   71,  201,  189,  190,  191,  188,  192,
       71,   72,  189,  193,  191,  194,  190,  258,  194,  192,
       72,  194,   72,  193,  201,   72,  192,  191,  194,  259,
      261,   72,    0,  193,  191,    0,  192,    0,   72,    0,
      193,  191,  194,    0,  258,  194,  192,   72,  194,   72,
      193,  200,   72,  195,  191,  200,  259,  261,   72,  182,
      193,    0,  195,  182,  182,  199,  260,  195,  202,  202,

      182,  200,    0,  195,  199,  257,    0,  182,  200,  257,
      195,  260,  200,  182,    0,  199,  182,  262,  202,  195,
      182,  182,  199,  260,  195,  202,  202,  182,  200,  203,
      195,  199,  257,  205,  182,  203,  257,  203,  260,  212,
      182,  187,  199,  187,  262,  202,  205,  187,  204,  203,
      204,    0,  204,  205,  187,    0,  203,    0,  206,  212,
      205,    0,  203,  187,  203,    0,  212,  206,  187,  207,
      187,  263,  204,  205,  187,  204,  203,  204,  206,  204,
      205,  187,  208,  264,  207,  206,  212,  265,  209,  207,
      187,  198,  198,    0,  206,  209,  207,  208,  263,  204,

      266,  198,  208,  211,  211,  206,  198,  198,  209,  208,
      264,  207,  198,  210,  265,  209,  207,  210,  198,  198,
      213,  213,  209,  211,  208,  215,  267,  266,  198,  208,
      211,  211,    0,  198,  198,  209,  214,  210,  215,  198,
      210,  213,  216,  268,  210,  215,  216,  213,  213,  269,
      211,  214,  215,  267,  217,  218,  214,  270,  217,  218,
        0,    0,  271,  214,  210,  215,  216,  234,  213,  216,
      268,  234,  215,  216,  217,  218,  269,  220,  214,  220,
        0,  217,  218,  214,  270,  217,  218,  234,  221,  271,
        0,  221,    0,  216,  234,  273,  274,  220,  234,  223,

        0,  217,  218,  219,  220,  222,  220,  219,  221,  223,
        0,  275,  222,  225,  234,  221,  219,  225,  221,  223,
      222,  219,  273,  274,  220,  222,  223,  219,  226,  224,
      219,  226,  222,  276,  219,  221,  223,  225,  275,  222,
      225,  277,  224,  219,  225,    0,  223,  222,  219,  224,
      227,  226,  222,  228,  219,  226,  224,  227,  226,  229,
      276,  228,    0,  230,  225,  231,    0,  229,  277,  224,
      227,    0,  228,  228,  230,    0,  224,  227,  226,  229,
      228,  231,    0,  230,  227,  231,  229,  237,  228,  232,
      230,    0,  231,  232,  229,    0,  232,  227,  235,  228,

      228,  230,  236,  233,  233,  235,  229,  237,  231,  232,
      230,  235,  231,  238,  237,  236,  232,  278,  235,  279,
      232,  280,  236,  232,  233,  235,  281,  282,  238,  236,
      233,  233,  235,  238,  237,  283,  232,  284,  235,  286,
      238,  287,  236,  289,  278,  235,  279,  285,  280,  236,
      290,  233,  291,  281,  282,  238,  292,  285,  293,  294,
      238,  295,  283,  296,  284,  298,  286,  299,  287,  300,
      289,  301,  302,  304,  285,  305,  303,  290,  306,  291,
      307,  308,  309,  292,  285,  293,  294,  310,  295,  311,
      296,  312,  298,  313,  299,  303,  300,  315,  301,  302,

      304,  316,  305,  303,  317,  306,  318,  307,  308,  309,
      320,  321,  322,  324,  310,  325,  311,  325,  312,  326,
      313,  327,  303,  329,  315,  330,  331,  332,  316,  333,
      334,  317,  335,  318,    0,  338,    0,  320,  321,  322,
      324,  339,  325,  340,  325,  341,  326,  343,  327,  344,
      329,  342,  330,  331,  332,  338,  333,  334,  342,  335,
        0,  339,  338,  340,  349,  341,    0,  343,  339,  344,
      340,  342,  341,  345,  343,  433,  344,  346,  342,  347,
      349,  434,  338,  345,  349,  342,  347,  348,  339,  348,
      340,  349,  341,  345,  343,  346,  344,  346,  342,  347,

      345,  351,  433,  350,  346,  351,  347,  349,  434,  348,
      345,  349,    0,  347,  348,  352,  348,  353,  350,  358,
      345,  358,  346,  350,  346,  351,  347,  354,  351,  352,
      350,  354,  351,  355,    0,  352,  348,  353,  435,  356,
      355,  358,  352,  356,  353,  350,  358,    0,  358,  359,
      350,  354,  351,  355,  354,    0,  352,  357,  354,  360,
      355,  364,  352,  356,  353,  435,  356,  355,  358,  359,
      356,  363,  357,  366,  360,  363,  359,  357,  354,  360,
      355,  364,  361,  362,  357,  361,  360,  366,  364,  365,
      356,  365,    0,  366,  362,  363,  359,    0,  363,  357,

      366,  360,  363,  362,  357,  361,  360,  368,  364,  361,
      362,  365,  361,  369,  366,  370,  365,  367,  365,  371,
      366,  362,  363,  370,  367,  372,  371,  368,  372,  373,
      362,    0,  361,  369,  368,  370,    0,  367,  365,  371,
      369,  436,  370,  375,  367,  373,  371,  375,  372,  373,
      370,  367,  372,  371,  368,  372,  373,    0,  374,  379,
      369,  374,  370,  375,  367,    0,  371,  376,  436,  377,
      375,  378,  373,  380,  375,  372,  373,  381,  374,  379,
        0,  378,  376,  383,  377,  374,  379,  376,  374,  377,
      375,  378,  382,  380,  376,    0,  377,  381,  378,  383,

      380,  385,  382,  383,  381,  374,  379,  387,  378,  376,
      383,  377,  382,  384,  376,    0,  377,  386,  378,  382,
      380,  385,  384,  437,  381,  439,  383,  387,  385,  382,
      383,  388,  386,  384,  387,  388,    0,  386,    0,  382,
      384,  390,  389,  389,  386,  390,    0,  440,  385,  384,
      437,  388,  439,  391,  387,  391,    0,    0,  388,  386,
      384,  392,  388,  389,  386,  390,  394,  393,  390,  389,
      389,  396,  390,  391,  440,  398,  441,  392,  388,  442,
      391,  392,  391,  393,  396,  397,  394,  393,  392,  395,
      389,  396,  390,  394,  393,  398,  395,  399,  396,  397,

      391,    0,  398,  441,  392,  397,  442,    0,  392,  395,
      393,  396,  397,  394,  393,  400,  395,  399,  396,  400,
      401,    0,  398,  395,  399,  403,  397,    0,  404,  401,
      402,    0,  397,  403,  400,    0,  395,  405,  405,  400,
      401,  402,  400,  404,  399,  403,  400,  401,  404,  406,
      402,  409,  403,  406,  407,  404,  401,  402,  405,  408,
      403,  400,  408,  410,  405,  405,  400,  401,  402,  407,
      404,  409,  403,  406,  407,  404,  406,  402,  409,  408,
      406,  407,  411,  410,  413,  405,  408,  412,  414,  408,
      410,    0,  416,    0,  443,    0,  407,  419,  409,  413,

      406,  407,  411,  414,  413,  412,  408,  412,  414,  411,
      410,  413,  416,  415,  412,  414,  417,  419,  420,  416,
      415,  443,  418,    0,  419,    0,  413,  417,    0,  411,
      414,  413,  412,  415,  412,  414,  417,  418,  420,  416,
      415,  421,  418,  417,  419,  420,  422,  415,    0,  418,
      421,  424,  423,    0,  417,  424,  422,  444,  422,    0,
      415,  421,  423,  417,  418,  420,  422,  425,  421,  418,
      427,  426,  423,  422,  428,  424,  428,  421,  424,  423,
      426,    0,  424,  422,  444,  422,  427,  425,  421,  423,
      427,  426,  429,  422,  425,  446,  428,  427,  426,  423,

      430,  428,  424,  428,  447,  448,  432,  426,  431,  432,
      429,  449,  429,  427,  425,  430,  451,  427,  426,  429,
      430,  431,  446,  428,  452,  453,  432,  430,  431,  455,
      456,  447,  448,  432,  457,  431,  432,  429,  449,  429,
      458,  459,  430,  451,  463,  464,  466,  430,  431,  468,
      469,  452,  453,  432,  470,  431,  455,  456,  471,  472,
      475,  457,  479,  473,  481,  482,  483,  458,  459,  484,
      486,  463,  464,  466,  473,  487,  468,  469,  488,  489,
      490,  470,  493,  494,  497,  471,  472,  475,  498,  479,
      473,  481,  482,  483,  499,  500,  484,  486,  501,  503,

      504,  473,  487,  505,  506,  488,  489,  490,  508,  493,
      494,  497,  509,  510,  511,  498,  512,  513,  514,  515,
      516,  499,  500,  518,  519,  501,  503,  504,  611,  521,
      505,  506,  523,  612,    0,  508,    0,  525,  526,  509,
      510,  511,  521,  512,  513,  514,  515,  516,  522,  521,
      518,  519,  523,  524,  528,  611,  521,  525,  526,  523,
      612,  522,  528,  527,  525,  526,  524,  527,  522,  521,
        0,    0,  613,  524,  528,  522,  521,  530,  529,  523,
      524,  528,  531,  532,  525,  526,  532,  527,  522,  528,
      527,  529,  530,  524,  527,  522,  531,  530,  529,  613,

      524,  528,  531,  614,  530,  529,  532,  533,  534,  531,
      532,  536,  615,  532,  527,  534,  535,  537,  529,  530,
      538,  537,    0,  531,  530,  529,  536,  533,  534,  531,
      614,  536,  535,  532,  533,  534,  535,  542,  536,  615,
      538,  537,  534,  535,  537,  541,  540,  538,  537,  539,
      540,  539,  541,  536,  533,  534,    0,  542,  536,  535,
      616,  617,    0,  535,  542,  541,  540,  538,  537,  543,
      544,  539,  541,  540,  548,  545,  539,  540,  539,  541,
      543,  544,  547,  549,  542,  546,  547,  616,  617,  543,
      544,  545,  541,  540,  548,  545,  543,  544,  539,  550,

      546,  548,  545,  549,  553,  546,  547,  543,  544,  547,
      549,  551,  546,  547,  552,  551,  543,  544,  545,  550,
      554,  548,  545,  555,  553,  552,  550,  546,    0,  554,
      549,  553,  546,  547,  552,  551,  619,    0,  551,  556,
      554,  552,  551,  555,  557,    0,  550,  554,    0,  556,
      555,  553,  552,  558,  562,  559,  554,  557,    0,  556,
        0,  552,  551,  619,  557,  560,  556,  554,  559,  564,
      555,  557,  558,  558,  562,  559,  556,  561,  560,  561,
      558,  562,  559,  565,  557,  560,  556,  563,  566,  564,
      561,  557,  560,  620,  563,  559,  564,  561,  567,  558,

      558,  562,  559,  565,  561,  560,  561,  563,  566,  568,
      565,  570,  560,  567,  563,  566,  564,  561,  567,  569,
      620,  563,  573,  571,  561,  567,  569,    0,  572,  568,
      565,  570,  621,    0,  563,  566,  568,  571,  570,  569,
      567,  572,  573,  571,    0,  567,  569,    0,  572,  573,
      571,  575,  574,  569,  574,  572,  568,  578,  570,  621,
      576,  622,  579,  577,  571,  578,  569,    0,  572,  573,
      571,  575,  624,  576,  574,  572,  577,  578,  575,  574,
      576,  574,  579,  577,  578,  580,  583,  576,  622,  579,
      577,  581,  578,  582,  584,  581,  625,  582,  575,  624,

      576,  574,    0,  577,  578,  580,  583,  576,  585,  579,
      577,    0,  580,  583,  584,  581,  585,  582,  581,  587,
      582,  584,  581,  625,  582,  586,    0,  590,  585,  588,
        0,  591,  580,  583,  587,  585,  626,  588,  586,  587,
      593,  584,  581,  585,  582,  586,  587,  590,  589,  588,
      589,  591,  586,  592,  590,  585,  588,  592,  591,  594,
      593,  587,  595,  626,  588,  586,  587,  593,    0,  594,
      589,  596,  586,  592,  590,  589,  588,  589,  591,  594,
      592,  597,  595,  597,  592,  596,  594,  593,    0,  595,
      600,  596,    0,  598,  600,  599,  594,  589,  596,  627,

      592,    0,  598,  597,  601,  602,  594,  602,  597,  595,
      597,  599,  596,  598,  600,  599,  603,  600,  596,  601,
      598,  600,  599,  628,  601,  602,  627,  629,  605,  598,
      597,  601,  602,  606,  602,  630,  603,    0,  599,  607,
      598,  600,  599,  603,  604,  608,  601,  604,  605,  606,
      628,  601,  602,  606,  629,  605,  631,  632,  634,  607,
      606,  635,  630,  603,  604,  608,  607,  636,  639,  640,
      641,  604,  608,  642,  604,  605,  606,  647,  648,  649,
      606,  652,  653,  631,  632,  634,  607,  654,  635,  655,
      656,  604,  608,  658,  636,  639,  640,  641,  659,  660,

      642,  661,  662,  663,  647,  648,  649,  664,  652,  653,
      665,  667,  668,  669,  654,  671,  655,  656,  672,  673,
      658,  675,    0,  676,    0,  659,  660,  678,  661,  662,
      663,  677,    0,  679,  664,  680,  680,  665,  667,  668,
      669,  675,  671,  676,  741,  672,  673,  678,  675,  682,
      676,  677,  677,  679,  678,  681,  680,  683,  677,  682,
      679,  684,  680,  680,  681,    0,    0,  743,  675,  682,
      676,  741,  688,    0,  678,  681,  682,  683,  677,  677,
      679,  684,  681,  680,  683,  685,  682,  686,  684,  685,
      689,  681,  688,  687,  743,  744,  682,  686,    0,  688,

      687,  692,  681,  690,  683,  693,  691,  686,  684,  685,
      689,  745,  685,  687,  686,  691,  685,  689,  690,  688,
      687,  692,  744,  690,  686,  693,  691,  687,  692,  694,
      690,  695,  693,  691,  686,    0,  685,  689,  745,  697,
      687,  696,  691,  697,  694,  690,  695,  698,  692,  694,
      690,  695,  693,  691,  698,  696,  694,  699,  695,  697,
      700,  696,  700,    0,    0,    0,  697,  698,  696,    0,
      697,  694,  701,  695,  698,  702,  694,  699,  695,    0,
      700,  698,  696,  703,  699,  701,  697,  700,  696,  700,
      702,  704,  701,  705,  698,  702,  706,    0,    0,  701,

      746,  707,  702,  703,  699,  709,  710,  700,  705,  711,
      703,  704,  701,  705,  712,  707,  706,  702,  704,  701,
      705,  707,  702,  706,  708,  709,  710,  746,  707,  711,
      703,  708,  709,  710,  712,  705,  711,  716,  704,  715,
      705,  712,  707,  706,  708,  713,  748,  714,  707,  713,
      714,  708,  709,  710,  715,  717,  711,  716,  708,  715,
      718,  712,    0,    0,  716,  719,  715,  714,  721,  713,
      720,  708,  713,  748,  714,  717,  713,  714,  719,  723,
      718,  715,  717,  720,  716,  719,  715,  718,  721,  722,
      720,    0,  719,  722,  714,  721,  713,  720,  725,  723,

      724,    0,  717,  749,  724,  719,  723,  718,  750,  722,
      720,    0,  719,  725,  728,  721,  722,  720,  725,  727,
      722,  726,  726,  727,  724,  725,  723,  724,  728,    0,
      749,  724,    0,  731,  728,  750,  722,  731,  730,  729,
      725,  728,  726,  727,    0,  725,  727,  732,  726,  726,
      727,  724,  729,  730,    0,  728,  733,  731,  730,  729,
      731,  728,  735,    0,  731,  730,  729,  732,  736,  726,
      727,  734,  734,  737,  732,    0,  733,  738,  753,  729,
      730,  738,  735,  733,  731,  730,  729,  737,  736,  735,
      740,  757,  734,  737,  732,  736,  759,  762,  734,  734,

      737,  738,  739,  733,  738,  753,  739,  765,  738,  735,
      740,  766,  768,  769,  737,  736,  771,  740,  757,  734,
      737,  772,  773,  759,  762,  775,  739,  776,  738,  739,
      779,  781,  782,  739,  765,  783,  788,  740,  766,  768,
      769,  789,    0,  771,  790,  791,  792,  793,  772,  773,
        0,    0,  775,  739,  776,  792,  794,  779,  781,  782,
      796,  797,  783,  788,  790,  791,  792,  793,  789,  799,
      794,  790,  791,  792,  793,  797,  794,  798,  795,  798,
      796,  797,  792,  794,  799,  795,  844,  796,  797,  799,
      800,  790,  791,  792,  793,  801,  799,  794,  795,  798,

      845,  803,  797,  794,  798,  795,  798,  796,  797,  804,
      800,  799,  795,  844,  805,  801,  799,  800,  802,  806,
      802,  803,  801,  807,  808,  795,  798,  845,  803,  804,
      847,    0,  809,  808,  805,  810,  804,  800,  811,  806,
      802,  805,  801,  807,  808,  802,  806,  802,  803,  812,
      807,  808,  809,  813,  815,  810,  804,  847,  811,  809,
      808,  805,  810,  816,  814,  811,  806,  802,  817,  812,
      807,  808,  819,  813,  815,  817,  812,  814,  821,  809,
      813,  815,  810,  816,  814,  811,    0,    0,  817,  818,
      816,  814,  819,  818,  820,  817,  812,  822,  821,  819,

      813,  815,  817,  823,  814,  821,  824,  826,  824,  820,
      816,  814,  825,  818,  820,  817,  818,  822,  827,  819,
      818,  820,  828,  823,  822,  821,  825,  826,  824,  828,
      823,  829,  825,  824,  826,  824,  820,  833,  827,  825,
      818,  820,  828,  830,  822,  827,  832,  830,  831,  828,
      823,  829,  831,  825,  826,  824,  828,  833,  829,  825,
      834,  832,  835,  836,  833,  827,  832,  830,    0,  828,
      830,    0,  831,  832,  830,  831,  852,  854,  829,  831,
      834,  855,  835,  836,  833,  837,  858,  834,  832,  835,
      836,  861,  862,  832,  830,  838,  863,  866,  837,  831,

      867,  868,  838,  852,  854,  837,  869,  834,  855,  835,
      836,  870,  837,  858,  871,  838,  873,  866,  861,  862,
      867,  868,  838,  863,  866,  837,  869,  867,  868,  838,
      874,  870,  837,  869,  871,  872,  873,    0,  870,  872,
      875,  871,  838,  873,  866,  874,    0,  867,  868,  876,
      874,  877,    0,  869,  878,  880,    0,  874,  870,  872,
      875,  871,  872,  873,  882,    0,  872,  875,  879,  876,
      879,  877,  874,  883,  878,  880,  876,  874,  877,  881,
        0,  878,  880,  884,  882,  886,  872,  875,  887,  885,
      879,  882,  881,  883,  888,  879,  876,  879,  877,  881,

      883,  878,  880,  884,  885,  886,  881,  888,  887,  885,
      884,  882,  886,  894,  888,  887,  885,  879,    0,  881,
      883,  888,  890,  891,  892,  889,  881,  896,  898,  900,
      884,  885,  886,  889,  888,  887,  885,  901,  903,    0,
      894,  888,  890,  891,  892,  889,  904,  905,  906,  890,
      891,  892,  889,    0,  896,  898,  900,  907,  903,  909,
      889,  904,    0,  906,  901,  903,  904,  905,  906,  890,
      891,  892,  889,  904,  905,  906,  908,  907,  910,  909,
      911,  912,  913,  915,  907,  903,  909,    0,  904,  908,
      906,  911,  918,  904,  905,  906,  908,  919,  910,    0,

      911,  912,    0,  908,  907,  910,  909,  911,  912,  913,
      915,  921,  918,  922,  925,  920,  908,  919,  911,  918,
        0,    0,    0,  908,  919,  910,  926,  911,  912,  920,
        0,  921,    0,  922,  925,  920,    0,    0,  921,  918,
      922,  925,  920,    0,  919,    0,  926,    0,    0,    0,
        0,    0,    0,  926,    0,    0,  920,    0,  921,    0,
      922,  925,  920,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  926,  928,    0,    0,  928,  929,    0,
      929,  929,  931,    0,  931,  931,  932,    0,  932,  932,
      933,    0,  933,  933,  934,    0,  934,  934,  927,  927,

      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1598 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1842 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 928 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 927 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(READ)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(QUIT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 125:
#line 191 "flex_lexer.l"
case 126:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_DFLOATVAL;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2601 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 928 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 928 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 927);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 221 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
	fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
