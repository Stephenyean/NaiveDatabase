#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[940] =
    {   0,
        0,    0,    2,    2,  137,  135,    4,    4,  135,  128,
      135,  128,  128,  131,  128,  128,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
        2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,    0,    0,  134,    1,
      130,  129,  131,  126,  125,  127,  133,  133,  133,  133,
      133,  107,  133,  133,  108,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  109,  133,  110,  111,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      112,  113,  114,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      115,  133,  133,  133,  133,  133,  133,  133,  133,    2,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  132,  129,   94,  133,   95,  133,
      133,   96,   97,  123,  133,  133,  133,  133,  133,  133,
      133,  133,   98,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,   99,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  100,  133,  133,  101,  133,  133,  133,  133,  133,

      121,  133,  122,  133,  102,  133,  133,  103,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  104,  133,  133,  133,  124,  133,  105,  133,  133,
      133,  106,  133,  133,  133,  133,  117,  133,  133,  133,
      133,  133,  133,  133,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  133,  133,  133,  133,  133,   72,
      133,  133,  133,  133,  133,  133,   73,  133,  133,  133,
      133,   74,  133,  133,  133,   75,  133,  133,  133,  133,
      133,   76,   77,   78,  133,  133,   79,  133,   80,  133,
      133,  133,  133,  133,  133,   81,  133,   82,   83,   84,
      133,   85,  133,  133,  133,  133,   86,  133,  133,  133,

      133,  133,   87,   88,  133,  133,  120,  119,  133,  133,
      133,  133,  133,   89,  133,  133,  133,  133,   90,   91,
      133,  133,  133,  133,  133,  133,  133,  133,   92,  133,
      133,   93,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       54,   55,  133,  133,  133,  133,  133,  133,  133,   56,
      133,  133,  133,  133,   57,  133,  133,  133,  133,  133,
      133,  133,  133,  133,   58,  133,  133,  133,   59,   60,
      133,  133,  133,  133,   61,   62,   63,   64,  133,  133,
      133,   65,   66,  133,  133,  133,  133,  133,   67,  133,
      133,  133,  133,   68,  133,  133,  133,   69,  133,  133,
      133,   70,  133,  133,  133,   71,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  133,   30,  133,  133,   31,  133,   32,  133,
      133,  133,   33,   34,  133,   35,   36,   37,  133,   38,
      133,   39,   40,  133,   41,   42,  133,  133,   43,  133,
      133,   44,  133,  133,  133,   45,  133,   46,   47,   48,
      133,   49,  133,  133,  133,   50,   51,   52,   53,  133,

      133,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  133,  133,   19,  133,   20,
       21,   22,   23,  133,   24,  133,  133,   25,   26,  133,
       27,   28,  133,  133,  133,  118,   29,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,  116,  133,   10,  133,   11,  133,
       12,  133,  133,   13,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  133,    7,  133,    8,    9,    2,
        2,    2,    2,    2,    5,    6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[947] =
    {   0,
        0,    0,   65,    0,  365, 3746,  129,  131,    0, 3746,
      355,  353,  347,  127,  126,  341,  123,  123,  131,  177,
      112,  170,  121,  129,  183,  119,  135,  138,  189,  186,
      224,  192,  120,  227,  270,  318,  225,  246,  191,    0,
        0,  161,  193,  346,    0,  338,  314,  309,  252,  251,
      299,  375,  436,  488,  540,  265,  588,  276,  251,  636,
      299,  305,  320,  375,  688,  736,  788,  334,  387,  838,
      890,  938,  439,  438,  353,  263,  304,  286, 3746, 3746,
      280,  267,  265, 3746, 3746, 3746,    0,  140,  220,  287,
      387,  292,  370,  432,    0,  371,  381,  440,  411,  422,

      486,  431,  430,  438,  451,  492,  444,  439,  443,  447,
      479,  481,  480,  490,    0,  484,  533,  497,  503,  490,
      511,  535,  553,  519,  532,  537,  537,  539,  548,  560,
      556,    0,  559,  547,  551,  570,  586,  590,  618,  593,
      593,  592,  587,  589,  607,  598,  614,  605,  632,  608,
      609,  626,  642,  649,  658,  653,  652,  653,  640,    0,
      302,  266,  252,    0,    0,  246,  236,  346,    0,    0,
        0,  670,  696,  686,  719,  742,  750,  700,  758,  724,
      792,  787,  793,  825,  817,  990,  857,  846,  882,  804,
     1040,  888,  923,  924,  926,  962,  968,  967,  992,  912,

      996, 1089, 1021, 1022,  928, 1035, 1046, 1074, 1064, 1092,
     1086, 1108, 1114, 1117, 1142, 1126, 1000, 1148, 1143, 1159,
     1171, 1176, 1177, 1229, 1210, 1214, 1213, 1226, 1251, 1254,
     1259, 1248, 1262, 1280, 1284, 1297, 1302, 1316, 1313, 1283,
     1321, 1338, 1305, 1342, 3746,  214,    0,  691,    0,  694,
      696,    0,    0,    0,  730,  736,  748,  793,  800,  832,
      857,  842,    0, 1002,  871,  883, 1200,  893,  942,  941,
      969, 1021, 1054, 1058, 1077, 1066, 1111, 1157,    0, 1152,
     1159, 1181, 1166, 1189, 1227, 1251, 1322, 1336, 1353, 1354,
     1356, 1366, 1343, 1358,    0, 1355, 1371, 1368, 1375, 1379,

        0, 1375, 1363, 1366,    0, 1380, 1375, 1376, 1391, 1392,
     1409, 1386, 1385, 1392, 1392, 1409, 1414, 1396, 1409, 1413,
     1416,    0, 1402, 1406, 1410,    0, 1419,    0, 1417, 1414,
     1430,    0, 1422, 1432, 1423, 1440,    0, 1432, 1429, 1448,
     1431, 1435, 1441, 1456,    0,  206, 1462, 1464, 1465, 1467,
     1483, 1475, 1478, 1479, 1508, 1513, 1500, 1521, 1516, 1524,
     1542, 1550, 1529, 1561, 1567, 1579, 1578, 1592, 1553, 1595,
     1607, 1613, 1632, 1596, 1638, 1621, 1646, 1629, 1630, 1661,
     1664, 1670, 1683, 1675, 1700, 1686, 1692, 1715, 1689, 1718,
     1721, 1740, 1737, 1746, 1724, 1743, 1729, 1774, 1789, 1779,

     1783, 1798, 1792, 1797, 1811, 1822, 1828, 1823, 1832, 1833,
     1851, 1863, 1862, 1857, 1861, 1886, 1891, 1901, 1902, 1897,
     1907, 1915, 1919, 1925, 1936, 1930, 1953, 1941, 1959, 1969,
     1955, 1965, 1981, 1993, 1994, 1995, 1999, 2024, 2007, 2037,
     2025, 2038, 2036, 2066, 1448, 1453, 1450, 1461, 1496,    0,
     1586, 1610, 1634, 1672, 1718, 1757,    0, 1762, 1791, 1852,
     1900,    0, 1922, 1927, 1964,    0, 2036, 2037, 2039, 2046,
     2071,    0,    0,    0, 2072, 2062,    0, 2068,    0, 2068,
     2066, 2062, 2074, 2076, 2088,    0, 2084,    0,    0,    0,
     2077,    0, 2090, 2098, 2085, 2089,    0, 2105, 2107, 2096,

     2097, 2103,    0,    0, 2116, 2119,    0,    0, 2112, 2108,
     2107, 2115, 2129,    0, 2131, 2128, 2133, 2125,    0, 2126,
     2143, 2134, 2128, 2149, 2131, 2149, 2152, 2150,    0, 2139,
     2156,    0, 2161, 2164, 2165, 2176, 2166, 2175, 2194, 2198,
     2207, 2209, 2226, 2235, 2210, 2243, 2244, 2261, 2252, 2238,
     2280, 2289, 2294, 2284, 2286, 2312, 2302, 2310, 2338, 2315,
     2326, 2340, 2348, 2343, 2356, 2369, 2364, 2372, 2366, 2388,
     2397, 2401, 2418, 2402, 2423, 2412, 2426, 2436, 2440, 2442,
     2454, 2451, 2452, 2464, 2475, 2492, 2476, 2494, 2500, 2508,
     2505, 2506, 2542, 2548, 2509, 2510, 2546, 2550, 2559, 2564,

     2560, 2576, 2578, 2588, 2582, 2594, 2600, 2610, 2618, 2613,
     2612, 2646, 2648, 2650, 2634, 2664, 2656, 2658, 2662, 2672,
        0,    0, 2194, 2239, 2268, 2270, 2283, 2337, 2377,    0,
     2402, 2390, 2490, 2518,    0, 2602, 2617, 2671, 2680, 2671,
     2672, 2674, 2692, 2693,    0, 2700, 2691, 2691,    0,    0,
     2693, 2710, 2698, 2709,    0,    0,    0,    0, 2721, 2715,
     2705,    0,    0, 2721, 2709, 2711, 2725, 2722,    0, 2732,
     2715, 2733, 2738, 2722, 2725, 2725, 2745,    0, 2742, 2747,
     2750,    0, 2740, 2760, 2762,    0, 2760, 2762, 2770, 2766,
     2772, 2775, 2794, 2778, 2784, 2796, 2812, 2800, 2826, 2824,

     2828, 2834, 2836, 2838, 2842, 2864, 2867, 2866, 2870, 2888,
     2878, 2900, 2899, 2903, 2904, 2916, 2933, 2932, 2941, 2937,
     2938, 2942, 2954, 2956, 2970, 2991, 2972, 2978, 2986, 2995,
     2996, 3007, 3004, 3008, 3010, 3044, 3026, 3049, 3060, 3045,
     3050, 3074, 3082, 3061, 3079, 3104, 3093, 3095, 3098, 3114,
     3123, 3127, 2779,    0, 2841, 2940, 2959, 2995,    0, 3044,
     3086, 3102,    0,    0, 3130,    0,    0,    0, 3132,    0,
     3124,    0,    0, 3115,    0,    0, 3123, 3138,    0, 3141,
     3153,    0, 3137, 3153, 3136,    0, 3159, 3144,    0,    0,
     3157,    0, 3170, 3171, 3153,    0,    0,    0,    0, 3156,

     3164, 3172, 3177, 3181, 3182, 3186, 3203, 3187, 3211, 3220,
     3221, 3212, 3215, 3246, 3249, 3254, 3255, 3257, 3260, 3270,
     3265, 3278, 3283, 3288, 3289, 3300, 3291, 3294, 3319, 3328,
     3322, 3337, 3323, 3334, 3345, 3358, 3360, 3362, 3368, 3386,
     3371, 3377, 3394, 3396, 3399, 3402, 3408, 3410, 3412, 3427,
        0,    0,    0,    0,    0, 3178, 3193,    0, 3211,    0,
        0,    0,    0, 3274,    0, 3319, 3376,    0,    0, 3416,
        0,    0, 3423, 3432, 3442,    0,    0, 3444, 3445, 3448,
     3450, 3453, 3456, 3466, 3478, 3479, 3481, 3482, 3484, 3487,
     3490, 3496, 3519, 3518, 3520, 3522, 3533, 3524, 3530, 3541,

     3556, 3535, 3552, 3558,    0, 3470,    0, 3521,    0, 3557,
        0, 3553, 3563,    0, 3584, 3587, 3586, 3595, 3589, 3608,
     3592, 3598, 3627, 3623, 3590,    0, 3579,    0,    0, 3624,
     3626, 3649, 3632, 3640,    0,    0, 3641, 3657, 3746, 3721,
     3725,  189, 3729, 3733, 3737, 3741
    } ;

static yyconst flex_int16_t yy_def[947] =
    {   0,
      939,    1,  939,    3,  939,  939,  939,  939,  940,  939,
      941,  939,  939,  939,  939,  939,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      943,  943,  939,  944,  943,  945,  943,  943,  943,  943,
      943,  946,  946,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  939,  940,  941,  939,  939,
      939,  939,  939,  939,  939,  939,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  943,
      943,  944,  945,  943,  943,  943,  943,  943,  943,  943,
      943,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  939,  939,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  943,  943,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      942,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  942,  942,  942,  942,  942,   53,
       53,   53,   53,   53,  942,  942,   53,   53,    0,  939,
      939,  939,  939,  939,  939,  939
    } ;

static yyconst flex_int16_t yy_nxt[3812] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   40,   40,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   40,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   45,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,

       75,   75,   75,   41,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   75,   75,
       76,   76,   76,   76,   82,   83,   84,   85,   88,   94,
       89,  113,  105,   96,  111,  119,   90,  106,   91,  114,
      112,  120,  138,   92,  121,  247,   93,   97,  122,   95,
       98,   99,  161,   76,  123,   88,   94,   89,  113,  105,
       96,  111,  119,   90,  106,   91,  114,  112,  120,  138,
       92,  121,  247,   93,   97,  122,   95,   98,   99,  100,
      107,  123,   87,  101,   76,   76,  108,  102,  127,  109,

      115,  124,  110,  103,  135,  125,  104,  116,  117,  126,
      158,  159,  128,  118,  346,  136,  100,  107,  129,  130,
      101,  137,  246,  108,  102,  127,  109,  115,  124,  110,
      103,  135,  125,  104,  116,  117,  126,  158,  159,  128,
      118,  131,  136,  139,  346,  129,  130,  140,  137,  132,
      153,  248,  154,  133,  166,  155,  134,  164,  156,  167,
      168,  169,  170,  198,   76,   76,  157,  172,  131,  345,
      139,  199,   82,   83,  140,  246,  132,  153,  248,  154,
      133,  172,  155,  134,  141,  156,  142,  172,   81,  143,
      198,   79,  172,  157,  172,  190,  144,  145,  199,  196,

      191,  172,  146,  161,   76,  197,  253,  245,  172,  171,
      249,  141,  172,  142,  172,  172,  143,  166,  250,  172,
      165,  205,  190,  144,  145,  204,  196,  191,  172,  146,
      147,  148,  197,  253,  149,  172,  206,  249,  150,  172,
      207,  172,  172,  164,  151,  250,  208,  152,  205,  160,
      172,   86,  204,  167,  168,   81,  172,  147,  148,   80,
       79,  149,  172,  206,  939,  150,  223,  207,  172,  172,
      172,  151,  939,  208,  152,  160,  160,  172,  160,  160,
      160,  160,  160,  172,  160,  160,  160,  209,  254,  172,
      173,  210,  174,  223,  257,  211,  172,  172,  175,  251,

      176,  258,  252,  224,  259,  177,  260,  225,  178,  939,
      939,  172,  939,  939,  209,  254,  172,  173,  210,  174,
      939,  257,  211,  172,  939,  175,  251,  176,  258,  252,
      224,  259,  177,  260,  225,  178,  160,  160,  172,  160,
      160,  160,  160,  160,  263,  160,  160,  160,  939,  255,
      172,  241,  179,  264,  172,  172,  261,  243,  244,  242,
      269,  270,  271,  256,  272,  273,  262,  278,  279,  280,
      281,  263,  180,  939,  172,  172,  255,  939,  241,  179,
      264,  172,  172,  261,  243,  244,  242,  269,  270,  271,
      256,  272,  273,  262,  278,  279,  280,  281,  265,  180,

      181,  172,  172,  266,  172,  282,  274,  283,  275,  267,
      284,  288,  276,  285,  182,  286,  268,  183,  184,  277,
      287,  939,  293,  294,  172,  265,  295,  181,  296,  939,
      266,  172,  282,  274,  283,  275,  267,  284,  288,  276,
      285,  182,  286,  268,  183,  184,  277,  287,  289,  293,
      294,  172,  185,  295,  301,  296,  186,  297,  290,  298,
      187,  302,  303,  291,  292,  299,  188,  300,  304,  189,
      305,  306,  307,  308,  309,  289,  172,  939,  310,  185,
      311,  301,  312,  186,  297,  290,  298,  187,  302,  303,
      291,  292,  299,  188,  300,  304,  189,  305,  306,  307,

      308,  309,  313,  172,  172,  310,  314,  311,  192,  312,
      315,  319,  320,  323,  193,  321,  939,  194,  324,  325,
      195,  939,  326,  322,  172,  939,  939,  327,  328,  313,
      316,  172,  331,  314,  939,  192,  332,  315,  319,  320,
      323,  193,  321,  317,  194,  324,  325,  195,  318,  326,
      322,  172,  172,  200,  327,  328,  329,  316,  333,  331,
      201,  202,  334,  332,  336,  335,  203,  330,  341,  343,
      317,  344,  172,  939,  337,  318,  339,  939,  338,  172,
      200,  342,  340,  329,  939,  333,  172,  201,  202,  334,
      939,  336,  335,  203,  330,  341,  343,  939,  344,  172,

      212,  337,  172,  339,  172,  338,  172,  445,  342,  340,
      446,  347,  172,  172,  213,  939,  172,  348,  354,  447,
      214,  215,  172,  939,  172,  939,  939,  212,  939,  172,
      939,  172,  172,  172,  445,  172,  172,  446,  347,  172,
      172,  213,  349,  172,  348,  354,  447,  214,  215,  172,
      350,  172,  172,  216,  351,  172,  448,  352,  172,  172,
      172,  217,  172,  172,  353,  218,  172,  172,  219,  349,
      449,  450,  172,  939,  172,  355,  939,  350,  172,  172,
      216,  351,  172,  448,  352,  172,  172,  172,  217,  356,
      939,  353,  218,  172,  172,  219,  939,  449,  450,  172,

      220,  172,  355,  172,  172,  172,  939,  451,  172,  361,
      359,  221,  360,  172,  939,  357,  356,  222,  373,  362,
      172,  172,  358,  172,  172,  939,  939,  220,  172,  172,
      172,  172,  452,  172,  451,  172,  361,  359,  221,  360,
      172,  172,  357,  939,  222,  373,  362,  172,  364,  358,
      172,  172,  226,  172,  227,  172,  172,  228,  363,  452,
      172,  172,  172,  453,  229,  230,  939,  172,  172,  454,
      231,  939,  455,  172,  172,  364,  939,  939,  371,  226,
      172,  227,  172,  939,  228,  363,  369,  370,  172,  172,
      453,  229,  230,  172,  458,  459,  454,  231,  172,  455,

      172,  172,  232,  233,  172,  371,  234,  462,  372,  172,
      235,  378,  939,  369,  370,  939,  236,  939,  172,  237,
      172,  458,  459,  939,  172,  172,  172,  939,  172,  232,
      233,  172,  939,  234,  462,  372,  939,  235,  378,  172,
      172,  939,  172,  236,  172,  172,  237,  939,  172,  381,
      380,  172,  379,  172,  172,  172,  939,  939,  463,  172,
      172,  939,  172,  238,  395,  239,  172,  172,  240,  172,
      939,  172,  464,  939,  172,  172,  381,  380,  172,  379,
      939,  172,  465,  172,  172,  463,  172,  172,  382,  172,
      238,  395,  239,  939,  383,  240,  939,  384,  172,  464,

      385,  172,  365,  172,  172,  172,  172,  366,  172,  465,
      172,  172,  172,  367,  456,  382,  172,  386,  457,  939,
      368,  383,  387,  388,  384,  172,  172,  385,  172,  365,
      172,  172,  172,  172,  366,  172,  172,  172,  172,  172,
      367,  456,  394,  172,  386,  457,  393,  368,  466,  387,
      388,  172,  396,  172,  374,  172,  375,  172,  172,  172,
      376,  939,  172,  172,  172,  172,  467,  377,  397,  394,
      398,  172,  939,  393,  468,  466,  172,  939,  172,  396,
      172,  374,  172,  375,  172,  172,  399,  376,  400,  172,
      172,  469,  939,  467,  377,  397,  470,  398,  172,  401,

      172,  468,  172,  172,  389,  172,  939,  172,  172,  172,
      172,  403,  939,  399,  390,  400,  939,  172,  469,  391,
      392,  402,  172,  470,  172,  172,  401,  172,  172,  172,
      172,  389,  172,  172,  471,  172,  939,  172,  403,  404,
      406,  390,  172,  408,  172,  405,  391,  392,  402,  172,
      172,  172,  172,  172,  407,  172,  939,  172,  172,  172,
      172,  471,  172,  409,  172,  939,  404,  406,  939,  172,
      408,  172,  405,  472,  410,  172,  473,  172,  172,  172,
      172,  407,  474,  412,  172,  172,  172,  172,  411,  172,
      409,  172,  413,  172,  475,  172,  414,  415,  476,  939,

      472,  410,  172,  473,  939,  172,  172,  172,  477,  474,
      412,  172,  172,  172,  172,  411,  460,  939,  939,  413,
      172,  475,  172,  414,  415,  476,  172,  939,  419,  172,
      172,  461,  939,  420,  172,  477,  421,  939,  939,  172,
      172,  416,  172,  460,  422,  172,  172,  478,  939,  172,
      172,  939,  423,  172,  417,  419,  172,  172,  461,  418,
      420,  427,  172,  421,  172,  172,  425,  172,  416,  172,
      172,  422,  172,  172,  478,  172,  172,  172,  172,  423,
      424,  417,  479,  426,  172,  428,  418,  172,  427,  172,
      172,  172,  172,  425,  172,  172,  172,  172,  172,  437,

      172,  939,  172,  438,  429,  172,  939,  424,  431,  479,
      426,  172,  428,  172,  172,  430,  172,  172,  172,  172,
      172,  443,  172,  172,  432,  172,  437,  172,  436,  172,
      438,  429,  172,  172,  433,  431,  434,  172,  172,  435,
      172,  172,  430,  172,  439,  172,  172,  172,  443,  172,
      440,  432,  172,  480,  441,  436,  172,  172,  172,  172,
      172,  433,  481,  434,  172,  172,  435,  442,  172,  482,
      483,  439,  484,  444,  172,  487,  172,  440,  172,  172,
      480,  441,  485,  488,  172,  172,  489,  490,  491,  481,
      492,  493,  486,  494,  442,  495,  482,  483,  496,  484,

      444,  172,  487,  497,  498,  172,  499,  500,  501,  485,
      488,  504,  505,  489,  490,  491,  506,  492,  493,  486,
      494,  502,  495,  507,  508,  496,  509,  510,  511,  512,
      497,  498,  513,  499,  500,  501,  514,  515,  504,  505,
      503,  516,  517,  506,  518,  519,  520,  521,  502,  524,
      507,  508,  525,  509,  510,  511,  512,  526,  522,  513,
      523,  527,  528,  514,  515,  529,  530,  503,  516,  517,
      531,  518,  519,  520,  521,  532,  524,  621,  172,  525,
      533,  172,  622,  534,  526,  522,  623,  523,  527,  528,
      624,  172,  529,  530,  172,  172,  939,  531,  172,  172,

      172,  172,  532,  172,  621,  172,  535,  533,  172,  622,
      534,  172,  625,  623,  172,  172,  172,  624,  172,  172,
      939,  172,  172,  538,  172,  172,  172,  172,  172,  172,
      172,  939,  172,  535,  536,  539,  172,  172,  172,  625,
      172,  172,  172,  172,  172,  172,  172,  537,  540,  172,
      538,  172,  172,  939,  542,  541,  172,  172,  172,  172,
      172,  536,  539,  172,  172,  172,  172,  172,  939,  551,
      939,  172,  172,  544,  537,  540,  172,  545,  172,  172,
      543,  542,  541,  172,  172,  172,  172,  172,  939,  172,
      546,  547,  172,  172,  548,  172,  551,  172,  626,  939,

      544,  939,  939,  172,  545,  172,  550,  543,  172,  549,
      172,  172,  556,  172,  172,  172,  172,  546,  547,  939,
      553,  548,  172,  172,  172,  626,  552,  939,  172,  172,
      172,  172,  172,  550,  627,  172,  549,  172,  172,  556,
      554,  172,  172,  172,  555,  560,  172,  553,  172,  172,
      172,  558,  557,  552,  172,  172,  172,  172,  172,  172,
      939,  627,  172,  628,  172,  172,  172,  554,  172,  559,
      172,  555,  560,  172,  172,  172,  172,  172,  558,  557,
      172,  172,  172,  563,  172,  561,  172,  562,  939,  172,
      628,  172,  172,  172,  565,  172,  559,  172,  939,  172,

      172,  172,  172,  629,  172,  570,  172,  172,  172,  172,
      563,  172,  561,  172,  562,  564,  172,  567,  172,  172,
      566,  565,  172,  568,  172,  172,  172,  172,  172,  172,
      629,  172,  570,  172,  571,  172,  172,  572,  172,  939,
      172,  569,  564,  172,  567,  578,  172,  566,  630,  172,
      568,  172,  172,  172,  172,  172,  573,  172,  172,  172,
      172,  571,  172,  172,  572,  172,  574,  172,  569,  575,
      631,  576,  578,  172,  577,  630,  172,  939,  172,  172,
      172,  172,  172,  573,  172,  632,  172,  172,  939,  172,
      172,  581,  172,  574,  579,  172,  575,  631,  576,  172,

      172,  577,  939,  172,  580,  172,  172,  939,  172,  172,
      172,  939,  632,  172,  172,  172,  582,  172,  581,  172,
      939,  579,  172,  633,  583,  172,  172,  172,  172,  584,
      939,  580,  172,  172,  172,  172,  939,  172,  172,  172,
      172,  172,  172,  582,  172,  585,  172,  172,  588,  589,
      633,  583,  172,  587,  172,  172,  584,  586,  172,  172,
      172,  172,  939,  590,  172,  172,  172,  172,  172,  172,
      939,  172,  585,  172,  172,  588,  589,  172,  172,  172,
      587,  594,  591,  634,  586,  172,  172,  172,  592,  593,
      590,  172,  595,  172,  172,  172,  172,  172,  172,  172,

      172,  596,  172,  597,  172,  172,  172,  172,  594,  591,
      634,  939,  635,  600,  172,  592,  593,  172,  172,  595,
      172,  599,  172,  601,  172,  172,  172,  172,  596,  172,
      597,  172,  598,  172,  172,  172,  636,  172,  172,  635,
      600,  172,  939,  172,  172,  172,  172,  637,  599,  172,
      601,  172,  172,  602,  172,  172,  603,  172,  172,  598,
      172,  172,  172,  636,  172,  172,  172,  604,  172,  172,
      172,  608,  172,  172,  637,  172,  605,  172,  172,  172,
      602,  172,  172,  603,  172,  172,  606,  638,  172,  172,
      939,  172,  939,  172,  604,  172,  172,  172,  608,  172,

      607,  172,  172,  605,  172,  172,  609,  613,  172,  172,
      172,  172,  172,  606,  638,  172,  172,  172,  172,  610,
      612,  611,  172,  172,  172,  939,  939,  607,  172,  172,
      172,  172,  172,  609,  613,  172,  172,  172,  172,  615,
      172,  172,  172,  172,  172,  939,  610,  612,  611,  614,
      172,  616,  172,  172,  172,  939,  172,  172,  172,  617,
      172,  172,  172,  639,  640,  619,  615,  172,  172,  618,
      172,  641,  172,  172,  172,  939,  614,  642,  616,  172,
      172,  172,  172,  643,  644,  620,  617,  172,  172,  645,
      639,  640,  619,  646,  647,  648,  618,  649,  641,  172,

      172,  172,  172,  650,  642,  651,  652,  654,  655,  172,
      643,  644,  620,  656,  657,  658,  645,  653,  659,  660,
      646,  647,  648,  661,  649,  662,  663,  664,  665,  172,
      650,  666,  651,  652,  654,  655,  667,  668,  669,  670,
      656,  657,  658,  671,  653,  659,  660,  672,  673,  674,
      661,  675,  662,  663,  664,  665,  676,  677,  666,  678,
      679,  680,  681,  667,  668,  669,  670,  682,  683,  684,
      671,  685,  686,  939,  672,  673,  674,  172,  675,  939,
      172,  172,  691,  676,  677,  939,  678,  679,  680,  681,
      687,  172,  172,  688,  682,  683,  684,  172,  685,  686,

      172,  689,  172,  939,  172,  690,  692,  172,  172,  691,
      172,  172,  172,  939,  172,  939,  939,  687,  172,  172,
      688,  939,  693,  172,  172,  172,  172,  172,  689,  172,
      172,  753,  690,  692,  172,  939,  694,  172,  172,  172,
      695,  172,  172,  172,  939,  172,  172,  939,  697,  693,
      172,  172,  172,  172,  172,  754,  696,  172,  753,  172,
      172,  172,  172,  694,  701,  939,  698,  695,  172,  172,
      172,  172,  172,  172,  172,  697,  699,  172,  172,  172,
      172,  172,  754,  696,  755,  756,  172,  172,  172,  172,
      939,  701,  700,  698,  702,  172,  172,  172,  172,  939,

      172,  172,  172,  699,  172,  172,  172,  172,  757,  703,
      172,  755,  756,  705,  939,  172,  172,  704,  172,  700,
      172,  702,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  939,  707,  757,  703,  172,  172,  706,
      705,  708,  172,  172,  704,  172,  172,  172,  172,  172,
      709,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      710,  707,  172,  758,  172,  172,  706,  939,  708,  172,
      711,  939,  172,  172,  172,  172,  172,  709,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  710,  172,  172,
      758,  172,  172,  759,  712,  714,  939,  711,  713,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      939,  172,  172,  172,  760,  172,  761,  172,  172,  172,
      759,  712,  714,  715,  172,  713,  716,  172,  172,  172,
      717,  172,  172,  172,  172,  172,  718,  172,  172,  172,
      172,  760,  172,  761,  172,  172,  720,  719,  172,  939,
      715,  172,  172,  716,  172,  172,  172,  717,  172,  172,
      172,  172,  172,  718,  172,  172,  172,  723,  172,  172,
      172,  721,  172,  720,  719,  172,  172,  722,  172,  172,
      172,  172,  724,  172,  939,  172,  172,  172,  172,  172,
      172,  172,  727,  725,  723,  172,  939,  172,  721,  172,

      172,  939,  939,  172,  722,  172,  726,  172,  172,  724,
      172,  172,  172,  762,  172,  172,  172,  172,  172,  727,
      725,  172,  172,  728,  172,  172,  172,  172,  172,  729,
      172,  939,  730,  726,  763,  172,  172,  172,  172,  172,
      762,  172,  172,  172,  172,  172,  172,  939,  172,  172,
      728,  172,  172,  172,  731,  172,  729,  172,  172,  730,
      732,  763,  172,  172,  172,  939,  172,  939,  172,  172,
      733,  172,  172,  172,  737,  172,  172,  939,  172,  734,
      172,  731,  172,  939,  172,  172,  172,  732,  736,  172,
      735,  172,  172,  172,  738,  172,  172,  733,  740,  939,

      172,  737,  172,  172,  172,  172,  734,  172,  739,  172,
      172,  172,  172,  172,  172,  736,  172,  735,  172,  172,
      741,  738,  172,  172,  172,  740,  172,  172,  172,  172,
      172,  172,  743,  764,  172,  739,  172,  172,  744,  172,
      742,  172,  765,  172,  745,  172,  172,  741,  172,  172,
      749,  172,  939,  172,  172,  172,  172,  172,  746,  743,
      764,  172,  172,  172,  172,  744,  172,  742,  748,  765,
      172,  745,  172,  172,  172,  172,  172,  749,  752,  747,
      172,  172,  172,  750,  172,  746,  172,  766,  172,  172,
      751,  172,  172,  172,  172,  748,  767,  172,  172,  172,

      172,  172,  768,  769,  770,  752,  747,  172,  172,  172,
      750,  172,  771,  172,  766,  172,  772,  751,  773,  172,
      774,  172,  775,  767,  776,  172,  777,  172,  778,  768,
      769,  770,  779,  780,  781,  172,  782,  783,  784,  771,
      785,  786,  787,  772,  788,  773,  789,  774,  790,  775,
      791,  776,  792,  777,  793,  778,  794,  795,  796,  779,
      780,  781,  797,  782,  783,  784,  798,  785,  786,  787,
      799,  788,  800,  789,  801,  790,  172,  791,  172,  792,
      939,  793,  803,  794,  795,  796,  172,  939,  804,  797,
      805,  172,  939,  798,  172,  851,  172,  799,  172,  800,

      808,  801,  172,  172,  807,  172,  172,  802,  172,  803,
      172,  172,  172,  172,  172,  804,  172,  805,  172,  806,
      172,  172,  851,  172,  809,  172,  810,  808,  172,  172,
      172,  807,  172,  172,  802,  172,  172,  172,  172,  172,
      812,  172,  172,  172,  172,  939,  806,  172,  172,  811,
      172,  809,  172,  810,  815,  172,  939,  172,  816,  172,
      172,  814,  172,  172,  172,  813,  852,  812,  939,  172,
      172,  172,  172,  939,  172,  172,  811,  172,  172,  172,
      172,  815,  172,  172,  939,  816,  172,  172,  814,  172,
      820,  172,  813,  852,  172,  817,  819,  172,  818,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  939,  172,
      172,  821,  939,  172,  172,  172,  172,  820,  822,  172,
      172,  172,  817,  819,  172,  818,  939,  172,  823,  172,
      172,  172,  172,  172,  824,  172,  172,  939,  821,  172,
      172,  172,  172,  172,  939,  822,  172,  172,  826,  172,
      939,  172,  172,  172,  172,  823,  853,  172,  172,  172,
      828,  824,  172,  172,  825,  939,  172,  172,  172,  172,
      172,  827,  172,  172,  172,  826,  172,  172,  172,  172,
      172,  172,  829,  853,  172,  172,  172,  828,  172,  854,
      172,  825,  172,  939,  172,  172,  172,  172,  827,  172,

      172,  172,  172,  831,  172,  172,  172,  172,  172,  829,
      830,  832,  172,  172,  172,  172,  854,  172,  855,  172,
      835,  172,  172,  172,  172,  833,  172,  172,  836,  172,
      831,  172,  172,  172,  172,  172,  834,  830,  832,  172,
      172,  172,  172,  172,  172,  855,  172,  835,  939,  172,
      172,  172,  833,  172,  172,  836,  837,  838,  172,  172,
      172,  172,  172,  834,  839,  172,  172,  172,  939,  172,
      172,  172,  840,  172,  856,  841,  172,  172,  939,  842,
      172,  172,  939,  837,  838,  172,  172,  172,  172,  172,
      172,  839,  172,  172,  844,  845,  172,  172,  172,  840,

      857,  856,  841,  172,  172,  843,  842,  172,  172,  847,
      172,  172,  172,  172,  172,  172,  939,  172,  172,  846,
      172,  844,  845,  172,  172,  172,  849,  857,  848,  172,
      172,  172,  843,  858,  172,  850,  847,  172,  172,  172,
      172,  172,  172,  172,  859,  172,  846,  172,  860,  861,
      172,  862,  863,  849,  864,  848,  172,  172,  172,  172,
      858,  172,  850,  172,  865,  866,  172,  172,  867,  868,
      172,  859,  869,  870,  871,  860,  861,  172,  862,  863,
      872,  864,  873,  874,  875,  876,  172,  877,  878,  939,
      172,  865,  866,  172,  905,  867,  868,  172,  880,  869,

      870,  871,  172,  172,  939,  906,  879,  872,  172,  873,
      874,  875,  876,  172,  877,  878,  881,  172,  172,  172,
      172,  905,  172,  172,  172,  880,  882,  172,  172,  172,
      172,  172,  906,  879,  884,  172,  172,  172,  939,  172,
      172,  883,  907,  881,  172,  172,  172,  172,  172,  172,
      172,  172,  885,  882,  172,  172,  172,  172,  172,  939,
      886,  884,  172,  172,  172,  172,  172,  939,  883,  907,
      172,  172,  939,  887,  172,  172,  172,  939,  172,  885,
      939,  172,  172,  172,  172,  172,  172,  886,  908,  172,
      172,  172,  172,  172,  172,  888,  172,  172,  172,  172,

      887,  172,  939,  172,  172,  172,  172,  891,  172,  172,
      172,  939,  172,  172,  172,  908,  172,  172,  172,  889,
      172,  172,  888,  172,  172,  172,  172,  172,  172,  890,
      172,  172,  172,  172,  891,  172,  172,  172,  172,  895,
      893,  172,  892,  172,  172,  939,  889,  939,  909,  939,
      172,  172,  172,  172,  172,  172,  890,  172,  172,  172,
      939,  172,  172,  172,  172,  172,  895,  893,  894,  892,
      896,  172,  897,  172,  172,  909,  172,  172,  172,  939,
      172,  172,  172,  939,  172,  172,  172,  172,  172,  900,
      898,  172,  910,  172,  172,  894,  172,  896,  172,  897,

      172,  172,  172,  172,  172,  172,  901,  172,  172,  899,
      172,  172,  172,  172,  172,  172,  900,  898,  172,  910,
      172,  172,  172,  172,  172,  172,  172,  902,  172,  172,
      172,  172,  172,  901,  172,  172,  899,  172,  172,  172,
      172,  903,  172,  172,  172,  172,  172,  911,  172,  172,
      904,  172,  912,  172,  902,  172,  913,  172,  914,  172,
      172,  172,  172,  172,  172,  172,  172,  939,  903,  172,
      172,  172,  915,  172,  911,  172,  939,  904,  916,  912,
      172,  172,  172,  913,  172,  914,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  915,

      172,  925,  172,  172,  918,  916,  172,  172,  172,  172,
      917,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  925,  172,
      172,  918,  172,  172,  920,  172,  172,  917,  172,  172,
      172,  172,  172,  939,  172,  172,  172,  172,  919,  172,
      172,  924,  926,  172,  172,  172,  172,  172,  172,  172,
      172,  920,  172,  172,  921,  172,  172,  172,  172,  172,
      922,  172,  172,  172,  172,  919,  172,  172,  924,  926,
      923,  172,  172,  172,  172,  172,  927,  172,  172,  928,
      929,  921,  172,  172,  172,  172,  172,  922,  172,  172,

      172,  172,  172,  172,  172,  172,  935,  923,  172,  936,
      939,  172,  939,  927,  172,  172,  928,  929,  930,  172,
      172,  172,  172,  172,  172,  172,  931,  172,  172,  172,
      172,  172,  172,  935,  933,  172,  936,  932,  172,  172,
      937,  172,  172,  172,  172,  930,  939,  172,  172,  172,
      172,  172,  172,  931,  934,  172,  172,  172,  172,  172,
      172,  933,  172,  172,  932,  172,  172,  937,  172,  172,
      172,  172,  939,  172,  939,  172,  172,  172,  939,  938,
      939,  934,  939,  172,  172,  172,  172,  172,  939,  172,
      172,  939,  172,  172,  939,  172,  939,  939,  939,  939,

      172,  939,  939,  172,  172,  939,  938,  939,  939,  939,
      939,  939,  172,  939,  939,  939,  939,  939,  939,  939,
      172,   77,  939,  939,   77,   78,  939,   78,   78,  160,
      939,  160,  160,  162,  939,  162,  162,  163,  939,  163,
      163,  172,  939,  172,  172,    5,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,

      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939
    } ;

static yyconst flex_int16_t yy_chk[3812] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   24,   21,   19,   23,   26,   17,   21,   17,   24,
       23,   27,   33,   17,   28,   88,   17,   19,   28,   18,
       19,   19,   42,   42,   28,   17,   18,   17,   24,   21,
       19,   23,   26,   17,   21,   17,   24,   23,   27,   33,
       17,   28,   88,   17,   19,   28,   18,   19,   19,   20,
       22,   28,  942,   20,   43,   43,   22,   20,   30,   22,

       25,   29,   22,   20,   32,   29,   20,   25,   25,   29,
       39,   39,   30,   25,  346,   32,   20,   22,   30,   30,
       20,   32,  246,   22,   20,   30,   22,   25,   29,   22,
       20,   32,   29,   20,   25,   25,   29,   39,   39,   30,
       25,   31,   32,   34,  167,   30,   30,   34,   32,   31,
       37,   89,   37,   31,  166,   37,   31,  163,   38,   49,
       49,   50,   50,   59,   76,   76,   38,   59,   31,  162,
       34,   59,   83,   83,   34,   82,   31,   37,   89,   37,
       31,   56,   37,   31,   35,   38,   35,   59,   81,   35,
       59,   78,   58,   38,   59,   56,   35,   35,   59,   58,

       56,   56,   35,  161,  161,   58,   92,   77,   56,   51,
       90,   35,   58,   35,   59,   61,   35,   48,   90,   58,
       47,   62,   56,   35,   35,   61,   58,   56,   56,   35,
       36,   36,   58,   92,   36,   61,   63,   90,   36,   58,
       63,   62,   61,   46,   36,   90,   63,   36,   62,   44,
       68,   16,   61,  168,  168,   13,   63,   36,   36,   12,
       11,   36,   61,   63,    5,   36,   68,   63,   62,   75,
       68,   36,    0,   63,   36,   52,   52,   68,   52,   52,
       52,   52,   52,   63,   52,   52,   52,   64,   93,   75,
       52,   64,   52,   68,   96,   64,   75,   68,   52,   91,

       52,   96,   91,   69,   97,   52,   97,   69,   52,    0,
        0,   64,    0,    0,   64,   93,   75,   52,   64,   52,
        0,   96,   64,   69,    0,   52,   91,   52,   96,   91,
       69,   97,   52,   97,   69,   52,   53,   53,   64,   53,
       53,   53,   53,   53,   99,   53,   53,   53,    0,   94,
       69,   73,   53,  100,   74,   73,   98,   74,   74,   73,
      102,  102,  103,   94,  104,  105,   98,  107,  108,  109,
      110,   99,   53,    0,   74,   73,   94,    0,   73,   53,
      100,   74,   73,   98,   74,   74,   73,  102,  102,  103,
       94,  104,  105,   98,  107,  108,  109,  110,  101,   53,

       54,   74,   73,  101,   54,  111,  106,  112,  106,  101,
      113,  116,  106,  113,   54,  114,  101,   54,   54,  106,
      114,    0,  118,  119,   54,  101,  120,   54,  121,    0,
      101,   54,  111,  106,  112,  106,  101,  113,  116,  106,
      113,   54,  114,  101,   54,   54,  106,  114,  117,  118,
      119,   54,   55,  120,  124,  121,   55,  122,  117,  122,
       55,  125,  126,  117,  117,  123,   55,  123,  127,   55,
      128,  129,  130,  131,  133,  117,   55,    0,  134,   55,
      135,  124,  136,   55,  122,  117,  122,   55,  125,  126,
      117,  117,  123,   55,  123,  127,   55,  128,  129,  130,

      131,  133,  137,   55,   57,  134,  137,  135,   57,  136,
      138,  140,  141,  143,   57,  142,    0,   57,  144,  145,
       57,    0,  146,  142,   57,    0,    0,  147,  148,  137,
      139,   57,  150,  137,    0,   57,  151,  138,  140,  141,
      143,   57,  142,  139,   57,  144,  145,   57,  139,  146,
      142,   57,   60,   60,  147,  148,  149,  139,  152,  150,
       60,   60,  153,  151,  154,  153,   60,  149,  157,  158,
      139,  159,   60,    0,  155,  139,  156,    0,  155,   60,
       60,  157,  156,  149,    0,  152,  172,   60,   60,  153,
        0,  154,  153,   60,  149,  157,  158,    0,  159,   60,

       65,  155,  174,  156,   65,  155,  172,  248,  157,  156,
      250,  173,  173,  172,   65,    0,  178,  174,  178,  251,
       65,   65,  174,    0,   65,    0,    0,   65,    0,  174,
        0,   65,  173,  172,  248,  175,  178,  250,  173,  173,
      180,   65,  175,  178,  174,  178,  251,   65,   65,  174,
      175,   65,   66,   66,  176,  175,  255,  176,  176,  173,
      180,   66,  175,  178,  177,   66,  177,  180,   66,  175,
      256,  257,   66,    0,  179,  179,    0,  175,  176,   66,
       66,  176,  175,  255,  176,  176,  177,  180,   66,  179,
        0,  177,   66,  177,  179,   66,    0,  256,  257,   66,

       67,  179,  179,  182,   67,  176,    0,  258,  181,  183,
      182,   67,  182,  177,    0,  181,  179,   67,  190,  183,
      190,  179,  181,  182,   67,    0,    0,   67,  181,  183,
      182,   67,  259,  185,  258,  181,  183,  182,   67,  182,
      190,  184,  181,    0,   67,  190,  183,  190,  185,  181,
      182,   67,   70,  185,   70,  181,  183,   70,  184,  259,
      185,  184,  188,  260,   70,   70,    0,  190,  184,  261,
       70,    0,  262,  187,   70,  185,    0,    0,  188,   70,
      185,   70,  188,    0,   70,  184,  187,  187,  184,  188,
      260,   70,   70,  187,  265,  266,  261,   70,  189,  262,

      187,   70,   71,   71,  192,  188,   71,  268,  189,  188,
       71,  192,    0,  187,  187,    0,   71,    0,  189,   71,
      187,  265,  266,    0,  192,  189,   71,    0,  200,   71,
       71,  192,    0,   71,  268,  189,    0,   71,  192,  193,
      194,    0,  195,   71,  205,  189,   71,    0,  200,  195,
      194,  192,  193,   71,   72,  200,    0,    0,  269,  193,
      194,    0,  195,   72,  205,   72,  193,  194,   72,  195,
        0,  205,  270,    0,   72,  200,  195,  194,  196,  193,
        0,   72,  271,  198,  197,  269,  193,  194,  196,  195,
       72,  205,   72,    0,  197,   72,    0,  198,  196,  270,

      198,   72,  186,  198,  197,  196,  186,  186,  199,  271,
      198,  197,  201,  186,  264,  196,  217,  199,  264,    0,
      186,  197,  199,  201,  198,  196,  186,  198,  199,  186,
      198,  197,  201,  186,  186,  199,  217,  203,  204,  201,
      186,  264,  204,  217,  199,  264,  203,  186,  272,  199,
      201,  206,  206,  186,  191,  199,  191,  203,  204,  201,
      191,    0,  207,  217,  203,  204,  273,  191,  207,  204,
      207,  206,    0,  203,  274,  272,  191,    0,  206,  206,
      209,  191,  207,  191,  203,  204,  208,  191,  208,  207,
      208,  275,    0,  273,  191,  207,  276,  207,  206,  209,

      209,  274,  211,  191,  202,  202,    0,  209,  210,  207,
      208,  211,    0,  208,  202,  208,    0,  208,  275,  202,
      202,  210,  211,  276,  212,  202,  209,  209,  210,  211,
      213,  202,  202,  214,  277,  210,    0,  208,  211,  212,
      214,  202,  216,  216,  212,  213,  202,  202,  210,  211,
      213,  212,  202,  214,  215,  210,    0,  213,  215,  219,
      214,  277,  216,  218,  218,    0,  212,  214,    0,  216,
      216,  212,  213,  278,  219,  220,  280,  213,  215,  219,
      214,  215,  281,  221,  218,  215,  219,  221,  220,  216,
      218,  218,  222,  223,  282,  220,  222,  223,  283,    0,

      278,  219,  220,  280,    0,  215,  219,  221,  284,  281,
      221,  218,  222,  223,  221,  220,  267,    0,    0,  222,
      223,  282,  220,  222,  223,  283,  225,    0,  225,  227,
      226,  267,    0,  226,  221,  284,  227,    0,    0,  222,
      223,  224,  228,  267,  227,  224,  225,  285,    0,  227,
      226,    0,  228,  225,  224,  225,  227,  226,  267,  224,
      226,  232,  228,  227,  232,  224,  230,  229,  224,  228,
      230,  227,  224,  225,  285,  231,  227,  226,  233,  228,
      229,  224,  286,  231,  232,  233,  224,  229,  232,  228,
      230,  232,  224,  230,  229,  231,  234,  230,  233,  240,

      235,    0,  231,  240,  234,  233,    0,  229,  235,  286,
      231,  232,  233,  236,  229,  234,  234,  230,  237,  240,
      235,  243,  231,  234,  236,  233,  240,  235,  239,  239,
      240,  234,  238,  236,  237,  235,  238,  241,  237,  238,
      236,  243,  234,  234,  241,  237,  240,  235,  243,  239,
      241,  236,  238,  287,  242,  239,  239,  241,  244,  238,
      236,  237,  288,  238,  241,  237,  238,  242,  243,  289,
      290,  241,  291,  244,  242,  293,  239,  241,  244,  238,
      287,  242,  292,  294,  241,  244,  296,  297,  298,  288,
      299,  300,  292,  302,  242,  303,  289,  290,  304,  291,

      244,  242,  293,  306,  307,  244,  308,  309,  310,  292,
      294,  312,  313,  296,  297,  298,  314,  299,  300,  292,
      302,  311,  303,  315,  316,  304,  317,  318,  319,  320,
      306,  307,  321,  308,  309,  310,  323,  324,  312,  313,
      311,  325,  327,  314,  329,  330,  331,  333,  311,  335,
      315,  316,  336,  317,  318,  319,  320,  338,  334,  321,
      334,  339,  340,  323,  324,  341,  342,  311,  325,  327,
      343,  329,  330,  331,  333,  344,  335,  445,  347,  336,
      348,  349,  446,  350,  338,  334,  447,  334,  339,  340,
      448,  352,  341,  342,  353,  354,    0,  343,  347,  351,

      348,  349,  344,  350,  445,  347,  351,  348,  349,  446,
      350,  352,  449,  447,  353,  354,  357,  448,  352,  351,
        0,  353,  354,  357,  355,  347,  351,  348,  349,  356,
      350,    0,  359,  351,  355,  358,  357,  358,  352,  449,
      360,  353,  354,  357,  355,  363,  351,  356,  359,  356,
      357,  355,  359,    0,  361,  360,  356,  358,  361,  359,
      360,  355,  358,  357,  358,  363,  362,  360,    0,  369,
        0,  355,  363,  364,  356,  359,  356,  364,  361,  359,
      362,  361,  360,  365,  358,  361,  362,  360,    0,  369,
      365,  366,  363,  362,  367,  366,  369,  364,  451,    0,

      364,    0,    0,  365,  364,  361,  368,  362,  368,  367,
      365,  370,  374,  362,  367,  366,  369,  365,  366,    0,
      371,  367,  366,  371,  364,  451,  370,    0,  368,  372,
      365,  370,  374,  368,  452,  368,  367,  376,  370,  374,
      372,  367,  366,  371,  373,  378,  379,  371,  373,  372,
      371,  376,  375,  370,  375,  368,  372,  376,  370,  374,
        0,  452,  377,  453,  376,  378,  379,  372,  373,  377,
      371,  373,  378,  379,  375,  373,  372,  380,  376,  375,
      381,  375,  377,  382,  376,  380,  382,  381,    0,  377,
      453,  384,  378,  379,  384,  373,  377,  380,    0,  383,

      381,  375,  386,  454,  380,  389,  382,  381,  387,  377,
      382,  384,  380,  382,  381,  383,  385,  386,  384,  383,
      385,  384,  386,  387,  380,  389,  383,  381,  387,  386,
      454,  388,  389,  382,  390,  387,  385,  391,  384,    0,
      395,  388,  383,  385,  386,  397,  383,  385,  455,  386,
      387,  388,  389,  393,  390,  387,  392,  391,  388,  396,
      395,  390,  394,  385,  391,  397,  392,  395,  388,  393,
      456,  394,  397,  393,  396,  455,  392,    0,  388,  396,
      393,  390,  394,  392,  391,  458,  396,  395,    0,  394,
      398,  400,  397,  392,  398,  400,  393,  456,  394,  401,

      393,  396,    0,  392,  399,  399,  396,    0,  403,  394,
      398,    0,  458,  404,  402,  400,  402,  398,  400,  401,
        0,  398,  400,  459,  403,  399,  401,  405,  403,  404,
        0,  399,  399,  404,  402,  403,    0,  398,  406,  408,
      404,  402,  400,  402,  407,  406,  401,  405,  409,  410,
      459,  403,  399,  408,  405,  403,  404,  407,  406,  408,
      404,  402,    0,  411,  407,  406,  408,  411,  409,  410,
        0,  407,  406,  414,  405,  409,  410,  415,  413,  412,
      408,  414,  411,  460,  407,  406,  408,  411,  412,  413,
      411,  407,  415,  414,  411,  409,  410,  415,  413,  412,

      414,  416,  416,  417,  415,  413,  412,  417,  414,  411,
      460,    0,  461,  420,  411,  412,  413,  418,  419,  415,
      414,  419,  416,  421,  415,  413,  412,  417,  416,  416,
      417,  422,  418,  420,  417,  423,  463,  418,  419,  461,
      420,  424,    0,  421,  418,  419,  426,  464,  419,  416,
      421,  422,  425,  423,  417,  423,  424,  428,  422,  418,
      420,  424,  423,  463,  418,  419,  426,  425,  424,  427,
      421,  431,  425,  426,  464,  429,  427,  428,  422,  425,
      423,  432,  423,  424,  428,  430,  429,  465,  424,  427,
        0,  431,    0,  426,  425,  429,  427,  433,  431,  425,

      430,  432,  429,  427,  428,  430,  433,  436,  432,  434,
      435,  436,  430,  429,  465,  437,  427,  433,  431,  434,
      435,  434,  429,  439,  433,    0,    0,  430,  432,  434,
      435,  436,  430,  433,  436,  437,  434,  435,  436,  439,
      438,  441,  437,  439,  433,    0,  434,  435,  434,  438,
      439,  440,  443,  440,  442,    0,  434,  435,  436,  441,
      438,  441,  437,  467,  468,  443,  439,  438,  441,  442,
      439,  469,  443,  440,  442,    0,  438,  470,  440,  443,
      440,  442,  444,  471,  475,  444,  441,  438,  441,  476,
      467,  468,  443,  478,  480,  481,  442,  482,  469,  443,

      440,  442,  444,  483,  470,  484,  485,  487,  491,  444,
      471,  475,  444,  493,  494,  495,  476,  485,  496,  498,
      478,  480,  481,  499,  482,  500,  501,  502,  505,  444,
      483,  506,  484,  485,  487,  491,  509,  510,  511,  512,
      493,  494,  495,  513,  485,  496,  498,  515,  516,  517,
      499,  518,  500,  501,  502,  505,  520,  521,  506,  522,
      523,  524,  525,  509,  510,  511,  512,  526,  527,  528,
      513,  530,  531,    0,  515,  516,  517,  533,  518,    0,
      534,  535,  537,  520,  521,    0,  522,  523,  524,  525,
      533,  538,  536,  534,  526,  527,  528,  533,  530,  531,

      534,  535,  537,    0,  533,  536,  539,  534,  535,  537,
      539,  538,  536,    0,  540,    0,    0,  533,  538,  536,
      534,    0,  540,  541,  533,  542,  545,  534,  535,  537,
      539,  623,  536,  539,  540,    0,  541,  539,  538,  536,
      542,  540,  543,  541,    0,  542,  545,    0,  544,  540,
      541,  544,  542,  545,  550,  624,  543,  539,  623,  546,
      547,  540,  543,  541,  549,    0,  546,  542,  549,  543,
      541,  544,  542,  545,  550,  544,  547,  548,  544,  546,
      547,  550,  624,  543,  625,  626,  546,  547,  549,  543,
        0,  549,  548,  546,  551,  549,  551,  548,  544,    0,

      554,  550,  555,  547,  548,  552,  546,  547,  627,  552,
      553,  625,  626,  555,    0,  549,  551,  553,  557,  548,
      554,  551,  555,  551,  548,  552,  558,  554,  556,  555,
      553,  560,  552,    0,  557,  627,  552,  553,  557,  556,
      555,  558,  561,  551,  553,  557,  558,  554,  556,  555,
      559,  560,  552,  558,  559,  556,  562,  553,  560,  564,
      563,  557,  561,  628,  563,  557,  556,    0,  558,  561,
      564,    0,  565,  558,  559,  556,  562,  559,  560,  564,
      567,  559,  569,  562,  563,  566,  564,  563,  568,  561,
      628,  563,  565,  629,  566,  569,    0,  564,  568,  565,

      567,  559,  569,  562,  570,  566,  564,  567,  568,  569,
        0,  563,  566,  571,  631,  568,  632,  572,  574,  565,
      629,  566,  569,  570,  570,  568,  571,  567,  576,  569,
      572,  570,  566,  571,  573,  568,  573,  572,  574,  575,
      571,  631,  577,  632,  572,  574,  575,  573,  576,    0,
      570,  570,  578,  571,  573,  576,  579,  572,  580,  575,
      571,  573,  577,  573,  572,  574,  575,  582,  583,  577,
      581,  579,  578,  575,  573,  576,  579,  581,  580,  578,
      584,  573,  583,  579,    0,  580,  575,  582,  583,  577,
      581,  585,  587,  584,  582,  583,    0,  581,  579,  578,

      584,    0,    0,  579,  581,  580,  586,  584,  586,  583,
      588,  585,  587,  633,  582,  583,  589,  581,  585,  587,
      584,  591,  592,  588,  590,  595,  596,  584,  586,  589,
      588,    0,  590,  586,  634,  586,  589,  588,  585,  587,
      633,  591,  592,  589,  590,  595,  596,    0,  591,  592,
      588,  590,  595,  596,  593,  586,  589,  588,  593,  590,
      594,  634,  597,  589,  594,    0,  598,    0,  591,  592,
      597,  590,  595,  596,  601,  599,  601,    0,  593,  598,
      600,  593,  597,    0,  594,  593,  598,  594,  600,  597,
      599,  594,  602,  598,  603,  599,  601,  597,  605,    0,

      600,  601,  599,  601,  604,  593,  598,  600,  604,  597,
      606,  594,  602,  598,  603,  600,  607,  599,  605,  602,
      606,  603,  599,  601,  604,  605,  608,  600,  611,  610,
      606,  604,  609,  636,  609,  604,  607,  606,  610,  602,
      608,  603,  637,  607,  611,  605,  608,  606,  611,  610,
      615,  604,    0,  608,  609,  611,  610,  606,  612,  609,
      636,  609,  612,  607,  613,  610,  614,  608,  614,  637,
      615,  611,  617,  608,  618,  611,  610,  615,  619,  613,
      616,  609,  612,  616,  613,  612,  614,  638,  620,  612,
      618,  613,  617,  614,  618,  614,  639,  615,  619,  617,

      616,  618,  640,  641,  642,  619,  613,  616,  620,  612,
      616,  613,  643,  614,  638,  620,  644,  618,  646,  617,
      647,  618,  648,  639,  651,  619,  652,  616,  653,  640,
      641,  642,  654,  659,  660,  620,  661,  664,  665,  643,
      666,  667,  668,  644,  670,  646,  671,  647,  672,  648,
      673,  651,  674,  652,  675,  653,  676,  677,  679,  654,
      659,  660,  680,  661,  664,  665,  681,  666,  667,  668,
      683,  670,  684,  671,  685,  672,  687,  673,  688,  674,
        0,  675,  690,  676,  677,  679,  689,    0,  691,  680,
      692,  692,    0,  681,  694,  753,  687,  683,  688,  684,

      695,  685,  690,  687,  694,  688,  689,  689,  691,  690,
      693,  692,  696,  689,  694,  691,  698,  692,  692,  693,
      695,  694,  753,  687,  697,  688,  698,  695,  697,  690,
      693,  694,  696,  689,  689,  691,  698,  693,  692,  696,
      700,  694,  699,  698,  701,    0,  693,  695,  697,  699,
      702,  697,  703,  698,  704,  697,    0,  693,  705,  696,
      700,  703,  699,  698,  701,  702,  755,  700,    0,  699,
      702,  701,  703,    0,  704,  697,  699,  702,  705,  703,
      706,  704,  708,  707,    0,  705,  709,  700,  703,  699,
      709,  701,  702,  755,  711,  706,  708,  702,  707,  703,

      706,  704,  708,  707,  710,  705,  709,  706,    0,  708,
      707,  710,    0,  709,  711,  713,  712,  709,  712,  714,
      715,  711,  706,  708,  710,  707,    0,  706,  713,  708,
      707,  710,  716,  709,  714,  713,  712,    0,  710,  714,
      715,  711,  713,  712,    0,  712,  714,  715,  718,  717,
        0,  710,  716,  720,  721,  713,  756,  719,  722,  716,
      720,  714,  713,  712,  717,    0,  714,  715,  718,  717,
      723,  719,  724,  720,  721,  718,  717,  719,  722,  716,
      720,  721,  725,  756,  719,  722,  725,  720,  727,  757,
      723,  717,  724,    0,  728,  718,  717,  723,  719,  724,

      720,  721,  729,  727,  719,  722,  725,  726,  727,  725,
      726,  730,  731,  725,  728,  727,  757,  723,  758,  724,
      733,  728,  729,  732,  734,  731,  735,  726,  734,  729,
      727,  730,  731,  725,  726,  727,  732,  726,  730,  731,
      733,  728,  737,  732,  734,  758,  735,  733,    0,  729,
      732,  734,  731,  735,  726,  734,  736,  737,  730,  731,
      736,  740,  737,  732,  738,  738,  741,  733,    0,  737,
      732,  734,  739,  735,  760,  740,  739,  744,    0,  741,
      736,  740,    0,  736,  737,  738,  741,  736,  740,  737,
      742,  738,  738,  741,  743,  745,  739,  744,  743,  739,

      761,  760,  740,  739,  744,  742,  741,  736,  740,  747,
      742,  748,  738,  741,  749,  745,    0,  742,  743,  746,
      746,  743,  745,  739,  744,  743,  750,  761,  749,  747,
      750,  748,  742,  762,  749,  751,  747,  742,  748,  751,
      746,  749,  745,  752,  765,  743,  746,  746,  769,  771,
      750,  774,  777,  750,  778,  749,  747,  750,  748,  751,
      762,  749,  751,  752,  780,  781,  751,  746,  783,  784,
      752,  765,  785,  787,  788,  769,  771,  750,  774,  777,
      791,  778,  793,  794,  795,  800,  751,  801,  802,    0,
      752,  780,  781,  803,  856,  783,  784,  804,  805,  785,

      787,  788,  806,  808,    0,  857,  804,  791,  802,  793,
      794,  795,  800,  803,  801,  802,  806,  804,  805,  807,
      803,  856,  806,  808,  804,  805,  807,  809,  812,  806,
      808,  813,  857,  804,  810,  802,  810,  811,    0,  807,
      803,  809,  859,  806,  804,  805,  807,  809,  812,  806,
      808,  813,  811,  807,  809,  812,  810,  811,  813,    0,
      814,  810,  814,  810,  811,  815,  807,    0,  809,  859,
      816,  817,    0,  818,  809,  812,  819,    0,  813,  811,
        0,  821,  814,  810,  811,  815,  820,  814,  864,  814,
      816,  817,  815,  818,  822,  820,  819,  816,  817,  823,

      818,  821,    0,  819,  824,  825,  820,  827,  821,  814,
      828,    0,  815,  820,  822,  864,  826,  816,  817,  823,
      818,  822,  820,  819,  824,  825,  823,  827,  821,  826,
      828,  824,  825,  820,  827,  829,  826,  828,  831,  833,
      830,  822,  829,  826,  830,    0,  823,    0,  866,    0,
      834,  824,  825,  832,  827,  829,  826,  828,  831,  833,
        0,  835,  829,  826,  830,  831,  833,  830,  832,  829,
      834,  830,  836,  832,  836,  866,  837,  834,  838,    0,
      832,  835,  829,    0,  839,  831,  833,  841,  835,  842,
      837,  830,  867,  842,  836,  832,  837,  834,  838,  836,

      832,  836,  840,  837,  839,  838,  843,  841,  835,  840,
      843,  839,  844,  842,  841,  845,  842,  837,  846,  867,
      842,  836,  840,  837,  847,  838,  848,  844,  849,  840,
      843,  839,  844,  843,  841,  845,  840,  843,  846,  844,
      842,  849,  845,  850,  847,  846,  848,  870,  849,  840,
      850,  847,  873,  848,  844,  849,  874,  843,  875,  844,
      878,  879,  845,  850,  880,  846,  881,    0,  849,  882,
      850,  847,  883,  848,  870,  849,    0,  850,  884,  873,
      878,  879,  884,  874,  880,  875,  881,  878,  879,  882,
      850,  880,  883,  881,  885,  886,  882,  887,  888,  883,

      889,  906,  884,  890,  891,  884,  891,  878,  879,  884,
      886,  880,  892,  881,  885,  886,  882,  887,  888,  883,
      889,  885,  886,  890,  887,  888,  891,  889,  906,  884,
      890,  891,  892,  891,  894,  893,  895,  886,  896,  892,
      898,  885,  886,    0,  887,  888,  899,  889,  893,  897,
      890,  902,  908,  891,  894,  893,  895,  900,  896,  892,
      898,  894,  893,  895,  897,  896,  899,  898,  903,  897,
      900,  902,  901,  899,  904,  893,  897,  900,  902,  908,
      901,  894,  893,  895,  900,  896,  910,  898,  903,  912,
      913,  897,  901,  899,  904,  903,  897,  900,  902,  901,

      915,  904,  917,  916,  900,  919,  925,  901,  921,  927,
        0,  918,    0,  910,  922,  903,  912,  913,  916,  901,
      915,  904,  917,  916,  920,  919,  918,  915,  921,  917,
      916,  918,  919,  925,  922,  921,  927,  920,  918,  924,
      930,  922,  931,  923,  920,  916,    0,  915,  933,  917,
      916,  920,  919,  918,  923,  921,  934,  937,  918,  924,
      930,  922,  931,  923,  920,  932,  924,  930,  933,  931,
      923,  920,    0,  938,    0,  933,  934,  937,    0,  932,
        0,  923,    0,  934,  937,  932,  924,  930,    0,  931,
      923,    0,  932,  938,    0,  933,    0,    0,    0,    0,

      938,    0,    0,  934,  937,    0,  932,    0,    0,    0,
        0,    0,  932,    0,    0,    0,    0,    0,    0,    0,
      938,  940,    0,    0,  940,  941,    0,  941,  941,  943,
        0,  943,  943,  944,    0,  944,  944,  945,    0,  945,
      945,  946,    0,  946,  946,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,

      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1613 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1857 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 940 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 939 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(READ)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(QUIT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(AVG)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 129:
#line 195 "flex_lexer.l"
case 130:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_DFLOATVAL;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2636 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 940 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 940 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 939);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 225 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
	fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
