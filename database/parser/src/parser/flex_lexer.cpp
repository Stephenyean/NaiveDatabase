#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 138
#define YY_END_OF_BUFFER 139
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[950] =
    {   0,
        0,    0,    2,    2,  139,  137,    4,    4,  137,  130,
      137,  130,  130,  133,  130,  130,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
        2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,    0,    0,  136,    1,
      132,  131,  133,  128,  127,  129,  135,  135,  135,  135,
      135,  107,  135,  135,  108,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  109,  135,  110,  111,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  112,  113,  114,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  115,  135,  135,  135,  135,  135,  135,  135,  135,
        2,    2,    2,    2,    2,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  134,  131,   94,  135,
       95,  135,  135,   96,   97,  125,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   98,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,   99,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  100,  135,  135,  101,  135,

      135,  135,  135,  135,  123,  135,  124,  135,  102,  135,
      135,  103,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  104,  135,  135,  135,  126,
      135,  105,  135,  135,  106,  135,  135,  135,  135,  119,
      135,  135,  135,  135,  135,  135,  135,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  135,  135,
      135,  135,  135,   72,  135,   90,  135,  135,  135,  135,
      135,  135,   73,  135,  135,  135,  135,   74,  135,  135,
      135,   75,  135,  135,  135,  135,  135,   76,   77,   78,
      135,  135,   79,  135,   80,  135,  135,  135,  135,  135,
      135,   81,  135,   82,   83,   84,  135,   85,  135,  135,

      135,  135,   86,  135,  135,  135,  135,  135,   87,   88,
      135,  135,  122,  121,  135,  135,  135,  135,  135,   89,
      135,  135,  135,  135,   91,  135,  135,  135,  135,  135,
      135,  135,  135,   92,  135,  135,   93,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   54,   55,  135,  135,
      135,  135,  116,  135,  135,  135,   56,  135,  135,  135,
      135,   57,  135,  135,  135,  135,  135,  135,  135,  135,
      135,   58,  135,  135,  135,   59,   60,  135,  135,  135,
      135,   61,   62,   63,   64,  135,  135,  135,   65,   66,
      135,  135,  135,  135,  135,   67,  135,  135,  135,  135,
       68,  135,  135,  135,   69,  135,  135,  135,   70,  135,
      135,  135,   71,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      135,   30,  135,  135,   31,  135,   32,  135,  135,  135,
       33,   34,  135,   35,   36,   37,  135,   38,  135,   39,
       40,  135,   41,   42,  135,  135,   43,  135,  135,   44,
      135,  135,  135,   45,  135,   46,   47,   48,  135,   49,

      135,  135,  135,   50,   51,   52,   53,  135,  135,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   15,
       16,   17,   18,  135,  135,   19,  135,   20,   21,   22,
       23,  135,   24,  135,  135,   25,   26,  135,   27,   28,
      135,  135,  135,  120,   29,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  117,  135,   10,  135,   11,  135,   12,  135,
      135,   13,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  118,  135,    7,  135,    8,    9,    2,    2,
        2,    2,    2,    2,    5,    6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[957] =
    {   0,
        0,    0,   65,    0,  428, 3776,  129,  131,    0, 3776,
      414,  411,  408,  127,  126,  405,  123,  123,  175,  221,
      112,  123,  121,  142,  167,  115,  129,  182,  183,  222,
      227,  228,  119,  180,  273,  321,  163,  226,  223,    0,
        0,  156,  159,  410,    0,  407,  393,  359,  156,  196,
      348,  378,  439,  491,  543,  260,  591,  275,  323,  639,
      337,  277,  378,  390,  691,  739,  791,  312,  329,  841,
      893,  941,  442,  441,  293,  208,  351,  347, 3776, 3776,
      343,  338,  205, 3776, 3776, 3776,    0,  221,  208,  222,
      273,  280,  279,  374,    0,  429,  451,  384,  440,  297,

      311,  489,  367,  415,  438,  451,  495,  445,  440,  444,
      448,  446,  447,  483,  493,    0,  481,  526,  500,  506,
      495,  543,  540,  553,  526,  537,  545,  540,  542,  551,
      563,  559,    0,  562,  550,  556,  583,  589,  590,  601,
      596,  596,  593,  592,  590,  609,  601,  617,  610,  611,
      615,  622,  627,  645,  646,  651,  649,  658,  654,  642,
        0,  300,  307,  303,    0,    0,  254,  250,  299,    0,
        0,    0,  668,  697,  716,  722,  754,  770,  776,  793,
      673,  802,  765,  847,  845,  833,  885,  993,  895,  799,
      891,  931, 1043,  699,  926,  937,  963,  949,  965,  981,

     1009,  887, 1004, 1092, 1017, 1035, 1032, 1057, 1067, 1097,
     1069, 1110, 1126, 1121, 1125, 1131, 1159, 1160, 1127, 1170,
     1156, 1164, 1185, 1189, 1195, 1247, 1219, 1210, 1218, 1231,
     1249, 1259, 1264, 1253, 1285, 1287, 1290, 1293, 1281, 1323,
     1336, 1338, 1326, 1348, 1344, 1352, 3776,  241,    0,  663,
        0,  665,  670,    0,    0,    0,  684,  685,  698,  747,
      744,  764,  757,  768,  811,  818,    0, 1076,  830,  852,
      945,  871,  898,  906,  947,  992, 1010, 1011, 1021, 1057,
     1071, 1086,    0, 1167, 1193, 1204, 1228, 1272, 1314, 1332,
     1334, 1341, 1355, 1359, 1377, 1380, 1365, 1375,    0, 1372,

     1389, 1388, 1394, 1400,    0, 1395, 1382, 1384,    0, 1394,
     1389, 1389, 1405, 1406, 1416, 1400, 1399, 1405, 1400, 1419,
     1425, 1407, 1423, 1434, 1435,    0, 1420, 1426, 1428,    0,
     1437,    0, 1435, 1447,    0, 1441, 1442, 1441, 1459,    0,
     1447, 1441, 1461, 1442, 1448, 1451, 1463,    0,  208, 1469,
     1472, 1475, 1480, 1494, 1485, 1488, 1497, 1503, 1511, 1526,
     1539, 1534, 1545, 1551, 1542, 1579, 1563, 1568, 1580, 1601,
     1591, 1597, 1622, 1596, 1625, 1633, 1650, 1609, 1631, 1664,
     1654, 1659, 1655, 1663, 1665, 1687, 1699, 1704, 1705, 1709,
     1718, 1722, 1743, 1728, 1730, 1739, 1758, 1767, 1762, 1754,

     1773, 1772, 1802, 1797, 1807, 1784, 1816, 1812, 1821, 1826,
     1840, 1838, 1842, 1850, 1852, 1861, 1866, 1871, 1892, 1890,
     1895, 1911, 1920, 1923, 1924, 1925, 1928, 1936, 1946, 1949,
     1957, 1978, 1959, 1989, 1960, 1974, 1990, 2003, 2008, 2024,
     2002, 2032, 2038, 2062, 2043, 2057, 2053, 2075, 1485, 1496,
     1535, 1606, 1671,    0, 1680,    0, 1711, 1800, 1893, 1899,
     1951, 1971,    0, 2012, 2040, 2049, 2071,    0, 2071, 2070,
     2069,    0, 2075, 2081, 2081, 2083, 2110,    0,    0,    0,
     2111, 2097,    0, 2101,    0, 2101, 2099, 2095, 2102, 2103,
     2115,    0, 2111,    0,    0,    0, 2105,    0, 2114, 2123,

     2112, 2114,    0, 2131, 2130, 2118, 2119, 2128,    0,    0,
     2144, 2150,    0,    0, 2141, 2138, 2137, 2152, 2163,    0,
     2162, 2160, 2165, 2156, 2154, 2171, 2161, 2155, 2176, 2159,
     2173, 2177, 2177,    0, 2165, 2182,    0, 2190, 2200, 2185,
     2206, 2194, 2211, 2222, 2216, 2228, 2244, 2254, 2250, 2262,
     2260, 2239, 2278, 2288, 2296, 2299, 2273, 2329, 2310, 2332,
     2313, 2342, 2344, 2345, 2348, 2374, 2358, 2373, 2383, 2402,
     2396, 2384, 2399, 2386, 2417, 2428, 2432, 2440, 2445, 2461,
     2442, 2450, 2456, 2466, 2471, 2494, 2495, 2499, 2496, 2510,
     2507, 2505, 2540, 2528, 2549, 2550, 2553, 2539, 2544, 2572,

     2578, 2582, 2583, 2604, 2593, 2607, 2608, 2617, 2594, 2618,
     2632, 2626, 2647, 2648, 2658, 2660, 2650, 2686, 2661, 2690,
     2671, 2701, 2700, 2714, 2702, 2712,    0,    0, 2203, 2229,
     2290, 2325,    0, 2341, 2377, 2409,    0, 2416, 2463, 2495,
     2504,    0, 2543, 2575, 2672, 2711, 2700, 2701, 2709, 2720,
     2718,    0, 2724, 2722, 2721,    0,    0, 2725, 2744, 2731,
     2739,    0,    0,    0,    0, 2758, 2752, 2741,    0,    0,
     2758, 2747, 2751, 2765, 2762,    0, 2772, 2754, 2771, 2778,
     2761, 2763, 2762, 2782,    0, 2779, 2781, 2784,    0, 2772,
     2792, 2793,    0, 2790, 2794, 2798, 2800, 2808, 2823, 2809,

     2824, 2832, 2834, 2838, 2857, 2862, 2866, 2848, 2863, 2876,
     2878, 2874, 2888, 2892, 2902, 2906, 2928, 2930, 2911, 2940,
     2941, 2936, 2945, 2946, 2970, 2962, 2980, 2979, 2971, 2976,
     2984, 2995, 3005, 3016, 3014, 3010, 3020, 3024, 3035, 3045,
     3033, 3050, 3039, 3068, 3069, 3074, 3083, 3093, 3099, 3102,
     3108, 3078, 3118, 3133, 3123, 3127, 3137, 3152, 3162, 3136,
     2799,    0, 2803, 2840, 2883, 2909,    0, 3035, 3089, 3126,
        0,    0, 3144,    0,    0,    0, 3161,    0, 3157,    0,
        0, 3147,    0,    0, 3158, 3173,    0, 3169, 3181,    0,
     3166, 3186, 3167,    0, 3192, 3177,    0,    0, 3185,    0,

     3199, 3200, 3182,    0,    0,    0,    0, 3188, 3195, 3205,
     3206, 3207, 3210, 3221, 3231, 3220, 3236, 3244, 3246, 3255,
     3259, 3272, 3260, 3274, 3276, 3284, 3285, 3289, 3290, 3295,
     3300, 3308, 3313, 3326, 3314, 3318, 3343, 3348, 3329, 3352,
     3354, 3358, 3362, 3386, 3383, 3380, 3388, 3412, 3396, 3402,
     3418, 3436, 3417, 3420, 3428, 3434, 3453, 3450,    0,    0,
        0,    0,    0, 3212, 3328,    0, 3315,    0,    0,    0,
        0, 3366,    0, 3391, 3442,    0,    0, 3437,    0,    0,
     3445, 3452, 3462,    0,    0, 3468, 3471, 3472, 3474, 3476,
     3482, 3490, 3504, 3505, 3506, 3507, 3508, 3516, 3540, 3522,

     3544, 3539, 3541, 3550, 3558, 3556, 3562, 3579, 3590, 3574,
     3575, 3593, 3531, 3565,    0, 3566,    0, 3583,    0, 3584,
     3600,    0, 3614, 3612, 3615, 3629, 3616, 3633, 3630, 3645,
     3647, 3648,    0, 3624,    0, 3638,    0,    0, 3664, 3666,
     3669, 3683, 3678, 3681,    0,    0, 3682, 3687, 3776, 3751,
     3755,  182, 3759, 3763, 3767, 3771
    } ;

static yyconst flex_int16_t yy_def[957] =
    {   0,
      949,    1,  949,    3,  949,  949,  949,  949,  950,  949,
      951,  949,  949,  949,  949,  949,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      953,  953,  949,  954,  953,  955,  953,  953,  953,  953,
      953,  956,  956,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  949,  950,  951,  949,  949,
      949,  949,  949,  949,  949,  949,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      953,  953,  954,  955,  953,  953,  953,  953,  953,  953,
      953,  953,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  949,  949,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  953,  953,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  952,  952,  952,  952,  952,  952,   53,   53,
       53,   53,   53,   53,  952,  952,   53,   53,    0,  949,
      949,  949,  949,  949,  949,  949
    } ;

static yyconst flex_int16_t yy_nxt[3842] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   40,   40,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   40,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   45,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,

       75,   75,   75,   41,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   75,   75,
       76,   76,   76,   76,   82,   83,   84,   85,   88,   94,
       89,  120,  106,  108,  112,  121,   90,  107,   91,  109,
      113,  139,  110,   92,  114,  111,   93,  162,   76,   95,
       76,   76,  115,  168,  169,   88,   94,   89,  120,  106,
      108,  112,  121,   90,  107,   91,  109,  113,  139,  110,
       92,  114,  111,   93,  116,   87,   95,   96,  154,  115,
      155,  117,  118,  156,   97,  125,  140,  119,  122,  126,

      141,   98,  123,  127,   99,  100,  170,  171,  124,   76,
       76,  116,   82,   83,   96,  154,  349,  155,  117,  118,
      156,   97,  125,  140,  119,  122,  126,  141,   98,  123,
      127,   99,  100,  101,  128,  124,  249,  102,  157,  250,
      136,  103,  159,  160,  132,  251,  158,  104,  129,  248,
      105,  137,  133,  252,  130,  131,  134,  138,  349,  135,
      101,  128,  167,  249,  102,  157,  250,  136,  103,  159,
      160,  132,  251,  158,  104,  129,  173,  105,  137,  133,
      252,  130,  131,  134,  138,  253,  135,  142,  254,  143,
      192,  173,  144,  207,  255,  193,  173,  256,  198,  145,

      146,  162,   76,  173,  199,  147,  168,  169,  165,  173,
      348,  173,  253,  173,  142,  254,  143,  192,  173,  144,
      207,  255,  193,  173,  256,  198,  145,  146,  173,  173,
      267,  199,  147,  148,  149,  200,  173,  150,  173,  173,
      173,  151,  268,  201,  225,  226,  248,  152,  173,  227,
      153,   81,   79,  173,  247,  173,  173,  267,  172,  173,
      148,  149,  200,  206,  150,  173,  173,  167,  151,  268,
      201,  225,  226,  173,  152,  173,  227,  153,  161,  161,
      173,  161,  161,  161,  161,  161,  173,  161,  161,  161,
      206,  257,  173,  174,  208,  175,  273,  274,  209,  166,

      173,  176,  211,  177,  210,  258,  212,  263,  178,  264,
      213,  179,  165,  161,  173,   86,   81,   80,  257,   79,
      174,  208,  175,  273,  274,  209,  173,  949,  176,  211,
      177,  210,  258,  212,  263,  178,  264,  213,  179,  161,
      161,  173,  161,  161,  161,  161,  161,  275,  161,  161,
      161,  949,  259,  173,  243,  180,  265,  173,  173,  260,
      245,  246,  244,  261,  276,  277,  266,  262,  282,  283,
      284,  285,  286,  287,  275,  181,  949,  173,  173,  259,
      949,  243,  180,  265,  173,  173,  260,  245,  246,  244,
      261,  276,  277,  266,  262,  282,  283,  284,  285,  286,

      287,  269,  181,  182,  173,  173,  270,  173,  292,  278,
      183,  279,  271,  288,  949,  280,  289,  184,  290,  272,
      185,  186,  281,  291,  949,  297,  298,  173,  269,  949,
      182,  299,  949,  270,  173,  292,  278,  183,  279,  271,
      288,  293,  280,  289,  184,  290,  272,  185,  186,  281,
      291,  294,  297,  298,  173,  187,  295,  296,  299,  188,
      300,  305,  301,  189,  302,  303,  306,  304,  293,  190,
      307,  308,  191,  309,  310,  311,  312,  313,  294,  173,
      949,  314,  187,  295,  296,  315,  188,  300,  305,  301,
      189,  302,  303,  306,  304,  316,  190,  307,  308,  191,

      309,  310,  311,  312,  313,  317,  173,  173,  314,  318,
      319,  194,  315,  320,  323,  324,  325,  195,  327,  328,
      196,  329,  316,  197,  326,  330,  321,  173,  949,  949,
      331,  322,  317,  332,  173,  333,  318,  319,  194,  334,
      320,  323,  324,  325,  195,  327,  328,  196,  329,  335,
      197,  326,  330,  321,  173,  173,  202,  331,  322,  336,
      332,  339,  333,  203,  204,  337,  334,  340,  338,  205,
      346,  341,  342,  347,  344,  173,  335,  949,  343,  449,
      949,  450,  173,  202,  173,  949,  336,  345,  339,  173,
      203,  204,  337,  451,  340,  338,  205,  346,  341,  342,

      347,  344,  173,  214,  173,  343,  449,  173,  450,  173,
      452,  173,  350,  173,  345,  173,  173,  215,  949,  453,
      451,  454,  383,  216,  217,  949,  949,  173,  949,  949,
      214,  173,  173,  173,  173,  173,  173,  452,  173,  350,
      173,  949,  173,  949,  215,  352,  453,  351,  454,  383,
      216,  217,  173,  353,  173,  173,  218,  949,  173,  173,
      173,  455,  173,  949,  219,  173,  354,  949,  220,  355,
      173,  221,  352,  456,  351,  173,  949,  362,  457,  173,
      353,  363,  173,  218,  356,  173,  173,  949,  455,  458,
      173,  219,  173,  354,  357,  220,  355,  173,  221,  459,

      456,  173,  173,  222,  362,  457,  173,  173,  363,  173,
      358,  356,  173,  173,  223,  173,  458,  173,  173,  173,
      224,  357,  949,  460,  359,  360,  459,  173,  173,  173,
      222,  376,  361,  173,  173,  173,  173,  358,  173,  173,
      949,  223,  173,  949,  949,  173,  949,  224,  461,  173,
      460,  359,  360,  464,  173,  228,  173,  229,  376,  361,
      230,  366,  173,  173,  465,  173,  368,  231,  232,  173,
      364,  367,  365,  233,  949,  461,  173,  173,  949,  949,
      464,  173,  228,  173,  229,  468,  949,  230,  366,  949,
      173,  465,  949,  368,  231,  232,  173,  364,  367,  365,

      233,  173,  949,  173,  173,  234,  235,  173,  173,  236,
      173,  173,  468,  237,  469,  949,  369,  377,  949,  238,
      949,  173,  239,  173,  374,  375,  949,  173,  173,  173,
      173,  173,  234,  235,  173,  949,  236,  470,  173,  949,
      237,  469,  173,  369,  377,  378,  238,  173,  173,  239,
      173,  374,  375,  173,  173,  384,  173,  173,  173,  949,
      471,  466,  173,  385,  470,  173,  240,  173,  241,  173,
      949,  242,  378,  173,  173,  387,  467,  173,  949,  173,
      173,  173,  384,  949,  173,  173,  386,  471,  466,  173,
      385,  388,  173,  240,  173,  241,  949,  173,  242,  173,

      173,  173,  387,  467,  173,  370,  173,  949,  173,  173,
      371,  389,  173,  386,  390,  949,  372,  173,  388,  472,
      173,  949,  473,  373,  173,  173,  173,  474,  173,  173,
      949,  393,  370,  173,  391,  475,  173,  371,  389,  392,
      173,  390,  398,  372,  173,  173,  472,  173,  173,  473,
      373,  173,  173,  173,  474,  399,  173,  379,  393,  380,
      173,  391,  475,  381,  949,  949,  392,  173,  400,  398,
      382,  173,  173,  173,  401,  173,  949,  949,  173,  173,
      173,  949,  399,  173,  379,  173,  380,  476,  462,  402,
      381,  403,  463,  173,  477,  400,  949,  382,  173,  949,

      173,  401,  478,  173,  406,  173,  173,  394,  173,  404,
      173,  405,  173,  173,  476,  462,  402,  395,  403,  463,
      173,  477,  396,  397,  949,  949,  173,  949,  173,  478,
      173,  406,  173,  173,  394,  173,  404,  173,  405,  407,
      173,  173,  173,  173,  395,  949,  173,  173,  949,  396,
      397,  408,  409,  173,  411,  173,  410,  173,  949,  949,
      173,  173,  173,  173,  173,  949,  407,  173,  173,  173,
      173,  412,  173,  173,  173,  173,  173,  413,  408,  409,
      173,  411,  949,  410,  173,  414,  173,  415,  173,  173,
      173,  479,  173,  416,  173,  173,  173,  417,  412,  173,

      173,  173,  173,  173,  413,  418,  173,  173,  949,  419,
      949,  173,  414,  173,  415,  420,  480,  481,  479,  173,
      416,  173,  173,  173,  417,  173,  173,  173,  173,  425,
      949,  173,  418,  173,  173,  173,  419,  424,  173,  949,
      949,  426,  420,  480,  481,  949,  173,  173,  173,  427,
      949,  949,  173,  173,  173,  173,  425,  428,  173,  421,
      482,  173,  173,  173,  424,  173,  432,  173,  426,  173,
      949,  430,  422,  173,  173,  173,  427,  423,  429,  949,
      173,  173,  173,  173,  428,  173,  421,  482,  431,  173,
      173,  483,  173,  432,  173,  173,  173,  173,  430,  422,

      173,  173,  173,  173,  423,  429,  173,  173,  433,  173,
      173,  434,  173,  437,  435,  431,  173,  173,  483,  949,
      436,  173,  173,  173,  173,  949,  173,  173,  173,  173,
      173,  949,  949,  173,  484,  433,  173,  949,  434,  173,
      437,  435,  173,  438,  173,  949,  439,  436,  173,  443,
      173,  440,  173,  173,  441,  444,  173,  949,  442,  173,
      447,  484,  173,  485,  445,  486,  173,  487,  173,  173,
      438,  488,  173,  439,  173,  489,  443,  446,  440,  173,
      173,  441,  444,  448,  173,  442,  173,  447,  173,  173,
      485,  445,  486,  490,  487,  173,  491,  493,  488,  173,

      494,  173,  489,  495,  446,  496,  492,  173,  497,  498,
      448,  173,  499,  500,  501,  173,  502,  503,  504,  505,
      490,  506,  507,  491,  493,  510,  511,  494,  508,  512,
      495,  513,  496,  492,  514,  497,  498,  515,  516,  499,
      500,  501,  517,  502,  503,  504,  505,  509,  506,  507,
      518,  519,  510,  511,  520,  508,  512,  521,  513,  522,
      523,  514,  524,  525,  515,  516,  526,  529,  527,  517,
      528,  530,  531,  532,  509,  533,  534,  518,  519,  535,
      536,  520,  537,  949,  521,  173,  522,  523,  538,  524,
      525,  173,  949,  526,  529,  527,  539,  528,  530,  531,

      532,  173,  533,  534,  173,  173,  535,  536,  173,  537,
      173,  173,  173,  173,  627,  538,  173,  540,  173,  173,
      949,  173,  949,  539,  173,  628,  949,  173,  173,  541,
      173,  173,  173,  173,  949,  173,  949,  173,  173,  173,
      173,  627,  173,  173,  540,  542,  173,  173,  173,  543,
      173,  173,  628,  544,  173,  173,  541,  173,  173,  546,
      173,  173,  173,  545,  949,  949,  173,  173,  949,  173,
      173,  629,  542,  548,  173,  173,  543,  173,  173,  173,
      544,  173,  173,  547,  173,  173,  546,  173,  173,  173,
      545,  549,  551,  550,  173,  173,  552,  173,  629,  173,

      548,  949,  173,  554,  173,  173,  173,  173,  173,  949,
      547,  173,  558,  555,  173,  173,  173,  173,  549,  551,
      550,  562,  173,  552,  553,  173,  173,  173,  556,  949,
      554,  173,  173,  173,  173,  630,  557,  173,  173,  558,
      555,  173,  173,  173,  173,  173,  560,  563,  562,  173,
      949,  553,  173,  949,  173,  556,  559,  949,  173,  173,
      173,  173,  630,  557,  173,  173,  173,  173,  173,  173,
      173,  567,  173,  560,  563,  173,  173,  561,  564,  173,
      173,  173,  566,  559,  565,  173,  173,  631,  173,  568,
      173,  173,  632,  173,  173,  173,  173,  173,  567,  173,

      173,  173,  173,  173,  561,  564,  173,  173,  173,  566,
      569,  565,  570,  173,  631,  173,  568,  173,  173,  632,
      173,  173,  173,  173,  572,  173,  173,  173,  173,  573,
      173,  949,  949,  633,  173,  173,  571,  569,  173,  570,
      173,  173,  173,  949,  577,  173,  578,  173,  173,  574,
      173,  572,  173,  575,  173,  579,  573,  949,  173,  173,
      633,  173,  173,  571,  173,  173,  173,  173,  173,  576,
      173,  577,  173,  578,  580,  173,  574,  949,  173,  173,
      575,  173,  579,  173,  581,  173,  173,  583,  585,  173,
      173,  173,  949,  173,  173,  949,  576,  173,  173,  582,

      173,  580,  173,  173,  584,  173,  173,  949,  173,  173,
      173,  581,  587,  173,  583,  585,  173,  173,  173,  588,
      173,  173,  586,  173,  634,  173,  582,  173,  173,  949,
      173,  584,  173,  173,  589,  173,  173,  173,  173,  587,
      173,  949,  173,  173,  590,  173,  588,  173,  173,  586,
      173,  634,  173,  591,  173,  173,  173,  173,  173,  173,
      173,  589,  173,  592,  173,  173,  595,  593,  596,  173,
      173,  590,  594,  597,  173,  173,  173,  173,  173,  173,
      591,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      592,  599,  598,  595,  593,  596,  949,  173,  600,  594,

      597,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      603,  173,  949,  173,  173,  173,  601,  949,  599,  598,
      949,  602,  635,  604,  173,  600,  173,  173,  173,  173,
      636,  173,  949,  173,  173,  173,  173,  603,  173,  173,
      607,  608,  606,  601,  173,  949,  949,  173,  602,  635,
      604,  605,  173,  173,  173,  173,  173,  636,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  607,  608,  606,
      609,  173,  173,  173,  173,  173,  614,  610,  605,  173,
      611,  637,  173,  173,  638,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  609,  949,  173,

      173,  612,  173,  614,  610,  173,  173,  611,  637,  173,
      173,  638,  173,  949,  173,  615,  613,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  949,  612,  616,
      949,  617,  173,  173,  618,  639,  619,  173,  173,  173,
      173,  173,  615,  613,  173,  173,  173,  949,  173,  949,
      949,  173,  173,  173,  173,  949,  616,  620,  617,  173,
      173,  618,  639,  619,  949,  173,  173,  173,  173,  173,
      621,  173,  640,  173,  173,  173,  622,  623,  173,  173,
      641,  173,  625,  642,  620,  643,  173,  173,  624,  173,
      644,  173,  645,  173,  626,  173,  173,  621,  173,  640,

      173,  173,  646,  622,  623,  173,  173,  641,  647,  625,
      642,  173,  643,  648,  649,  624,  173,  644,  173,  645,
      173,  626,  650,  651,  652,  173,  653,  654,  655,  646,
      656,  657,  658,  659,  661,  647,  662,  663,  173,  664,
      648,  649,  665,  666,  660,  667,  668,  669,  670,  650,
      651,  652,  671,  653,  654,  655,  672,  656,  657,  658,
      659,  661,  673,  662,  663,  674,  664,  675,  676,  665,
      666,  660,  667,  668,  669,  670,  677,  678,  679,  671,
      680,  681,  682,  672,  683,  684,  685,  686,  687,  673,
      688,  689,  674,  690,  675,  676,  691,  692,  693,  949,

      949,  173,  949,  677,  678,  679,  173,  680,  681,  682,
      698,  683,  684,  685,  686,  687,  173,  688,  689,  694,
      690,  696,  173,  691,  692,  693,  173,  173,  173,  695,
      173,  949,  173,  173,  699,  697,  173,  698,  173,  949,
      761,  949,  173,  173,  173,  762,  694,  173,  696,  173,
      700,  949,  173,  173,  173,  173,  695,  173,  173,  173,
      173,  699,  697,  173,  173,  173,  173,  761,  701,  173,
      173,  173,  762,  705,  173,  173,  173,  700,  173,  173,
      173,  703,  173,  702,  949,  173,  173,  173,  949,  173,
      173,  173,  704,  173,  173,  701,  173,  173,  173,  949,

      705,  706,  173,  173,  173,  173,  763,  173,  703,  173,
      702,  709,  173,  173,  173,  173,  173,  173,  949,  704,
      707,  173,  949,  173,  173,  173,  173,  708,  706,  173,
      711,  173,  173,  763,  949,  173,  173,  949,  709,  173,
      764,  173,  173,  710,  949,  173,  173,  707,  173,  173,
      949,  173,  949,  173,  708,  712,  173,  711,  173,  173,
      173,  173,  173,  949,  173,  173,  765,  764,  173,  713,
      710,  714,  173,  173,  173,  173,  173,  715,  173,  716,
      173,  173,  712,  949,  173,  173,  717,  173,  173,  173,
      173,  173,  173,  765,  173,  173,  713,  949,  714,  173,

      173,  173,  173,  766,  715,  173,  716,  173,  173,  173,
      173,  173,  173,  717,  718,  173,  173,  173,  173,  173,
      173,  173,  173,  719,  720,  767,  173,  173,  768,  173,
      766,  949,  173,  173,  949,  173,  173,  173,  173,  173,
      949,  718,  173,  721,  173,  173,  173,  173,  173,  173,
      719,  720,  767,  173,  949,  768,  173,  722,  173,  173,
      173,  173,  173,  949,  173,  173,  173,  723,  173,  724,
      721,  173,  173,  728,  725,  173,  173,  173,  173,  726,
      173,  173,  173,  173,  722,  173,  173,  173,  173,  769,
      727,  173,  173,  173,  723,  173,  724,  173,  949,  173,

      728,  725,  173,  173,  173,  173,  726,  173,  173,  173,
      173,  173,  731,  173,  173,  173,  769,  727,  770,  173,
      771,  173,  730,  173,  173,  729,  173,  949,  949,  173,
      173,  173,  173,  949,  173,  173,  733,  173,  173,  731,
      732,  173,  173,  173,  735,  770,  173,  771,  173,  730,
      173,  949,  729,  173,  734,  173,  173,  173,  173,  173,
      173,  949,  173,  733,  173,  173,  173,  732,  173,  173,
      173,  735,  949,  173,  772,  173,  173,  738,  736,  737,
      173,  734,  173,  173,  739,  173,  173,  173,  173,  173,
      740,  173,  173,  173,  173,  949,  173,  949,  173,  173,

      773,  772,  173,  173,  738,  736,  737,  173,  173,  173,
      173,  739,  173,  173,  173,  173,  173,  740,  173,  173,
      173,  173,  742,  173,  173,  173,  173,  773,  741,  173,
      173,  745,  744,  173,  746,  173,  173,  173,  743,  949,
      173,  173,  748,  173,  173,  173,  173,  173,  173,  742,
      173,  173,  747,  173,  173,  741,  173,  173,  745,  744,
      173,  746,  173,  173,  173,  743,  173,  173,  173,  748,
      173,  173,  751,  749,  173,  173,  173,  173,  750,  747,
      173,  173,  753,  173,  173,  752,  173,  757,  774,  173,
      173,  173,  755,  173,  173,  173,  173,  173,  754,  751,

      749,  173,  173,  173,  173,  750,  173,  173,  756,  753,
      173,  173,  752,  173,  757,  774,  173,  173,  760,  755,
      758,  173,  173,  173,  173,  754,  173,  775,  173,  173,
      173,  776,  777,  173,  173,  756,  173,  173,  173,  778,
      779,  780,  781,  173,  173,  760,  759,  758,  173,  173,
      173,  782,  783,  173,  775,  173,  784,  173,  776,  777,
      785,  786,  787,  173,  173,  173,  778,  779,  780,  781,
      788,  789,  790,  759,  791,  173,  792,  173,  782,  783,
      793,  794,  795,  784,  796,  797,  798,  785,  786,  787,
      799,  800,  801,  802,  803,  804,  805,  788,  789,  790,

      806,  791,  807,  792,  808,  809,  173,  793,  794,  795,
      173,  796,  797,  798,  173,  859,  811,  799,  800,  801,
      802,  803,  804,  805,  812,  173,  173,  806,  860,  807,
      173,  808,  809,  173,  173,  810,  173,  173,  813,  173,
      173,  173,  859,  811,  173,  173,  949,  949,  173,  814,
      816,  812,  173,  173,  173,  860,  861,  173,  815,  173,
      173,  173,  810,  173,  820,  813,  173,  173,  173,  817,
      173,  173,  173,  173,  173,  173,  814,  816,  173,  173,
      949,  173,  173,  861,  173,  815,  173,  173,  818,  819,
      823,  820,  173,  173,  173,  173,  817,  173,  173,  173,

      173,  173,  173,  822,  824,  173,  173,  821,  173,  173,
      173,  173,  173,  862,  173,  818,  819,  823,  173,  173,
      173,  173,  173,  825,  173,  173,  173,  173,  173,  173,
      822,  824,  863,  826,  821,  173,  827,  173,  173,  173,
      862,  173,  173,  949,  173,  173,  173,  173,  828,  173,
      825,  173,  173,  829,  173,  173,  173,  173,  830,  863,
      826,  173,  173,  827,  173,  173,  173,  832,  949,  173,
      831,  173,  173,  173,  173,  828,  173,  173,  834,  173,
      829,  173,  173,  173,  173,  830,  173,  173,  173,  173,
      949,  173,  173,  173,  832,  173,  173,  831,  173,  173,

      173,  833,  836,  173,  173,  834,  173,  173,  173,  173,
      835,  173,  173,  173,  173,  173,  173,  837,  949,  173,
      173,  173,  173,  173,  949,  173,  173,  173,  833,  836,
      173,  173,  173,  173,  173,  838,  173,  835,  173,  173,
      840,  173,  173,  173,  837,  839,  173,  173,  173,  843,
      173,  173,  173,  173,  949,  173,  173,  173,  173,  173,
      173,  173,  838,  173,  841,  864,  173,  840,  173,  173,
      844,  173,  839,  173,  842,  173,  843,  173,  173,  173,
      845,  173,  173,  173,  173,  173,  173,  173,  173,  847,
      173,  841,  864,  173,  173,  848,  173,  844,  173,  173,

      846,  842,  173,  865,  173,  173,  949,  845,  173,  173,
      173,  173,  173,  173,  173,  173,  847,  173,  173,  173,
      852,  173,  848,  849,  173,  949,  173,  846,  850,  173,
      865,  173,  173,  851,  853,  173,  173,  173,  173,  855,
      949,  173,  173,  173,  173,  173,  173,  852,  854,  173,
      849,  173,  173,  173,  173,  850,  173,  866,  867,  173,
      851,  853,  173,  173,  857,  173,  855,  856,  173,  173,
      173,  173,  173,  173,  858,  854,  173,  868,  173,  173,
      173,  173,  869,  870,  866,  867,  173,  871,  173,  872,
      173,  857,  873,  874,  856,  173,  173,  875,  173,  173,

      173,  858,  876,  877,  868,  173,  878,  879,  880,  869,
      870,  881,  882,  883,  871,  173,  872,  884,  885,  873,
      874,  886,  173,  173,  875,  173,  888,  949,  913,  876,
      877,  949,  887,  878,  879,  880,  173,  173,  881,  882,
      883,  173,  173,  173,  884,  885,  173,  173,  886,  173,
      173,  889,  173,  888,  890,  913,  173,  173,  892,  887,
      173,  949,  173,  173,  173,  949,  891,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  893,  889,  173,
      173,  890,  173,  173,  173,  892,  894,  173,  173,  173,
      173,  173,  173,  891,  173,  173,  173,  949,  173,  173,

      895,  173,  173,  173,  893,  173,  173,  173,  173,  173,
      173,  173,  173,  894,  896,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  895,  173,  173,
      899,  173,  173,  173,  173,  173,  897,  173,  173,  173,
      914,  896,  173,  173,  173,  173,  915,  173,  173,  173,
      173,  173,  173,  173,  173,  898,  173,  899,  173,  173,
      901,  173,  173,  897,  173,  173,  900,  914,  173,  173,
      903,  173,  173,  915,  173,  949,  173,  173,  173,  173,
      916,  173,  898,  902,  173,  949,  173,  901,  173,  173,
      173,  173,  173,  900,  904,  173,  173,  903,  173,  173,

      905,  173,  173,  949,  173,  173,  173,  916,  949,  949,
      902,  173,  173,  906,  908,  173,  173,  173,  173,  173,
      917,  904,  173,  173,  173,  173,  173,  905,  173,  173,
      909,  173,  173,  173,  173,  907,  173,  949,  173,  173,
      906,  908,  949,  173,  173,  173,  173,  917,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  909,  918,  173,
      173,  173,  907,  173,  173,  173,  173,  910,  919,  173,
      173,  173,  173,  912,  920,  173,  921,  173,  922,  173,
      173,  173,  911,  173,  173,  918,  173,  173,  173,  173,
      173,  173,  173,  173,  910,  919,  173,  173,  923,  173,

      912,  920,  924,  921,  173,  922,  173,  173,  173,  911,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  923,  173,  949,  949,  924,
      949,  173,  173,  173,  173,  173,  925,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  949,  173,  173,  173,
      173,  173,  173,  173,  926,  928,  173,  173,  173,  173,
      173,  933,  949,  925,  949,  173,  173,  173,  173,  173,
      173,  173,  173,  927,  173,  173,  173,  173,  173,  173,
      173,  926,  928,  173,  173,  173,  173,  173,  933,  929,
      932,  173,  173,  173,  173,  173,  934,  935,  173,  173,

      927,  173,  173,  173,  173,  173,  173,  173,  930,  173,
      173,  173,  936,  173,  931,  173,  929,  932,  173,  173,
      937,  173,  173,  934,  935,  173,  173,  938,  173,  173,
      173,  173,  173,  173,  949,  930,  173,  173,  173,  936,
      945,  931,  173,  940,  939,  173,  173,  937,  173,  173,
      173,  173,  173,  173,  938,  173,  173,  173,  173,  173,
      941,  173,  942,  173,  173,  173,  173,  945,  946,  173,
      940,  939,  173,  173,  944,  173,  173,  173,  173,  173,
      173,  943,  947,  173,  173,  173,  949,  941,  173,  942,
      173,  173,  173,  173,  173,  946,  173,  173,  173,  173,

      173,  944,  173,  173,  949,  173,  949,  173,  943,  947,
      173,  173,  173,  948,  173,  949,  949,  173,  173,  173,
      949,  173,  949,  173,  173,  173,  173,  173,  949,  173,
      173,  949,  173,  949,  949,  949,  949,  949,  949,  949,
      948,  173,  949,  949,  173,  173,  173,  949,  949,  949,
      173,   77,  949,  949,   77,   78,  949,   78,   78,  161,
      949,  161,  161,  163,  949,  163,  163,  164,  949,  164,
      164,  173,  949,  173,  173,    5,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949
    } ;

static yyconst flex_int16_t yy_chk[3842] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   26,   21,   22,   23,   27,   17,   21,   17,   22,
       23,   33,   22,   17,   24,   22,   17,   42,   42,   18,
       43,   43,   24,   49,   49,   17,   18,   17,   26,   21,
       22,   23,   27,   17,   21,   17,   22,   23,   33,   22,
       17,   24,   22,   17,   25,  952,   18,   19,   37,   24,
       37,   25,   25,   37,   19,   29,   34,   25,   28,   29,

       34,   19,   28,   29,   19,   19,   50,   50,   28,   76,
       76,   25,   83,   83,   19,   37,  349,   37,   25,   25,
       37,   19,   29,   34,   25,   28,   29,   34,   19,   28,
       29,   19,   19,   20,   30,   28,   88,   20,   38,   89,
       32,   20,   39,   39,   31,   90,   38,   20,   30,  248,
       20,   32,   31,   90,   30,   30,   31,   32,  168,   31,
       20,   30,  167,   88,   20,   38,   89,   32,   20,   39,
       39,   31,   90,   38,   20,   30,   56,   20,   32,   31,
       90,   30,   30,   31,   32,   91,   31,   35,   91,   35,
       56,   58,   35,   62,   92,   56,   56,   93,   58,   35,

       35,  162,  162,   56,   58,   35,  169,  169,  164,   75,
      163,   58,   91,   62,   35,   91,   35,   56,   58,   35,
       62,   92,   56,   56,   93,   58,   35,   35,   68,   75,
      100,   58,   35,   36,   36,   59,   75,   36,   58,   59,
       62,   36,  101,   59,   68,   69,   82,   36,   68,   69,
       36,   81,   78,   61,   77,   68,   75,  100,   51,   59,
       36,   36,   59,   61,   36,   69,   59,   48,   36,  101,
       59,   68,   69,   61,   36,   68,   69,   36,   52,   52,
       61,   52,   52,   52,   52,   52,   59,   52,   52,   52,
       61,   94,   69,   52,   63,   52,  103,  103,   63,   47,

       61,   52,   64,   52,   63,   94,   64,   98,   52,   98,
       64,   52,   46,   44,   63,   16,   13,   12,   94,   11,
       52,   63,   52,  103,  103,   63,   64,    5,   52,   64,
       52,   63,   94,   64,   98,   52,   98,   64,   52,   53,
       53,   63,   53,   53,   53,   53,   53,  104,   53,   53,
       53,    0,   96,   64,   73,   53,   99,   74,   73,   96,
       74,   74,   73,   97,  105,  106,   99,   97,  108,  109,
      110,  111,  112,  113,  104,   53,    0,   74,   73,   96,
        0,   73,   53,   99,   74,   73,   96,   74,   74,   73,
       97,  105,  106,   99,   97,  108,  109,  110,  111,  112,

      113,  102,   53,   54,   74,   73,  102,   54,  117,  107,
       54,  107,  102,  114,    0,  107,  114,   54,  115,  102,
       54,   54,  107,  115,    0,  119,  120,   54,  102,    0,
       54,  121,    0,  102,   54,  117,  107,   54,  107,  102,
      114,  118,  107,  114,   54,  115,  102,   54,   54,  107,
      115,  118,  119,  120,   54,   55,  118,  118,  121,   55,
      122,  125,  123,   55,  123,  124,  126,  124,  118,   55,
      127,  128,   55,  129,  130,  131,  132,  134,  118,   55,
        0,  135,   55,  118,  118,  136,   55,  122,  125,  123,
       55,  123,  124,  126,  124,  137,   55,  127,  128,   55,

      129,  130,  131,  132,  134,  138,   55,   57,  135,  138,
      139,   57,  136,  140,  141,  142,  143,   57,  144,  145,
       57,  146,  137,   57,  143,  147,  140,   57,    0,    0,
      148,  140,  138,  149,   57,  150,  138,  139,   57,  151,
      140,  141,  142,  143,   57,  144,  145,   57,  146,  152,
       57,  143,  147,  140,   57,   60,   60,  148,  140,  153,
      149,  155,  150,   60,   60,  154,  151,  156,  154,   60,
      159,  156,  157,  160,  158,   60,  152,    0,  157,  250,
        0,  252,   60,   60,  173,    0,  153,  158,  155,  181,
       60,   60,  154,  253,  156,  154,   60,  159,  156,  157,

      160,  158,   60,   65,  173,  157,  250,   65,  252,  181,
      257,  173,  174,  174,  158,  194,  181,   65,    0,  258,
      253,  259,  194,   65,   65,    0,    0,   65,    0,    0,
       65,  173,  175,  174,   65,  194,  181,  257,  176,  174,
      174,    0,  194,    0,   65,  176,  258,  175,  259,  194,
       65,   65,  175,  176,   65,   66,   66,    0,  176,  175,
      174,  260,  194,    0,   66,  176,  177,    0,   66,  177,
      177,   66,  176,  261,  175,   66,    0,  183,  262,  175,
      176,  183,   66,   66,  178,  176,  178,    0,  260,  263,
      177,   66,  179,  177,  179,   66,  177,  177,   66,  264,

      261,  183,   66,   67,  183,  262,  178,   67,  183,  180,
      180,  178,  179,  178,   67,  190,  263,  177,  182,  179,
       67,  179,    0,  265,  180,  182,  264,   67,  183,  180,
       67,  190,  182,  178,   67,  190,  180,  180,  182,  179,
        0,   67,  190,    0,    0,  182,    0,   67,  266,  186,
      265,  180,  182,  269,   67,   70,  180,   70,  190,  182,
       70,  185,  190,  184,  270,  182,  186,   70,   70,  186,
      184,  185,  184,   70,    0,  266,  186,   70,    0,    0,
      269,  185,   70,  184,   70,  272,    0,   70,  185,    0,
      184,  270,    0,  186,   70,   70,  186,  184,  185,  184,

       70,  187,    0,  202,   70,   71,   71,  191,  185,   71,
      184,  189,  272,   71,  273,    0,  187,  191,    0,   71,
        0,  187,   71,  202,  189,  189,    0,  191,  187,   71,
      202,  189,   71,   71,  191,    0,   71,  274,  189,    0,
       71,  273,  195,  187,  191,  192,   71,  192,  187,   71,
      202,  189,  189,  196,  191,  195,   71,   72,  189,    0,
      275,  271,  195,  196,  274,  198,   72,  192,   72,  195,
        0,   72,  192,  196,  192,  198,  271,   72,    0,  197,
      196,  199,  195,    0,   72,  198,  197,  275,  271,  195,
      196,  199,  198,   72,  192,   72,    0,  200,   72,  197,

      196,  199,  198,  271,   72,  188,  197,    0,  199,  188,
      188,  200,  198,  197,  200,    0,  188,  200,  199,  276,
      203,    0,  277,  188,  200,  201,  197,  278,  199,  188,
        0,  203,  188,  205,  201,  279,  188,  188,  200,  201,
      203,  200,  205,  188,  200,  201,  276,  203,  207,  277,
      188,  206,  201,  205,  278,  206,  188,  193,  203,  193,
      205,  201,  279,  193,    0,    0,  201,  203,  207,  205,
      193,  206,  201,  208,  208,  207,    0,    0,  206,  193,
      205,    0,  206,  209,  193,  211,  193,  280,  268,  209,
      193,  209,  268,  208,  281,  207,    0,  193,  206,    0,

      208,  208,  282,  209,  211,  211,  193,  204,  204,  210,
      209,  210,  211,  210,  280,  268,  209,  204,  209,  268,
      208,  281,  204,  204,    0,    0,  212,    0,  204,  282,
      209,  211,  211,  210,  204,  204,  210,  214,  210,  212,
      210,  215,  213,  219,  204,    0,  212,  216,    0,  204,
      204,  213,  214,  212,  216,  204,  215,  214,    0,    0,
      210,  215,  213,  219,  214,    0,  212,  216,  215,  213,
      219,  217,  221,  212,  216,  217,  218,  218,  213,  214,
      222,  216,    0,  215,  214,  220,  220,  221,  215,  213,
      219,  284,  221,  222,  216,  217,  218,  223,  217,  221,

      222,  223,  217,  218,  218,  224,  220,  222,    0,  224,
        0,  225,  220,  220,  221,  225,  285,  286,  284,  221,
      222,  223,  217,  218,  223,  224,  228,  222,  223,  228,
        0,  225,  224,  220,  229,  227,  224,  227,  225,    0,
        0,  229,  225,  285,  286,    0,  228,  230,  223,  229,
        0,    0,  224,  228,  229,  227,  228,  230,  225,  226,
      287,  229,  227,  226,  227,  231,  234,  230,  229,  234,
        0,  232,  226,  228,  230,  232,  229,  226,  231,    0,
      233,  229,  227,  226,  230,  231,  226,  287,  233,  234,
      226,  288,  231,  234,  230,  232,  234,  239,  232,  226,

      233,  235,  232,  236,  226,  231,  237,  233,  235,  238,
      226,  236,  231,  239,  237,  233,  234,  239,  288,    0,
      238,  235,  232,  236,  239,    0,  237,  233,  235,  238,
      236,    0,    0,  237,  289,  235,  238,    0,  236,  240,
      239,  237,  243,  240,  239,    0,  240,  238,  235,  243,
      236,  241,  241,  237,  242,  243,  238,    0,  242,  240,
      245,  289,  243,  290,  244,  291,  240,  292,  246,  243,
      240,  293,  241,  240,  242,  294,  243,  244,  241,  241,
      245,  242,  243,  246,  244,  242,  240,  245,  246,  243,
      290,  244,  291,  295,  292,  246,  296,  297,  293,  241,

      298,  242,  294,  300,  244,  301,  296,  245,  302,  303,
      246,  244,  304,  306,  307,  246,  308,  310,  311,  312,
      295,  313,  314,  296,  297,  316,  317,  298,  315,  318,
      300,  319,  301,  296,  320,  302,  303,  321,  322,  304,
      306,  307,  323,  308,  310,  311,  312,  315,  313,  314,
      324,  325,  316,  317,  327,  315,  318,  328,  319,  329,
      331,  320,  333,  334,  321,  322,  336,  338,  337,  323,
      337,  339,  341,  342,  315,  343,  344,  324,  325,  345,
      346,  327,  347,    0,  328,  350,  329,  331,  351,  333,
      334,  352,    0,  336,  338,  337,  353,  337,  339,  341,

      342,  355,  343,  344,  356,  350,  345,  346,  351,  347,
      354,  352,  350,  357,  449,  351,  353,  354,  352,  358,
        0,  355,    0,  353,  356,  450,    0,  359,  355,  358,
      354,  356,  350,  357,    0,  351,    0,  354,  352,  358,
      357,  449,  360,  353,  354,  359,  358,  359,  355,  360,
      362,  356,  450,  361,  359,  361,  358,  354,  365,  363,
      357,  363,  360,  362,    0,    0,  358,  364,    0,  360,
      362,  451,  359,  365,  359,  361,  360,  362,  365,  367,
      361,  363,  361,  364,  368,  365,  363,  364,  363,  360,
      362,  366,  369,  367,  364,  366,  369,  362,  451,  367,

      365,    0,  361,  371,  368,  365,  367,  371,  363,    0,
      364,  368,  374,  372,  364,  366,  369,  370,  366,  369,
      367,  378,  366,  369,  370,  378,  367,  371,  372,    0,
      371,  368,  374,  372,  371,  452,  373,  370,  373,  374,
      372,  375,  366,  369,  370,  378,  376,  379,  378,  376,
        0,  370,  378,    0,  371,  372,  375,    0,  373,  374,
      372,  375,  452,  373,  370,  373,  377,  379,  375,  376,
      381,  383,  378,  376,  379,  382,  376,  377,  380,  384,
      380,  385,  382,  375,  381,  373,  377,  453,  375,  385,
      381,  383,  455,  377,  379,  382,  376,  381,  383,  384,

      380,  385,  382,  386,  377,  380,  384,  380,  385,  382,
      386,  381,  387,  377,  453,  387,  385,  381,  383,  455,
      388,  389,  382,  386,  389,  390,  384,  380,  385,  390,
      386,    0,    0,  457,  391,  387,  388,  386,  392,  387,
      388,  389,  387,    0,  394,  390,  395,  388,  389,  391,
      386,  389,  390,  392,  391,  396,  390,    0,  392,  393,
      457,  391,  387,  388,  394,  392,  395,  388,  389,  393,
      400,  394,  390,  395,  397,  396,  391,    0,  399,  393,
      392,  391,  396,  398,  397,  392,  393,  399,  402,  401,
      400,  394,    0,  395,  397,    0,  393,  400,  399,  398,

      406,  397,  396,  398,  401,  399,  393,    0,  402,  401,
      398,  397,  404,  404,  399,  402,  401,  400,  403,  405,
      406,  397,  403,  405,  458,  399,  398,  406,  408,    0,
      398,  401,  407,  404,  407,  402,  401,  409,  403,  404,
      404,    0,  410,  405,  408,  403,  405,  406,  408,  403,
      405,  458,  407,  409,  412,  408,  411,  409,  413,  407,
      404,  407,  410,  411,  409,  403,  414,  412,  415,  410,
      405,  408,  413,  416,  412,  408,  411,  416,  413,  407,
      409,  412,  417,  411,  409,  413,  414,  418,  415,  410,
      411,  417,  416,  414,  412,  415,    0,  416,  418,  413,

      416,  412,  417,  411,  416,  413,  420,  418,  419,  417,
      421,  421,    0,  414,  418,  415,  419,    0,  417,  416,
        0,  420,  459,  422,  416,  418,  420,  422,  419,  417,
      460,  421,    0,  420,  418,  419,  423,  421,  421,  424,
      425,  426,  424,  419,  427,    0,    0,  422,  420,  459,
      422,  423,  428,  420,  422,  419,  423,  460,  421,  424,
      425,  426,  429,  423,  427,  430,  424,  425,  426,  424,
      428,  427,  428,  431,  422,  433,  435,  429,  423,  428,
      430,  461,  429,  423,  462,  430,  424,  425,  426,  429,
      436,  427,  430,  431,  432,  433,  435,  428,    0,  428,

      431,  432,  433,  435,  429,  434,  437,  430,  461,  429,
      436,  462,  430,    0,  432,  437,  434,  436,  441,  438,
      431,  432,  433,  435,  439,  434,  437,    0,  432,  438,
        0,  438,  434,  437,  439,  464,  440,  436,  441,  438,
      440,  432,  437,  434,  439,  441,  438,    0,  442,    0,
        0,  439,  434,  437,  443,    0,  438,  442,  438,  445,
      440,  439,  464,  440,    0,  441,  438,  440,  442,  447,
      443,  439,  465,  446,  443,  442,  444,  445,  444,  445,
      466,  443,  447,  467,  442,  469,  445,  440,  446,  447,
      470,  448,  471,  446,  448,  442,  447,  443,  444,  465,

      446,  443,  473,  444,  445,  444,  445,  466,  474,  447,
      467,  448,  469,  475,  476,  446,  447,  470,  448,  471,
      446,  448,  477,  481,  482,  444,  484,  486,  487,  473,
      488,  489,  490,  491,  493,  474,  497,  499,  448,  500,
      475,  476,  501,  502,  491,  504,  505,  506,  507,  477,
      481,  482,  508,  484,  486,  487,  511,  488,  489,  490,
      491,  493,  512,  497,  499,  515,  500,  516,  517,  501,
      502,  491,  504,  505,  506,  507,  518,  519,  521,  508,
      522,  523,  524,  511,  525,  526,  527,  528,  529,  512,
      530,  531,  515,  532,  516,  517,  533,  535,  536,    0,

        0,  540,    0,  518,  519,  521,  538,  522,  523,  524,
      542,  525,  526,  527,  528,  529,  539,  530,  531,  538,
      532,  540,  541,  533,  535,  536,  538,  543,  540,  539,
      542,    0,  545,  538,  544,  541,  539,  542,  544,    0,
      629,    0,  541,  539,  546,  630,  538,  543,  540,  541,
      546,    0,  545,  538,  543,  552,  539,  542,  544,  545,
      547,  544,  541,  539,  546,  544,  549,  629,  547,  541,
      548,  546,  630,  551,  543,  552,  551,  546,  550,  545,
      547,  549,  552,  548,    0,  544,  549,  547,    0,  557,
      548,  546,  550,  549,  553,  547,  551,  548,  550,    0,

      551,  553,  552,  551,  554,  550,  631,  547,  549,  557,
      548,  556,  555,  549,  553,  556,  557,  548,    0,  550,
      554,  553,    0,  551,  554,  550,  559,  555,  553,  561,
      559,  554,  555,  631,    0,  556,  557,    0,  556,  555,
      632,  553,  556,  558,    0,  558,  559,  554,  560,  561,
        0,  554,    0,  559,  555,  560,  561,  559,  562,  555,
      563,  564,  556,    0,  565,  558,  634,  632,  560,  562,
      558,  563,  558,  559,  567,  560,  561,  564,  562,  565,
      563,  564,  560,    0,  565,  562,  566,  563,  564,  568,
      566,  565,  558,  634,  567,  560,  562,    0,  563,  569,

      572,  567,  574,  635,  564,  562,  565,  563,  564,  568,
      566,  565,  571,  566,  570,  573,  568,  566,  570,  569,
      572,  567,  574,  571,  573,  636,  569,  572,  638,  574,
      635,    0,  571,  575,    0,  573,  568,  566,  570,  571,
        0,  570,  573,  575,  576,  570,  569,  572,  577,  574,
      571,  573,  636,  575,    0,  638,  578,  576,  581,  571,
      575,  579,  573,    0,  576,  570,  582,  577,  577,  578,
      575,  576,  583,  582,  579,  577,  578,  580,  581,  580,
      575,  579,  584,  578,  576,  581,  582,  585,  579,  639,
      580,  576,  583,  582,  577,  577,  578,  580,    0,  583,

      582,  579,  584,  578,  580,  581,  580,  585,  579,  584,
      586,  587,  589,  582,  585,  588,  639,  580,  640,  583,
      641,  592,  588,  591,  580,  586,  590,    0,    0,  584,
      586,  587,  589,    0,  585,  588,  591,  586,  587,  589,
      590,  592,  588,  591,  594,  640,  590,  641,  592,  588,
      591,    0,  586,  590,  593,  598,  593,  586,  587,  589,
      599,    0,  588,  591,  594,  595,  596,  590,  592,  597,
      591,  594,    0,  590,  643,  598,  593,  597,  595,  596,
      599,  593,  598,  593,  600,  595,  596,  599,  600,  597,
      601,  594,  595,  596,  601,    0,  597,    0,  602,  603,

      644,  643,  598,  593,  597,  595,  596,  599,  600,  605,
      609,  600,  595,  596,  601,  600,  597,  601,  602,  603,
      604,  601,  605,  606,  607,  602,  603,  644,  604,  605,
      609,  608,  607,  608,  610,  600,  605,  609,  606,    0,
      604,  601,  612,  606,  607,  602,  603,  604,  611,  605,
      606,  607,  611,  608,  610,  604,  605,  609,  608,  607,
      608,  610,  612,  613,  614,  606,  617,  604,  611,  612,
      606,  607,  615,  613,  615,  611,  616,  619,  614,  611,
      608,  610,  617,  613,  614,  616,  617,  621,  645,  612,
      613,  614,  619,  617,  615,  611,  616,  619,  618,  615,

      613,  615,  618,  616,  619,  614,  620,  621,  620,  617,
      613,  614,  616,  617,  621,  645,  623,  622,  625,  619,
      622,  615,  618,  616,  619,  618,  620,  646,  626,  618,
      624,  647,  648,  620,  621,  620,  623,  622,  625,  649,
      650,  651,  653,  623,  622,  625,  624,  622,  626,  618,
      624,  654,  655,  620,  646,  626,  658,  624,  647,  648,
      659,  660,  661,  623,  622,  625,  649,  650,  651,  653,
      666,  667,  668,  624,  671,  626,  672,  624,  654,  655,
      673,  674,  675,  658,  677,  678,  679,  659,  660,  661,
      680,  681,  682,  683,  684,  686,  687,  666,  667,  668,

      688,  671,  690,  672,  691,  692,  694,  673,  674,  675,
      695,  677,  678,  679,  696,  761,  697,  680,  681,  682,
      683,  684,  686,  687,  698,  700,  694,  688,  763,  690,
      695,  691,  692,  694,  696,  696,  697,  695,  699,  699,
      701,  696,  761,  697,  698,  700,    0,    0,  702,  701,
      703,  698,  700,  694,  704,  763,  764,  695,  702,  699,
      701,  696,  696,  697,  708,  699,  699,  701,  702,  705,
      703,  698,  700,  705,  704,  702,  701,  703,  706,  709,
        0,  704,  707,  764,  708,  702,  699,  701,  706,  707,
      712,  708,  710,  705,  711,  702,  705,  703,  706,  709,

      705,  704,  707,  711,  713,  706,  709,  710,  714,  707,
      712,  708,  710,  765,  711,  706,  707,  712,  715,  710,
      705,  711,  716,  714,  713,  706,  709,  719,  714,  707,
      711,  713,  766,  715,  710,  714,  716,  712,  715,  710,
      765,  711,  716,    0,  717,  715,  718,  719,  717,  716,
      714,  713,  722,  718,  719,  714,  720,  721,  720,  766,
      715,  723,  724,  716,  717,  715,  718,  722,    0,  716,
      721,  717,  722,  718,  719,  717,  720,  721,  726,  722,
      718,  723,  724,  720,  721,  720,  725,  729,  723,  724,
        0,  717,  730,  718,  722,  728,  727,  721,  726,  722,

      731,  725,  728,  720,  721,  726,  725,  729,  723,  724,
      727,  732,  730,  725,  729,  728,  727,  733,    0,  730,
      731,  733,  728,  727,    0,  726,  736,  731,  725,  728,
      735,  732,  734,  725,  729,  734,  737,  727,  732,  730,
      738,  733,  728,  727,  733,  735,  736,  731,  733,  741,
      735,  739,  734,  736,    0,  743,  737,  735,  732,  734,
      738,  740,  734,  737,  739,  768,  742,  738,  733,  741,
      742,  739,  735,  736,  740,  743,  741,  735,  739,  734,
      744,  740,  743,  737,  744,  745,  742,  738,  740,  746,
      746,  739,  768,  742,  752,  747,  741,  742,  739,  747,

      745,  740,  743,  769,  744,  745,    0,  744,  740,  748,
      746,  744,  745,  742,  752,  749,  746,  746,  750,  747,
      751,  752,  747,  748,  751,    0,  747,  745,  749,  748,
      769,  744,  745,  750,  753,  749,  748,  746,  750,  755,
        0,  752,  749,  756,  751,  750,  747,  751,  754,  754,
      748,  751,  760,  757,  753,  749,  748,  770,  773,  755,
      750,  753,  749,  756,  758,  750,  755,  757,  758,  754,
      756,  751,  760,  757,  759,  754,  754,  777,  759,  760,
      757,  753,  779,  782,  770,  773,  755,  785,  758,  786,
      756,  758,  788,  789,  757,  758,  754,  791,  759,  760,

      757,  759,  792,  793,  777,  759,  795,  796,  799,  779,
      782,  801,  802,  803,  785,  758,  786,  808,  809,  788,
      789,  810,  811,  812,  791,  759,  813,    0,  864,  792,
      793,    0,  812,  795,  796,  799,  816,  814,  801,  802,
      803,  810,  811,  812,  808,  809,  813,  815,  810,  811,
      812,  814,  817,  813,  815,  864,  816,  814,  818,  812,
      818,    0,  819,  816,  814,    0,  817,  815,  810,  811,
      812,  820,  817,  813,  815,  821,  823,  819,  814,  817,
      818,  815,  819,  816,  814,  818,  822,  818,  822,  819,
      824,  820,  825,  817,  815,  821,  823,    0,  820,  817,

      826,  827,  821,  823,  819,  828,  829,  818,  822,  819,
      824,  830,  825,  822,  828,  822,  831,  824,  820,  825,
      826,  827,  821,  823,  832,  828,  829,  826,  827,  833,
      835,  830,  828,  829,  836,  822,  831,  824,  830,  825,
      865,  828,  834,  831,  832,  839,  867,  826,  827,  833,
      835,  832,  828,  829,  836,  834,  833,  835,  830,  837,
      838,  836,  834,  831,  838,  839,  837,  865,  840,  834,
      841,  832,  839,  867,  842,    0,  833,  835,  843,  837,
      872,  836,  834,  840,  838,    0,  837,  838,  840,  834,
      841,  838,  839,  837,  842,  840,  846,  841,  843,  845,

      844,  842,  844,    0,  847,  843,  837,  872,    0,    0,
      840,  838,  849,  845,  850,  840,  846,  841,  850,  845,
      874,  842,  844,  846,  847,  843,  845,  844,  848,  844,
      851,  847,  849,  853,  851,  848,  854,    0,  850,  849,
      845,  850,    0,  846,  855,  850,  845,  874,  848,  844,
      856,  847,  852,  853,  851,  848,  854,  851,  875,  849,
      853,  851,  848,  854,  855,  850,  858,  852,  878,  857,
      856,  855,  852,  858,  881,  848,  882,  856,  883,  852,
      853,  851,  857,  854,  886,  875,  858,  887,  888,  857,
      889,  855,  890,  858,  852,  878,  857,  856,  891,  852,

      858,  881,  892,  882,  886,  883,  892,  887,  888,  857,
      889,  886,  890,  858,  887,  888,  857,  889,  891,  890,
      893,  894,  895,  896,  897,  891,  892,    0,    0,  892,
        0,  886,  898,  892,  887,  888,  894,  889,  900,  890,
      893,  894,  895,  896,  897,  891,    0,  893,  894,  895,
      896,  897,  898,  892,  899,  902,  899,  903,  900,  898,
      901,  913,    0,  894,    0,  900,  904,  893,  894,  895,
      896,  897,  906,  901,  905,  902,  899,  903,  907,  898,
      901,  899,  902,  899,  903,  900,  904,  901,  913,  905,
      910,  911,  906,  904,  905,  908,  914,  916,  907,  906,

      901,  905,  902,  899,  903,  907,  909,  901,  908,  912,
      910,  911,  918,  904,  909,  908,  905,  910,  911,  906,
      920,  905,  908,  914,  916,  907,  909,  921,  924,  912,
      923,  925,  927,  909,    0,  908,  912,  910,  911,  918,
      934,  909,  908,  924,  923,  926,  929,  920,  924,  928,
      923,  925,  927,  909,  921,  924,  912,  923,  925,  927,
      926,  930,  928,  931,  932,  926,  929,  934,  936,  928,
      924,  923,  926,  929,  931,  924,  928,  923,  925,  927,
      939,  930,  940,  931,  932,  941,    0,  926,  930,  928,
      931,  932,  926,  929,  943,  936,  928,  944,  947,  942,

      939,  931,  940,  948,    0,  941,    0,  939,  930,  940,
      931,  932,  941,  942,  943,    0,    0,  944,  947,  942,
        0,  943,    0,  948,  944,  947,  942,  939,    0,  940,
      948,    0,  941,    0,    0,    0,    0,    0,    0,    0,
      942,  943,    0,    0,  944,  947,  942,    0,    0,    0,
      948,  950,    0,    0,  950,  951,    0,  951,  951,  953,
        0,  953,  953,  954,    0,  954,  954,  955,    0,  955,
      955,  956,    0,  956,  956,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1622 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1866 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 950 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 949 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(CHECK)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(READ)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(QUIT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(MAX)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(MIN)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(AVG)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 131:
#line 197 "flex_lexer.l"
case 132:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_DFLOATVAL;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2655 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 950 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 950 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 949);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 227 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
	fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
