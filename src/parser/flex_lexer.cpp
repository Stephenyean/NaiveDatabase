#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 130
#define YY_END_OF_BUFFER 131
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[916] =
    {   0,
        0,    0,    2,    2,  131,  129,    4,    4,  129,  122,
      129,  122,  122,  125,  122,  122,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  128,    1,  124,  123,
      125,  120,  119,  121,  127,  127,  127,  127,  127,  107,
      127,  108,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  109,  127,  110,  111,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  112,  113,  114,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  115,  127,  127,  127,  127,  127,
      127,  127,  127,    2,    2,    2,    2,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  126,  123,   94,  127,   95,  127,
      127,   96,   97,  127,  127,  127,  127,  127,  127,  127,
      127,   98,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,   99,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      100,  127,  127,  101,  127,  127,  127,  127,  127,  127,
      127,  127,  102,  127,  127,  103,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  104,  127,  127,
      127,  127,  105,  127,  127,  127,  106,  127,  127,  127,
      127,  117,  127,  127,  127,  127,  127,  127,  127,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  127,  127,  127,  127,  127,   72,
      127,  127,  127,  127,  127,  127,   73,  127,  127,  127,
      127,   74,  127,  127,  127,   75,  127,  127,  127,  127,
      127,   76,   77,   78,  127,  127,   79,  127,   80,  127,
      127,  127,  127,  127,  127,   81,  127,   82,   83,   84,
      127,   85,  127,  127,  127,  127,   86,  127,  127,  127,
      127,  127,   87,   88,  127,  127,  127,  127,  127,  127,
      127,   89,  127,  127,  127,  127,   90,   91,  127,  127,

      127,  127,  127,  127,  127,  127,   92,  127,  127,   93,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   54,   55,  127,  127,

      127,  127,  127,  127,  127,   56,  127,  127,  127,  127,
       57,  127,  127,  127,  127,  127,  127,  127,  127,  127,
       58,  127,  127,  127,   59,   60,  127,  127,  127,  127,
       61,   62,   63,   64,  127,  127,  127,   65,   66,  127,
      127,  127,  127,  127,   67,  127,  127,  127,  127,   68,
      127,  127,  127,   69,  127,  127,  127,   70,  127,  127,
      127,   71,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  127,   30,
      127,  127,   31,  127,   32,  127,  127,  127,   33,   34,
      127,   35,   36,   37,  127,   38,  127,   39,   40,  127,
       41,   42,  127,  127,   43,  127,  127,   44,  127,  127,
      127,   45,  127,   46,   47,   48,  127,   49,  127,  127,
      127,   50,   51,   52,   53,  127,  127,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   14,   15,   16,   17,
       18,  127,  127,   19,  127,   20,   21,   22,   23,  127,
       24,  127,  127,   25,   26,  127,   27,   28,  127,  127,
      127,  118,   29,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      116,  127,   10,  127,   11,  127,   12,  127,  127,   13,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

      127,    7,  127,    8,    9,    2,    2,    2,    2,    2,
        5,    6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[923] =
    {   0,
        0,    0,   65,    0,  400, 3670,  129,  131,    0, 3670,
      392,  390,  355,  127,  126,  348,  123,  123,  131,  177,
      112,  170,  121,  129,  183,  119,  135,  138,  136,  186,
      219,  182,    0,  194,  265,  308,  228,  230,  240,    0,
      161,  255,  347,    0,  344,  340,  337,  254,  254,  334,
      365,  423,  475,  527,  260,  575,  362,  293,  623,  299,
      231,  357,  415,  675,  723,  775,  343,  420,  825,  877,
      925,  425,  433,  271,  335,  325, 3670, 3670,  299,  291,
      281, 3670, 3670, 3670,    0,  140,  164,  281,  189,  229,
      283,    0,  303,  364,  341,  233,  252,  477,  414,  284,

      328,  378,  479,  388,  392,  420,  424,  424,  428,  452,
      467,    0,  430,  510,  450,  470,  467,  493,  520,  534,
      494,  520,  518,  520,  531,  543,  540,    0,  543,  528,
      531,  549,  573,  567,  561,  575,  577,  570,  569,  587,
      589,  580,  609,  581,  582,  578,  622,  599,  630,  620,
      636,  635,  623,    0,  296,  265,  249,    0,    0,  244,
      241,  294,    0,    0,    0,  646,  679,  667,  700,  690,
      733,  764,  681,  767,  769,  725,  773,  804,  977,  813,
      821,  829,  859, 1027,  858,  869,  883,  895,  911,  913,
      927,  967,  721,  969, 1076,  871,  955,  899,  992, 1009,

     1030, 1021, 1013, 1051, 1067, 1072, 1084, 1088, 1100, 1122,
     1110, 1113, 1136, 1124, 1158, 1141, 1162, 1166, 1164, 1177,
     1202, 1206, 1207, 1212, 1215, 1237, 1236, 1261, 1246, 1240,
     1269, 1277, 1274, 1285, 3670,  207,    0,  641,    0,  642,
      638,    0,    0,  637,  659,  677,  705,  713,  768,  789,
      793,    0,  983,  836,  865, 1228,  869,  935,  922,  946,
     1021, 1039, 1037, 1045, 1032, 1244, 1280,    0, 1278, 1284,
     1301, 1283, 1299, 1302, 1295, 1296, 1304, 1315, 1319, 1320,
     1330, 1306, 1314,    0, 1313, 1331, 1330, 1336, 1340, 1337,
     1327, 1328,    0, 1338, 1335, 1337, 1352, 1353, 1358, 1347,

     1348, 1352, 1368, 1350, 1365, 1369, 1374,    0, 1358, 1362,
     1367, 1377,    0, 1374, 1373, 1389,    0, 1381, 1387, 1383,
     1398,    0, 1389, 1386, 1407, 1388, 1392, 1395, 1407,    0,
      201, 1418, 1419, 1422, 1423, 1440, 1428, 1431, 1444, 1441,
     1456, 1479, 1473, 1482, 1498, 1508, 1485, 1511, 1510, 1519,
     1533, 1543, 1527, 1552, 1562, 1565, 1573, 1551, 1597, 1587,
     1584, 1561, 1605, 1613, 1616, 1629, 1619, 1627, 1638, 1655,
     1664, 1641, 1667, 1672, 1673, 1695, 1696, 1681, 1683, 1698,
     1704, 1729, 1727, 1738, 1735, 1750, 1752, 1763, 1771, 1767,
     1786, 1769, 1781, 1815, 1812, 1809, 1817, 1823, 1834, 1855,

     1804, 1840, 1845, 1853, 1863, 1869, 1879, 1868, 1897, 1894,
     1903, 1907, 1919, 1933, 1922, 1951, 1937, 1956, 1961, 1975,
     1967, 1986, 1996, 1990, 1417, 1440, 1476, 1500, 1550,    0,
     1560, 1602, 1646, 1665, 1695, 1724,    0, 1739, 1741, 1760,
     1870,    0, 1876, 1873, 1884,    0, 1914, 1920, 1946, 1976,
     2001,    0,    0,    0, 2003, 1994,    0, 1998,    0, 2001,
     2002, 2000, 2008, 2012, 2027,    0, 2020,    0,    0,    0,
     2015,    0, 2024, 2035, 2025, 2028,    0, 2046, 2045, 2034,
     2036, 2042,    0,    0, 2055, 2057, 2047, 2046, 2045, 2053,
     2065,    0, 2064, 2061, 2069, 2060,    0, 2059, 2077, 2070,

     2065, 2087, 2069, 2083, 2089, 2090,    0, 2078, 2095,    0,
     2104, 2105, 2099, 2114, 2103, 2109, 2137, 2135, 2153, 2148,
     2158, 2174, 2149, 2197, 2186, 2188, 2187, 2189, 2220, 2219,
     2241, 2222, 2232, 2251, 2237, 2272, 2277, 2238, 2254, 2256,
     2286, 2291, 2290, 2296, 2295, 2320, 2308, 2307, 2331, 2336,
     2339, 2345, 2362, 2350, 2360, 2361, 2375, 2364, 2393, 2374,
     2385, 2403, 2398, 2431, 2414, 2415, 2433, 2439, 2437, 2448,
     2467, 2469, 2471, 2488, 2482, 2485, 2513, 2483, 2499, 2517,
     2507, 2531, 2522, 2525, 2555, 2547, 2543, 2561, 2576, 2577,
     2565, 2595, 2573, 2589, 2587, 2599,    0,    0, 2080, 2113,

     2115, 2139, 2219, 2336, 2449,    0, 2458, 2467, 2516, 2601,
        0, 2595, 2602, 2613, 2617, 2606, 2612, 2615, 2626, 2624,
        0, 2631, 2622, 2624,    0,    0, 2626, 2643, 2631, 2640,
        0,    0,    0,    0, 2653, 2647, 2636,    0,    0, 2652,
     2640, 2642, 2659, 2657,    0, 2667, 2649, 2666, 2671, 2655,
     2658, 2658, 2679,    0, 2681, 2684, 2684,    0, 2671, 2691,
     2693,    0, 2693, 2695, 2697, 2699, 2701, 2705, 2727, 2723,
     2729, 2735, 2738, 2757, 2759, 2751, 2753, 2768, 2772, 2769,
     2787, 2797, 2803, 2811, 2801, 2802, 2813, 2835, 2841, 2851,
     2826, 2843, 2857, 2847, 2865, 2869, 2875, 2880, 2891, 2897,

     2905, 2910, 2914, 2915, 2919, 2923, 2945, 2947, 2948, 2949,
     2951, 2959, 2973, 2964, 2981, 2983, 2989, 2999, 3017, 3005,
     3007, 3022, 3018, 3023, 3033, 3035, 3061, 3039, 2703,    0,
     2728, 2856, 2845, 2902,    0, 3037, 3058, 3048,    0,    0,
     3069,    0,    0,    0, 3068,    0, 3062,    0,    0, 3052,
        0,    0, 3060, 3075,    0, 3069, 3081,    0, 3064, 3085,
     3067,    0, 3091, 3077,    0,    0, 3085,    0, 3097, 3100,
     3082,    0,    0,    0,    0, 3088, 3098, 3107, 3109, 3113,
     3110, 3111, 3135, 3121, 3139, 3145, 3161, 3144, 3147, 3175,
     3163, 3177, 3178, 3179, 3187, 3209, 3193, 3196, 3201, 3211,

     3212, 3217, 3215, 3227, 3246, 3255, 3241, 3250, 3249, 3252,
     3263, 3286, 3267, 3271, 3285, 3300, 3289, 3319, 3321, 3323,
     3304, 3325, 3329, 3335, 3340, 3354,    0,    0,    0,    0,
        0, 3233, 3299,    0, 3286,    0,    0,    0,    0, 3305,
        0, 3324, 3357,    0,    0, 3343,    0,    0, 3346, 3355,
     3369,    0,    0, 3371, 3373, 3375, 3377, 3379, 3383, 3409,
     3392, 3408, 3394, 3407, 3411, 3413, 3417, 3425, 3446, 3443,
     3447, 3448, 3461, 3451, 3457, 3469, 3479, 3465, 3480, 3491,
        0, 3374,    0, 3468,    0, 3484,    0, 3481, 3491,    0,
     3505, 3515, 3513, 3519, 3517, 3523, 3521, 3531, 3545, 3547,

     3522,    0, 3539,    0,    0, 3555, 3559, 3571, 3569, 3573,
        0,    0, 3577, 3581, 3670, 3645, 3649,  189, 3653, 3657,
     3661, 3665
    } ;

static yyconst flex_int16_t yy_def[923] =
    {   0,
      915,    1,  915,    3,  915,  915,  915,  915,  916,  915,
      917,  915,  915,  915,  915,  915,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  919,
      919,  915,  920,  919,  921,  919,  919,  919,  919,  919,
      922,  922,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  915,  916,  917,  915,  915,  915,  915,
      915,  915,  915,  915,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,

      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  919,  919,  920,  921,  919,  919,  919,
      919,  919,  919,  919,  919,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  915,  915,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,

      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  919,
      919,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,

      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  918,  918,  918,  918,

      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

      918,  918,  918,  918,  918,   52,   52,   52,   52,   52,
      918,  918,   52,   52,    0,  915,  915,  915,  915,  915,
      915,  915
    } ;

static yyconst flex_int16_t yy_nxt[3736] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   80,   81,   82,   83,   86,   91,
       87,  110,  102,   93,  108,  116,   88,  103,   89,  111,
      109,  117,  121,   90,  118,  237,  122,   94,  119,   92,
       95,   96,  155,   74,  120,   86,   91,   87,  110,  102,
       93,  108,  116,   88,  103,   89,  111,  109,  117,  121,
       90,  118,  237,  122,   94,  119,   92,   95,   96,   97,
      104,  120,   85,   98,  131,  238,  105,   99,  123,  106,

      112,  241,  107,  100,  242,  132,  101,  113,  114,  331,
      134,  133,  124,  115,  135,  236,   97,  104,  125,  126,
       98,  131,  238,  105,   99,  123,  106,  112,  241,  107,
      100,  242,  132,  101,  113,  114,  127,  134,  133,  124,
      115,  135,  150,  243,  128,  125,  126,  198,  129,  331,
      151,  130,  160,  147,  158,  148,   74,   74,  149,  152,
      153,  161,  162,  127,  163,  164,  252,  166,  330,  150,
      243,  128,   74,   74,  198,  129,  166,  151,  130,  136,
      147,  137,  148,  253,  138,  149,  152,  153,   80,   81,
      183,  139,  140,  252,  166,  184,  166,  155,   74,  236,

      244,  161,  162,  166,  239,  191,  136,   79,  137,  166,
      253,  138,  240,  192,  245,  166,  260,  183,  139,  140,
      141,  142,  184,  166,  143,  197,  246,  244,  144,  166,
       77,  239,  191,  247,  145,  166,  166,  146,  235,  240,
      192,  245,  166,  260,  165,  160,  159,  141,  142,  158,
      154,  143,  197,  246,  261,  144,  166,  250,   84,  166,
      247,  145,  166,   79,  146,  154,  154,  251,  154,  154,
      154,  154,  154,  199,  154,  154,  154,  200,  166,  166,
      167,  261,  168,  201,  250,  189,  166,  248,  169,  249,
      170,  190,  262,  166,  251,  171,   78,   77,  166,  915,

      199,  915,  915,  915,  200,  166,  166,  167,  915,  168,
      201,  267,  189,  915,  248,  169,  249,  170,  190,  262,
      166,  268,  171,  154,  154,  166,  154,  154,  154,  154,
      154,  202,  154,  154,  154,  203,  215,  231,  267,  172,
      216,  166,  915,  258,  259,  232,  269,  270,  268,  166,
      271,  166,  233,  234,  272,  915,  166,  277,  202,  173,
      915,  166,  203,  215,  231,  915,  172,  216,  166,  166,
      258,  259,  232,  269,  270,  282,  166,  271,  166,  233,
      234,  272,  273,  166,  277,  274,  173,  174,  166,  254,
      283,  166,  275,  263,  255,  264,  166,  276,  915,  265,

      256,  175,  282,  284,  176,  177,  266,  257,  915,  273,
      285,  166,  274,  915,  174,  915,  254,  283,  166,  275,
      263,  255,  264,  290,  276,  278,  265,  256,  175,  915,
      284,  176,  177,  266,  257,  279,  915,  285,  166,  178,
      280,  281,  286,  179,  287,  291,  288,  180,  289,  292,
      290,  293,  278,  181,  294,  295,  182,  296,  297,  298,
      299,  300,  279,  166,  915,  915,  178,  280,  281,  286,
      179,  287,  291,  288,  180,  289,  292,  915,  293,  305,
      181,  294,  295,  182,  296,  297,  298,  299,  300,  301,
      166,  166,  303,  302,  306,  185,  309,  304,  310,  311,

      307,  186,  312,  313,  187,  316,  305,  188,  308,  317,
      318,  166,  915,  915,  321,  915,  301,  915,  166,  303,
      302,  306,  185,  309,  304,  310,  311,  307,  186,  312,
      313,  187,  316,  314,  188,  308,  317,  318,  166,  166,
      193,  321,  319,  324,  315,  320,  322,  194,  195,  325,
      323,  328,  326,  196,  329,  915,  915,  425,  426,  166,
      314,  427,  166,  428,  915,  327,  166,  193,  915,  319,
      324,  315,  320,  322,  194,  195,  325,  323,  328,  326,
      196,  329,  166,  166,  425,  426,  166,  204,  427,  166,
      428,  166,  327,  429,  332,  166,  915,  166,  333,  915,

      430,  205,  336,  166,  915,  337,  166,  206,  207,  166,
      166,  166,  915,  915,  204,  166,  166,  166,  166,  431,
      429,  332,  166,  334,  166,  333,  166,  430,  205,  336,
      166,  335,  337,  166,  206,  207,  166,  166,  166,  166,
      208,  345,  166,  166,  166,  432,  431,  338,  209,  166,
      334,  346,  210,  166,  915,  211,  915,  166,  335,  166,
      915,  166,  915,  166,  166,  915,  166,  208,  345,  166,
      915,  915,  432,  915,  338,  209,  166,  915,  346,  210,
      166,  339,  211,  166,  166,  166,  166,  212,  166,  166,
      341,  166,  343,  915,  344,  340,  166,  342,  213,  433,

      166,  434,  915,  166,  214,  166,  347,  166,  339,  166,
      166,  166,  166,  915,  212,  915,  166,  341,  166,  343,
      166,  344,  340,  435,  342,  213,  433,  166,  434,  166,
      166,  214,  166,  347,  915,  348,  166,  166,  166,  217,
      166,  218,  353,  354,  219,  166,  915,  166,  915,  166,
      435,  220,  221,  355,  915,  356,  166,  166,  915,  438,
      915,  166,  348,  915,  166,  166,  217,  166,  218,  353,
      354,  219,  166,  357,  166,  166,  166,  439,  220,  221,
      355,  362,  356,  442,  166,  166,  438,  166,  166,  222,
      223,  915,  166,  224,  166,  166,  377,  225,  363,  166,

      357,  166,  166,  226,  439,  166,  227,  166,  362,  364,
      442,  166,  166,  166,  166,  166,  222,  223,  365,  166,
      224,  166,  166,  377,  225,  363,  166,  166,  915,  166,
      226,  166,  166,  227,  166,  379,  364,  366,  166,  367,
      166,  166,  166,  166,  915,  365,  166,  166,  915,  166,
      228,  443,  229,  444,  166,  230,  166,  368,  166,  445,
      369,  166,  379,  166,  366,  915,  367,  915,  166,  915,
      166,  166,  915,  915,  166,  378,  166,  228,  443,  229,
      444,  915,  230,  166,  368,  166,  445,  369,  166,  349,
      166,  166,  370,  166,  350,  436,  372,  371,  166,  437,

      351,  915,  378,  166,  915,  166,  915,  352,  166,  380,
      166,  915,  166,  166,  915,  915,  349,  915,  166,  370,
      166,  350,  436,  372,  371,  166,  437,  351,  166,  166,
      166,  381,  166,  382,  352,  166,  380,  166,  386,  915,
      166,  358,  383,  359,  384,  166,  166,  360,  446,  166,
      385,  447,  166,  448,  361,  166,  166,  166,  381,  449,
      382,  915,  450,  166,  166,  386,  166,  166,  358,  383,
      359,  384,  166,  166,  360,  446,  166,  385,  447,  915,
      448,  361,  387,  166,  166,  915,  449,  166,  166,  450,
      166,  373,  166,  166,  166,  389,  390,  915,  388,  915,

      166,  374,  915,  166,  166,  391,  375,  376,  166,  387,
      166,  915,  166,  915,  166,  166,  166,  915,  373,  166,
      166,  915,  389,  390,  166,  388,  166,  166,  374,  166,
      166,  166,  391,  375,  376,  166,  166,  392,  166,  166,
      396,  393,  394,  166,  397,  915,  166,  166,  395,  166,
      915,  166,  166,  166,  915,  915,  166,  166,  166,  400,
      166,  915,  915,  166,  392,  166,  915,  396,  393,  394,
      915,  397,  166,  166,  166,  395,  166,  166,  166,  166,
      166,  401,  166,  398,  166,  166,  400,  166,  399,  402,
      404,  915,  915,  166,  166,  915,  915,  403,  166,  166,

      166,  166,  166,  915,  166,  166,  405,  166,  401,  166,
      398,  915,  915,  166,  406,  399,  402,  404,  166,  407,
      166,  166,  166,  166,  403,  166,  915,  166,  166,  166,
      408,  166,  915,  405,  915,  915,  409,  915,  166,  411,
      166,  406,  166,  166,  440,  166,  407,  410,  166,  166,
      166,  166,  166,  166,  915,  166,  417,  408,  166,  441,
      418,  416,  166,  409,  412,  166,  411,  451,  413,  166,
      166,  440,  166,  166,  410,  166,  166,  166,  166,  166,
      166,  414,  166,  417,  415,  166,  441,  418,  416,  166,
      423,  412,  419,  421,  451,  413,  452,  166,  420,  166,

      166,  166,  453,  166,  166,  166,  422,  454,  414,  166,
      166,  415,  166,  166,  455,  456,  424,  423,  457,  419,
      421,  166,  458,  452,  166,  420,  459,  460,  166,  453,
      461,  462,  166,  422,  454,  463,  464,  166,  467,  468,
      166,  455,  456,  424,  469,  457,  465,  470,  166,  458,
      471,  472,  473,  459,  460,  474,  466,  461,  462,  475,
      476,  477,  463,  464,  478,  467,  468,  479,  480,  481,
      482,  469,  484,  465,  470,  485,  486,  471,  472,  473,
      487,  488,  474,  466,  489,  490,  475,  476,  477,  483,
      491,  478,  492,  493,  479,  480,  481,  482,  494,  484,

      495,  496,  485,  486,  497,  498,  499,  487,  488,  502,
      503,  489,  490,  500,  504,  501,  483,  491,  505,  492,
      493,  506,  507,  508,  509,  494,  510,  495,  496,  915,
      915,  497,  498,  499,  166,  511,  502,  503,  166,  512,
      500,  504,  501,  915,  166,  505,  597,  166,  506,  507,
      508,  509,  915,  510,  166,  166,  166,  166,  166,  166,
      166,  166,  511,  513,  166,  166,  512,  166,  915,  598,
      514,  166,  166,  597,  166,  515,  166,  166,  915,  516,
      166,  166,  166,  166,  166,  166,  166,  166,  915,  166,
      513,  166,  166,  517,  166,  166,  598,  514,  166,  166,

      915,  166,  515,  166,  166,  518,  516,  166,  915,  166,
      520,  915,  599,  519,  166,  166,  166,  915,  166,  166,
      517,  166,  166,  522,  166,  166,  166,  523,  166,  600,
      915,  525,  518,  524,  166,  166,  166,  520,  521,  599,
      519,  166,  166,  529,  166,  166,  166,  166,  166,  526,
      522,  166,  915,  166,  523,  166,  600,  528,  525,  166,
      524,  166,  166,  166,  527,  521,  601,  534,  166,  166,
      529,  166,  602,  166,  166,  531,  526,  538,  166,  166,
      915,  166,  166,  530,  528,  533,  166,  166,  166,  166,
      166,  527,  532,  601,  534,  166,  166,  166,  166,  602,

      166,  166,  531,  166,  538,  166,  166,  537,  166,  166,
      530,  535,  533,  166,  166,  166,  166,  536,  915,  532,
      166,  166,  915,  166,  166,  166,  603,  166,  166,  166,
      166,  915,  166,  166,  537,  166,  166,  539,  535,  540,
      166,  166,  541,  166,  536,  166,  543,  166,  166,  166,
      166,  542,  166,  603,  166,  166,  166,  166,  544,  166,
      166,  915,  166,  166,  539,  166,  540,  547,  166,  541,
      166,  166,  166,  543,  166,  604,  166,  166,  542,  166,
      166,  166,  166,  548,  166,  544,  545,  915,  549,  550,
      166,  166,  166,  915,  547,  546,  605,  166,  166,  166,

      166,  166,  604,  166,  166,  915,  554,  166,  166,  166,
      548,  551,  166,  545,  166,  549,  550,  166,  166,  166,
      556,  552,  546,  605,  166,  606,  166,  166,  553,  555,
      166,  166,  166,  554,  166,  166,  166,  607,  551,  166,
      166,  166,  558,  166,  166,  166,  166,  556,  552,  557,
      559,  166,  606,  560,  166,  553,  555,  915,  166,  166,
      915,  166,  608,  166,  607,  166,  166,  166,  166,  558,
      166,  166,  166,  609,  166,  915,  557,  559,  166,  166,
      560,  166,  561,  166,  562,  566,  166,  166,  166,  608,
      166,  610,  166,  166,  563,  166,  564,  567,  166,  166,

      609,  166,  166,  166,  915,  166,  166,  166,  915,  561,
      166,  562,  566,  166,  166,  166,  565,  166,  610,  915,
      576,  563,  166,  564,  567,  166,  166,  568,  166,  166,
      166,  166,  166,  166,  166,  573,  571,  570,  915,  166,
      166,  572,  915,  565,  166,  166,  569,  576,  166,  166,
      166,  166,  166,  166,  568,  166,  577,  915,  166,  166,
      166,  166,  573,  571,  570,  574,  166,  166,  572,  166,
      166,  166,  166,  569,  575,  166,  166,  166,  166,  166,
      166,  166,  611,  577,  166,  166,  166,  578,  166,  166,
      612,  166,  574,  613,  579,  166,  166,  166,  166,  166,

      580,  575,  581,  166,  166,  166,  166,  614,  166,  611,
      166,  166,  166,  166,  578,  166,  166,  612,  166,  584,
      613,  579,  166,  166,  582,  583,  166,  580,  915,  581,
      166,  166,  166,  166,  614,  166,  915,  166,  166,  166,
      166,  615,  166,  166,  585,  915,  584,  616,  588,  166,
      166,  582,  583,  166,  915,  166,  915,  166,  166,  586,
      166,  587,  166,  589,  915,  166,  166,  166,  615,  166,
      166,  585,  166,  166,  616,  588,  166,  166,  617,  915,
      166,  590,  166,  166,  915,  166,  586,  166,  587,  592,
      589,  166,  166,  591,  166,  915,  166,  166,  915,  166,

      166,  593,  166,  166,  166,  617,  166,  618,  590,  596,
      166,  166,  166,  619,  166,  620,  592,  594,  166,  166,
      591,  621,  166,  622,  166,  595,  166,  623,  593,  166,
      166,  624,  166,  166,  618,  625,  596,  626,  166,  166,
      619,  627,  620,  630,  594,  628,  631,  632,  621,  166,
      622,  633,  595,  166,  623,  634,  629,  635,  624,  166,
      636,  637,  625,  638,  626,  639,  640,  641,  627,  642,
      630,  643,  628,  631,  632,  644,  645,  646,  633,  647,
      648,  649,  634,  629,  635,  650,  651,  636,  637,  652,
      638,  653,  639,  640,  641,  654,  642,  655,  643,  656,

      657,  658,  644,  645,  646,  659,  647,  648,  649,  660,
      661,  662,  650,  651,  915,  166,  652,  729,  653,  667,
      166,  166,  654,  915,  655,  166,  656,  657,  658,  730,
      166,  731,  659,  663,  664,  665,  660,  661,  662,  166,
      166,  166,  166,  666,  729,  166,  667,  166,  166,  668,
      166,  166,  166,  166,  732,  915,  730,  166,  731,  669,
      663,  664,  665,  915,  166,  166,  166,  166,  166,  166,
      666,  166,  166,  166,  166,  915,  668,  166,  166,  671,
      166,  732,  670,  915,  166,  166,  669,  673,  672,  166,
      166,  166,  166,  915,  166,  915,  166,  915,  166,  677,

      166,  166,  166,  166,  166,  166,  671,  915,  915,  670,
      166,  166,  166,  166,  673,  672,  166,  166,  675,  676,
      674,  166,  166,  166,  166,  166,  677,  915,  915,  166,
      166,  166,  166,  166,  678,  166,  166,  166,  166,  679,
      166,  915,  915,  915,  733,  675,  676,  674,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  681,
      166,  678,  166,  166,  680,  166,  679,  166,  166,  683,
      166,  733,  166,  166,  166,  166,  915,  166,  682,  915,
      166,  166,  166,  166,  166,  166,  681,  166,  166,  685,
      166,  680,  166,  166,  166,  166,  683,  166,  686,  166,

      166,  166,  166,  684,  166,  682,  166,  166,  166,  915,
      915,  166,  166,  166,  166,  166,  685,  166,  687,  166,
      166,  688,  166,  166,  166,  686,  166,  166,  915,  166,
      684,  166,  166,  166,  166,  166,  166,  690,  166,  166,
      166,  915,  691,  166,  166,  687,  689,  166,  688,  166,
      166,  166,  166,  166,  166,  166,  166,  694,  166,  166,
      692,  166,  734,  166,  690,  693,  166,  166,  695,  691,
      166,  166,  166,  689,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  694,  696,  166,  692,  166,  734,
      699,  166,  693,  166,  166,  695,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  166,  697,  166,  166,  166,
      166,  166,  696,  166,  166,  700,  698,  699,  166,  166,
      915,  166,  915,  166,  166,  166,  915,  166,  166,  166,
      703,  166,  701,  697,  166,  915,  166,  166,  166,  166,
      915,  166,  700,  698,  704,  702,  166,  166,  166,  166,
      166,  166,  915,  166,  915,  166,  166,  703,  166,  701,
      915,  166,  705,  706,  166,  735,  166,  166,  915,  166,
      736,  704,  702,  166,  166,  166,  166,  166,  166,  707,
      166,  708,  166,  166,  166,  166,  915,  166,  915,  705,
      706,  166,  735,  737,  166,  709,  166,  736,  166,  166,

      166,  166,  166,  166,  166,  166,  707,  166,  708,  712,
      166,  166,  166,  711,  166,  714,  915,  710,  166,  166,
      737,  166,  709,  716,  166,  166,  166,  713,  166,  166,
      166,  166,  166,  166,  166,  166,  712,  715,  166,  738,
      711,  166,  714,  166,  710,  166,  166,  166,  166,  166,
      716,  166,  915,  166,  713,  718,  166,  717,  166,  166,
      166,  166,  166,  166,  715,  166,  738,  166,  166,  719,
      166,  166,  720,  722,  166,  721,  166,  166,  915,  166,
      166,  725,  718,  166,  717,  166,  166,  915,  166,  166,
      166,  166,  166,  166,  166,  724,  719,  166,  166,  720,

      722,  166,  721,  728,  166,  166,  166,  723,  725,  166,
      166,  166,  166,  166,  726,  166,  166,  739,  166,  166,
      166,  727,  724,  166,  166,  166,  740,  741,  166,  742,
      728,  166,  166,  743,  723,  166,  166,  744,  166,  166,
      166,  726,  166,  745,  739,  746,  747,  748,  727,  749,
      166,  750,  166,  740,  741,  751,  742,  752,  166,  753,
      743,  754,  166,  755,  744,  756,  757,  758,  759,  760,
      745,  761,  746,  747,  748,  762,  749,  763,  750,  764,
      765,  766,  751,  767,  752,  768,  753,  769,  754,  770,
      755,  771,  756,  757,  758,  759,  760,  772,  761,  773,

      774,  775,  762,  776,  763,  777,  764,  765,  766,  166,
      767,  166,  768,  166,  769,  779,  770,  780,  771,  827,
      781,  166,  915,  915,  772,  915,  773,  774,  775,  166,
      776,  166,  777,  166,  778,  166,  166,  166,  166,  166,
      166,  166,  779,  166,  780,  784,  827,  781,  166,  783,
      785,  166,  782,  828,  166,  915,  166,  915,  166,  166,
      166,  778,  166,  166,  166,  166,  166,  788,  166,  166,
      166,  166,  784,  166,  166,  166,  783,  785,  166,  782,
      828,  166,  787,  786,  166,  791,  166,  166,  166,  166,
      166,  915,  166,  166,  788,  166,  166,  790,  166,  789,

      166,  166,  166,  792,  166,  166,  915,  915,  166,  787,
      786,  166,  791,  166,  166,  166,  166,  166,  166,  166,
      166,  796,  166,  166,  790,  797,  789,  166,  793,  166,
      792,  166,  166,  166,  794,  166,  915,  166,  166,  166,
      166,  795,  166,  915,  166,  166,  166,  166,  796,  166,
      166,  166,  797,  798,  166,  793,  166,  166,  915,  166,
      166,  794,  166,  802,  166,  166,  166,  166,  795,  166,
      799,  166,  829,  166,  166,  830,  166,  166,  166,  166,
      798,  166,  800,  166,  166,  166,  166,  166,  801,  166,
      802,  166,  804,  166,  166,  803,  166,  799,  166,  829,

      166,  166,  830,  915,  166,  166,  166,  166,  166,  800,
      166,  166,  166,  166,  166,  801,  166,  805,  166,  804,
      166,  166,  803,  166,  915,  831,  166,  166,  166,  806,
      166,  166,  166,  166,  166,  166,  915,  915,  166,  808,
      166,  166,  915,  166,  805,  807,  166,  915,  166,  915,
      166,  166,  831,  166,  166,  166,  806,  166,  166,  166,
      166,  166,  166,  166,  811,  166,  808,  166,  166,  812,
      915,  813,  807,  166,  809,  166,  810,  166,  166,  815,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  811,  166,  816,  166,  166,  812,  166,  813,  166,

      166,  809,  166,  810,  814,  166,  815,  166,  166,  166,
      166,  166,  166,  817,  166,  166,  166,  166,  818,  166,
      816,  166,  166,  821,  166,  166,  166,  166,  915,  820,
      819,  814,  166,  166,  823,  166,  166,  822,  166,  166,
      817,  166,  166,  166,  166,  818,  166,  825,  166,  166,
      821,  166,  166,  166,  166,  166,  820,  819,  166,  166,
      166,  823,  166,  824,  822,  166,  166,  832,  166,  166,
      166,  166,  833,  826,  825,  166,  166,  166,  166,  834,
      166,  166,  166,  835,  836,  166,  166,  837,  838,  839,
      824,  840,  841,  842,  832,  843,  166,  166,  166,  833,

      826,  844,  166,  845,  166,  846,  834,  847,  848,  849,
      835,  836,  850,  851,  837,  838,  839,  852,  840,  841,
      842,  853,  843,  854,  166,  166,  856,  166,  844,  166,
      845,  915,  846,  915,  847,  848,  849,  166,  855,  850,
      851,  857,  915,  166,  852,  166,  166,  166,  853,  166,
      854,  166,  166,  856,  166,  166,  166,  166,  858,  860,
      166,  166,  915,  166,  166,  855,  915,  915,  857,  859,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  858,  860,  166,  166,  862,
      166,  166,  861,  166,  166,  863,  859,  166,  166,  166,

      915,  915,  166,  166,  166,  915,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  862,  166,  166,  861,
      166,  166,  863,  166,  166,  166,  166,  166,  166,  166,
      166,  867,  166,  166,  864,  915,  166,  865,  166,  166,
      166,  166,  166,  166,  166,  166,  866,  166,  166,  881,
      166,  166,  166,  166,  166,  166,  166,  166,  867,  166,
      166,  864,  166,  166,  865,  871,  166,  869,  166,  868,
      166,  166,  166,  866,  166,  166,  881,  166,  166,  166,
      166,  870,  166,  166,  166,  166,  166,  166,  872,  166,
      166,  166,  871,  166,  869,  166,  868,  874,  166,  166,

      873,  166,  166,  166,  166,  166,  166,  166,  870,  166,
      166,  882,  166,  166,  166,  872,  166,  883,  166,  884,
      166,  166,  166,  875,  874,  166,  166,  873,  166,  166,
      166,  876,  166,  877,  166,  166,  166,  166,  882,  166,
      166,  166,  915,  166,  883,  166,  884,  166,  166,  166,
      875,  166,  166,  885,  878,  166,  166,  166,  876,  166,
      877,  166,  166,  166,  166,  166,  166,  166,  166,  879,
      166,  166,  166,  886,  887,  888,  166,  880,  166,  889,
      885,  878,  166,  166,  166,  890,  166,  166,  166,  166,
      166,  166,  166,  166,  915,  166,  879,  166,  166,  891,

      886,  887,  888,  166,  880,  901,  889,  166,  166,  166,
      166,  166,  890,  166,  166,  166,  166,  166,  166,  166,
      166,  892,  166,  166,  166,  166,  891,  166,  166,  166,
      166,  894,  901,  166,  166,  166,  166,  166,  166,  893,
      166,  166,  166,  166,  166,  166,  166,  166,  892,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  894,  896,
      166,  166,  166,  166,  166,  915,  893,  166,  166,  915,
      166,  166,  166,  166,  166,  895,  166,  166,  915,  166,
      166,  900,  166,  166,  166,  166,  896,  166,  166,  166,
      166,  166,  897,  166,  166,  166,  166,  166,  898,  902,

      166,  166,  895,  899,  166,  166,  166,  166,  900,  166,
      166,  166,  166,  903,  166,  166,  166,  904,  905,  897,
      166,  166,  166,  166,  166,  898,  902,  166,  166,  166,
      899,  166,  166,  166,  166,  166,  915,  166,  911,  166,
      903,  166,  166,  166,  904,  905,  906,  166,  166,  166,
      907,  166,  908,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  911,  166,  909,  166,  912,
      915,  913,  910,  906,  166,  166,  166,  907,  166,  908,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  915,  166,  909,  166,  912,  166,  913,  910,

      915,  914,  166,  915,  915,  166,  915,  166,  166,  166,
      166,  915,  166,  166,  166,  915,  166,  166,  166,  915,
      166,  915,  166,  915,  166,  915,  915,  915,  914,  915,
      915,  915,  166,  915,  166,  915,  166,  915,  915,  915,
      166,  915,  915,  915,  166,   75,  915,  915,   75,   76,
      915,   76,   76,  154,  915,  154,  154,  156,  915,  156,
      156,  157,  915,  157,  157,  166,  915,  166,  166,    5,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,

      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915
    } ;

static yyconst flex_int16_t yy_chk[3736] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   24,   21,   19,   23,   26,   17,   21,   17,   24,
       23,   27,   29,   17,   28,   86,   29,   19,   28,   18,
       19,   19,   41,   41,   28,   17,   18,   17,   24,   21,
       19,   23,   26,   17,   21,   17,   24,   23,   27,   29,
       17,   28,   86,   29,   19,   28,   18,   19,   19,   20,
       22,   28,  918,   20,   32,   87,   22,   20,   30,   22,

       25,   89,   22,   20,   89,   32,   20,   25,   25,  331,
       34,   32,   30,   25,   34,  236,   20,   22,   30,   30,
       20,   32,   87,   22,   20,   30,   22,   25,   89,   22,
       20,   89,   32,   20,   25,   25,   31,   34,   32,   30,
       25,   34,   38,   90,   31,   30,   30,   61,   31,  161,
       38,   31,  160,   37,  157,   37,   42,   42,   37,   39,
       39,   48,   48,   31,   49,   49,   96,   61,  156,   38,
       90,   31,   74,   74,   61,   31,   55,   38,   31,   35,
       37,   35,   37,   97,   35,   37,   39,   39,   81,   81,
       55,   35,   35,   96,   61,   55,   55,  155,  155,   80,

       91,  162,  162,   55,   88,   58,   35,   79,   35,   58,
       97,   35,   88,   58,   91,   60,  100,   55,   35,   35,
       36,   36,   55,   55,   36,   60,   93,   91,   36,   58,
       76,   88,   58,   93,   36,   60,   58,   36,   75,   88,
       58,   91,   60,  100,   50,   47,   46,   36,   36,   45,
       43,   36,   60,   93,  101,   36,   58,   95,   16,   67,
       93,   36,   60,   13,   36,   51,   51,   95,   51,   51,
       51,   51,   51,   62,   51,   51,   51,   62,   57,   67,
       51,  101,   51,   62,   95,   57,   67,   94,   51,   94,
       51,   57,  102,   62,   95,   51,   12,   11,   57,    5,

       62,    0,    0,    0,   62,   57,   67,   51,    0,   51,
       62,  104,   57,    0,   94,   51,   94,   51,   57,  102,
       62,  105,   51,   52,   52,   57,   52,   52,   52,   52,
       52,   63,   52,   52,   52,   63,   68,   72,  104,   52,
       68,   72,    0,   99,   99,   72,  106,  107,  105,   73,
      108,   63,   73,   73,  109,    0,   68,  113,   63,   52,
        0,   72,   63,   68,   72,    0,   52,   68,   72,   73,
       99,   99,   72,  106,  107,  115,   73,  108,   63,   73,
       73,  109,  110,   68,  113,  110,   52,   53,   72,   98,
      116,   53,  111,  103,   98,  103,   73,  111,    0,  103,

       98,   53,  115,  117,   53,   53,  103,   98,    0,  110,
      118,   53,  110,    0,   53,    0,   98,  116,   53,  111,
      103,   98,  103,  121,  111,  114,  103,   98,   53,    0,
      117,   53,   53,  103,   98,  114,    0,  118,   53,   54,
      114,  114,  119,   54,  119,  122,  120,   54,  120,  123,
      121,  124,  114,   54,  125,  126,   54,  127,  129,  130,
      131,  132,  114,   54,    0,    0,   54,  114,  114,  119,
       54,  119,  122,  120,   54,  120,  123,    0,  124,  135,
       54,  125,  126,   54,  127,  129,  130,  131,  132,  133,
       54,   56,  134,  133,  136,   56,  138,  134,  139,  140,

      137,   56,  141,  142,   56,  144,  135,   56,  137,  145,
      146,   56,    0,    0,  148,    0,  133,    0,   56,  134,
      133,  136,   56,  138,  134,  139,  140,  137,   56,  141,
      142,   56,  144,  143,   56,  137,  145,  146,   56,   59,
       59,  148,  147,  150,  143,  147,  149,   59,   59,  150,
      149,  152,  151,   59,  153,    0,    0,  238,  240,   59,
      143,  241,  166,  244,    0,  151,   59,   59,    0,  147,
      150,  143,  147,  149,   59,   59,  150,  149,  152,  151,
       59,  153,  166,  168,  238,  240,   59,   64,  241,  166,
      244,   64,  151,  245,  167,  167,    0,  173,  168,    0,

      246,   64,  170,  168,    0,  170,  170,   64,   64,  166,
      168,   64,    0,    0,   64,  167,  169,  173,   64,  247,
      245,  167,  167,  169,  173,  168,  170,  246,   64,  170,
      168,  169,  170,  170,   64,   64,  169,  193,   64,   65,
       65,  176,  167,  169,  173,  248,  247,  171,   65,  171,
      169,  176,   65,  170,    0,   65,    0,  193,  169,   65,
        0,  176,    0,  169,  193,    0,   65,   65,  176,  171,
        0,    0,  248,    0,  171,   65,  171,    0,  176,   65,
      172,  172,   65,  174,  193,  175,   65,   66,  176,  177,
      174,   66,  175,    0,  175,  172,  171,  174,   66,  249,

      172,  250,    0,  174,   66,  175,  177,  172,  172,  177,
      174,   66,  175,    0,   66,    0,  177,  174,   66,  175,
      178,  175,  172,  251,  174,   66,  249,  172,  250,  180,
      174,   66,  175,  177,    0,  178,  177,  181,   66,   69,
      178,   69,  180,  180,   69,  182,    0,  178,    0,  180,
      251,   69,   69,  181,    0,  182,  180,  181,    0,  254,
        0,   69,  178,    0,  181,  182,   69,  178,   69,  180,
      180,   69,  182,  183,  185,  183,  180,  255,   69,   69,
      181,  185,  182,  257,  181,  186,  254,  196,   69,   70,
       70,    0,  182,   70,  185,  183,  196,   70,  186,  187,

      183,  185,  183,   70,  255,  186,   70,  196,  185,  187,
      257,  188,  186,   70,  196,  198,   70,   70,  188,  187,
       70,  185,  183,  196,   70,  186,  187,  189,    0,  190,
       70,  188,  186,   70,  196,  198,  187,  189,  188,  190,
       70,   71,  198,  191,    0,  188,  187,  189,    0,  190,
       71,  258,   71,  259,  189,   71,  190,  191,  188,  260,
      191,   71,  198,  191,  189,    0,  190,    0,   71,    0,
      191,  197,    0,    0,  189,  197,  190,   71,  258,   71,
      259,    0,   71,  192,  191,  194,  260,  191,   71,  179,
      191,  197,  192,  179,  179,  253,  194,  192,  197,  253,

      179,    0,  197,  192,    0,  194,    0,  179,  199,  199,
      192,    0,  194,  179,    0,    0,  179,    0,  197,  192,
      179,  179,  253,  194,  192,  200,  253,  179,  199,  203,
      192,  200,  194,  200,  179,  199,  199,  202,  203,    0,
      179,  184,  201,  184,  201,  200,  201,  184,  261,  203,
      202,  262,  200,  263,  184,  199,  203,  202,  200,  264,
      200,    0,  265,  184,  202,  203,  201,  204,  184,  201,
      184,  201,  200,  201,  184,  261,  203,  202,  262,    0,
      263,  184,  204,  205,  202,    0,  264,  204,  206,  265,
      184,  195,  195,  201,  204,  206,  207,    0,  205,    0,

      207,  195,    0,  205,  208,  208,  195,  195,  206,  204,
      205,    0,  195,    0,  204,  206,  209,    0,  195,  195,
      207,    0,  206,  207,  208,  205,  211,  207,  195,  212,
      205,  208,  208,  195,  195,  206,  209,  210,  210,  195,
      214,  211,  212,  209,  214,    0,  211,  207,  213,  212,
        0,  208,  213,  211,    0,    0,  212,  216,  210,  216,
      214,    0,    0,  209,  210,  210,    0,  214,  211,  212,
        0,  214,  213,  211,  215,  213,  212,  216,  217,  213,
      219,  217,  218,  215,  216,  210,  216,  214,  215,  218,
      219,    0,    0,  220,  215,    0,    0,  218,  217,  213,

      219,  215,  218,    0,  216,  217,  220,  219,  217,  218,
      215,    0,    0,  220,  221,  215,  218,  219,  221,  222,
      220,  215,  222,  223,  218,  217,    0,  219,  224,  218,
      223,  225,    0,  220,    0,    0,  224,    0,  221,  225,
      220,  221,  222,  223,  256,  221,  222,  224,  224,  222,
      223,  225,  227,  226,    0,  224,  230,  223,  225,  256,
      230,  229,  229,  224,  226,  221,  225,  266,  227,  222,
      223,  256,  227,  226,  224,  224,  230,  228,  225,  227,
      226,  228,  229,  230,  228,  231,  256,  230,  229,  229,
      233,  226,  231,  232,  266,  227,  267,  228,  231,  227,

      226,  234,  269,  230,  228,  231,  232,  270,  228,  229,
      233,  228,  231,  232,  271,  272,  234,  233,  273,  231,
      232,  234,  274,  267,  228,  231,  275,  276,  234,  269,
      277,  278,  231,  232,  270,  279,  280,  233,  282,  283,
      232,  271,  272,  234,  285,  273,  281,  286,  234,  274,
      287,  288,  289,  275,  276,  290,  281,  277,  278,  291,
      292,  294,  279,  280,  295,  282,  283,  296,  297,  298,
      299,  285,  300,  281,  286,  301,  302,  287,  288,  289,
      303,  304,  290,  281,  305,  306,  291,  292,  294,  299,
      307,  295,  309,  310,  296,  297,  298,  299,  311,  300,

      312,  314,  301,  302,  315,  316,  318,  303,  304,  320,
      321,  305,  306,  319,  323,  319,  299,  307,  324,  309,
      310,  325,  326,  327,  328,  311,  329,  312,  314,    0,
        0,  315,  316,  318,  332,  333,  320,  321,  334,  335,
      319,  323,  319,    0,  337,  324,  425,  338,  325,  326,
      327,  328,    0,  329,  332,  333,  336,  340,  334,  335,
      339,  332,  333,  336,  337,  334,  335,  338,    0,  426,
      339,  337,  341,  425,  338,  340,  336,  340,    0,  341,
      339,  332,  333,  336,  340,  334,  335,  339,    0,  343,
      336,  337,  341,  342,  338,  342,  426,  339,  344,  341,

        0,  347,  340,  336,  340,  343,  341,  339,    0,  343,
      345,    0,  427,  344,  345,  342,  343,    0,  344,  341,
      342,  347,  342,  348,  346,  344,  349,  348,  347,  428,
        0,  350,  343,  349,  345,  350,  343,  345,  346,  427,
      344,  345,  342,  353,  346,  344,  349,  348,  347,  351,
      348,  346,    0,  349,  348,  350,  428,  352,  350,  352,
      349,  345,  350,  353,  351,  346,  429,  358,  354,  351,
      353,  346,  431,  349,  348,  355,  351,  362,  355,  352,
        0,  356,  350,  354,  352,  357,  352,  358,  354,  357,
      353,  351,  356,  429,  358,  354,  351,  362,  355,  431,

      361,  356,  355,  360,  362,  355,  352,  361,  356,  357,
      354,  359,  357,  359,  358,  354,  357,  360,    0,  356,
      361,  363,    0,  360,  362,  355,  432,  361,  356,  364,
      360,    0,  365,  359,  361,  367,  357,  364,  359,  365,
      359,  363,  366,  368,  360,  366,  368,  361,  363,  364,
      360,  367,  365,  432,  369,  367,  364,  372,  369,  365,
      359,    0,  367,  368,  364,  366,  365,  372,  363,  366,
      368,  370,  366,  368,  369,  433,  364,  372,  367,  365,
      371,  369,  367,  373,  372,  369,  370,    0,  374,  375,
      368,  370,  366,    0,  372,  371,  434,  378,  370,  379,

      371,  369,  433,  373,  372,    0,  378,  371,  374,  375,
      373,  376,  377,  370,  380,  374,  375,  378,  370,  379,
      381,  376,  371,  434,  378,  435,  379,  371,  377,  380,
      373,  376,  377,  378,  380,  374,  375,  436,  376,  377,
      381,  380,  383,  383,  378,  382,  379,  381,  376,  382,
      384,  385,  435,  385,  384,  377,  380,    0,  376,  377,
        0,  380,  438,  383,  436,  382,  386,  381,  387,  383,
      383,  385,  382,  439,  384,    0,  382,  384,  385,  388,
      385,  384,  386,  390,  387,  392,  386,  389,  387,  438,
      383,  440,  382,  386,  389,  387,  390,  393,  385,  388,

      439,  384,  391,  390,    0,  392,  388,  389,    0,  386,
      390,  387,  392,  386,  389,  387,  391,  393,  440,    0,
      401,  389,  391,  390,  393,  396,  388,  394,  395,  391,
      390,  394,  392,  397,  389,  398,  396,  395,    0,  398,
      401,  397,    0,  391,  393,  396,  394,  401,  395,  391,
      399,  394,  396,  397,  394,  395,  402,    0,  394,  398,
      397,  403,  398,  396,  395,  399,  398,  401,  397,  404,
      399,  400,  396,  394,  400,  395,  402,  399,  394,  405,
      397,  403,  441,  402,  408,  406,  398,  404,  403,  404,
      443,  400,  399,  444,  405,  407,  404,  399,  400,  405,

      406,  400,  407,  402,  408,  406,  405,  445,  403,  441,
      410,  408,  406,  409,  404,  407,  404,  443,  400,  411,
      444,  405,  407,  412,  409,  410,  405,  406,    0,  407,
      410,  408,  406,  409,  445,  413,    0,  410,  415,  411,
      409,  447,  407,  412,  413,    0,  411,  448,  415,  414,
      412,  409,  410,  417,    0,  413,    0,  410,  415,  414,
      409,  414,  413,  416,    0,  415,  411,  416,  447,  414,
      412,  413,  418,  417,  448,  415,  414,  419,  449,    0,
      417,  418,  413,  421,    0,  415,  414,  416,  414,  420,
      416,  420,  418,  419,  416,    0,  414,  419,    0,  418,

      417,  421,  422,  421,  419,  449,  424,  450,  418,  424,
      421,  420,  423,  451,  416,  455,  420,  422,  420,  418,
      419,  456,  422,  458,  419,  423,  424,  460,  421,  422,
      421,  461,  423,  424,  450,  462,  424,  463,  420,  423,
      451,  464,  455,  467,  422,  465,  471,  473,  456,  422,
      458,  474,  423,  424,  460,  475,  465,  476,  461,  423,
      478,  479,  462,  480,  463,  481,  482,  485,  464,  486,
      467,  487,  465,  471,  473,  488,  489,  490,  474,  491,
      493,  494,  475,  465,  476,  495,  496,  478,  479,  498,
      480,  499,  481,  482,  485,  500,  486,  501,  487,  502,

      503,  504,  488,  489,  490,  505,  491,  493,  494,  506,
      508,  509,  495,  496,    0,  513,  498,  599,  499,  515,
      511,  512,  500,    0,  501,  516,  502,  503,  504,  600,
      514,  601,  505,  511,  512,  513,  506,  508,  509,  515,
      511,  512,  513,  514,  599,  516,  515,  511,  512,  517,
      514,  518,  516,  517,  602,    0,  600,  514,  601,  518,
      511,  512,  513,    0,  520,  523,  515,  511,  512,  519,
      514,  518,  516,  517,  521,    0,  517,  514,  518,  520,
      517,  602,  519,    0,  520,  523,  518,  522,  521,  519,
      522,  520,  523,    0,  521,    0,  519,    0,  518,  527,

      517,  521,  525,  527,  526,  528,  520,    0,    0,  519,
      522,  520,  523,  524,  522,  521,  519,  522,  525,  526,
      524,  521,  525,  527,  526,  528,  527,    0,    0,  525,
      527,  526,  528,  524,  529,  530,  529,  522,  532,  530,
      524,    0,    0,    0,  603,  525,  526,  524,  533,  525,
      527,  526,  528,  535,  538,  530,  529,  531,  532,  533,
      524,  529,  530,  529,  531,  532,  530,  534,  533,  535,
      539,  603,  540,  535,  538,  533,    0,  531,  534,    0,
      535,  538,  530,  529,  531,  532,  533,  534,  536,  537,
      539,  531,  540,  537,  534,  533,  535,  539,  541,  540,

      535,  538,  541,  536,  531,  534,  543,  542,  536,    0,
        0,  545,  544,  537,  534,  536,  537,  539,  542,  540,
      537,  544,  541,  548,  547,  541,  543,  542,    0,  541,
      536,  545,  544,  543,  542,  536,  546,  547,  545,  544,
      537,    0,  548,  548,  547,  542,  546,  549,  544,  541,
      548,  547,  550,  543,  542,  551,  546,  551,  545,  544,
      549,  552,  604,  546,  547,  550,  554,  549,  551,  548,
      548,  547,  550,  546,  549,  551,  555,  556,  553,  550,
      558,  552,  551,  546,  551,  553,  554,  549,  552,  604,
      560,  557,  550,  554,  549,  551,  555,  556,  553,  550,

      558,  561,  551,  555,  556,  553,  557,  558,  552,  559,
      560,  557,  553,  554,  563,  561,  559,  560,  557,  562,
        0,  561,    0,  555,  556,  553,    0,  558,  561,  559,
      565,  566,  562,  557,  563,    0,  559,  560,  557,  562,
        0,  563,  561,  559,  566,  564,  562,  564,  561,  567,
      565,  566,    0,  569,    0,  568,  559,  565,  566,  562,
        0,  563,  567,  568,  570,  605,  562,  564,    0,  567,
      607,  566,  564,  569,  564,  568,  567,  565,  566,  571,
      569,  572,  568,  571,  570,  572,    0,  573,    0,  567,
      568,  570,  605,  608,  564,  573,  567,  607,  575,  578,

      569,  576,  568,  571,  574,  572,  571,  573,  572,  576,
      571,  570,  572,  575,  573,  579,    0,  574,  575,  578,
      608,  576,  573,  581,  574,  575,  578,  577,  576,  577,
      571,  574,  572,  580,  573,  579,  576,  580,  583,  609,
      575,  584,  579,  581,  574,  575,  578,  582,  576,  577,
      581,  574,    0,  580,  577,  584,  577,  582,  583,  587,
      580,  584,  579,  586,  580,  583,  609,  582,  584,  585,
      581,  585,  586,  588,  582,  587,  577,  588,    0,  587,
      580,  591,  584,  586,  582,  583,  587,    0,  584,  593,
      586,  585,  589,  590,  582,  590,  585,  588,  585,  586,

      588,  591,  587,  595,  588,  594,  587,  589,  591,  593,
      586,  592,  589,  590,  592,  596,  593,  610,  585,  589,
      590,  594,  590,  595,  588,  594,  612,  613,  591,  614,
      595,  592,  594,  615,  589,  596,  593,  616,  592,  589,
      590,  592,  596,  617,  610,  618,  619,  620,  594,  622,
      595,  623,  594,  612,  613,  624,  614,  627,  592,  628,
      615,  629,  596,  630,  616,  635,  636,  637,  640,  641,
      617,  642,  618,  619,  620,  643,  622,  644,  623,  646,
      647,  648,  624,  649,  627,  650,  628,  651,  629,  652,
      630,  653,  635,  636,  637,  640,  641,  655,  642,  656,

      657,  659,  643,  660,  644,  661,  646,  647,  648,  663,
      649,  664,  650,  665,  651,  666,  652,  667,  653,  729,
      668,  668,    0,    0,  655,    0,  656,  657,  659,  663,
      660,  664,  661,  665,  665,  666,  663,  667,  664,  670,
      665,  668,  666,  669,  667,  671,  729,  668,  668,  670,
      673,  672,  669,  731,  673,    0,  663,    0,  664,  670,
      665,  665,  666,  669,  667,  671,  670,  676,  668,  677,
      669,  672,  671,  674,  673,  675,  670,  673,  672,  669,
      731,  673,  675,  674,  678,  680,  670,  676,  679,  677,
      669,    0,  671,  674,  676,  675,  677,  679,  672,  678,

      674,  673,  675,  681,  678,  680,    0,    0,  679,  675,
      674,  678,  680,  682,  676,  679,  677,  685,  686,  683,
      674,  685,  675,  681,  679,  686,  678,  684,  682,  687,
      681,  678,  680,  682,  683,  679,    0,  685,  686,  683,
      682,  684,  691,    0,  685,  686,  683,  684,  685,  687,
      681,  688,  686,  688,  684,  682,  687,  689,    0,  692,
      682,  683,  691,  694,  685,  686,  683,  690,  684,  691,
      689,  688,  732,  693,  684,  733,  687,  689,  688,  692,
      688,  695,  690,  694,  689,  696,  692,  690,  693,  691,
      694,  697,  696,  693,  690,  695,  698,  689,  688,  732,

      693,  695,  733,    0,  689,  696,  692,  699,  695,  690,
      694,  697,  696,  700,  690,  693,  698,  701,  697,  696,
      693,  701,  695,  698,    0,  734,  702,  699,  695,  702,
      703,  704,  696,  700,  699,  705,    0,    0,  697,  706,
      700,  701,    0,  698,  701,  703,  702,    0,  701,    0,
      703,  704,  734,  702,  699,  705,  702,  703,  704,  706,
      700,  707,  705,  708,  709,  710,  706,  711,  701,  710,
        0,  712,  703,  702,  707,  712,  708,  703,  704,  714,
      714,  707,  705,  708,  709,  710,  706,  711,  707,  713,
      708,  709,  710,  715,  711,  712,  710,  715,  712,  716,

      714,  707,  712,  708,  713,  717,  714,  714,  707,  713,
      708,  709,  710,  716,  711,  718,  713,  715,  717,  716,
      715,  720,  712,  721,  715,  717,  716,  714,    0,  719,
      718,  713,  717,  719,  723,  718,  713,  722,  722,  724,
      716,  720,  718,  721,  715,  717,  716,  726,  720,  725,
      721,  726,  717,  719,  723,  728,  719,  718,  722,  724,
      719,  723,  718,  725,  722,  722,  724,  736,  720,  725,
      721,  726,  737,  727,  726,  728,  725,  727,  726,  738,
      719,  723,  728,  741,  745,  722,  724,  747,  750,  753,
      725,  754,  756,  757,  736,  759,  725,  727,  726,  737,

      727,  760,  728,  761,  727,  763,  738,  764,  767,  769,
      741,  745,  770,  771,  747,  750,  753,  776,  754,  756,
      757,  777,  759,  778,  727,  779,  781,  782,  760,  780,
      761,    0,  763,    0,  764,  767,  769,  784,  780,  770,
      771,  782,    0,  778,  776,  779,  781,  782,  777,  780,
      778,  783,  779,  781,  782,  785,  780,  784,  783,  786,
      788,  786,    0,  789,  784,  780,    0,    0,  782,  785,
      778,  783,  779,  781,  782,  785,  780,  787,  783,  791,
      788,  786,  785,  789,  784,  783,  786,  788,  786,  790,
      789,  790,  787,  792,  793,  794,  785,  787,  783,  791,

        0,    0,  785,  795,  787,    0,  791,  788,  786,  797,
      789,  790,  798,  792,  793,  794,  790,  799,  790,  787,
      792,  793,  794,  795,  787,  796,  791,  800,  801,  797,
      795,  803,  798,  802,  796,    0,  797,  799,  790,  798,
      792,  793,  794,  804,  799,  796,  802,  800,  801,  832,
      795,  803,  796,  802,  800,  801,  797,  807,  803,  798,
      802,  796,  805,  804,  799,  809,  808,  806,  810,  805,
      804,  806,  796,  802,  800,  801,  832,  807,  803,  811,
      802,  808,  805,  813,  807,  809,  808,  814,  810,  805,
      804,  806,  809,  808,  806,  810,  805,  813,  806,  811,

      812,  815,  812,  813,  807,  817,  811,  814,  808,  805,
      813,  833,  809,  808,  814,  810,  816,  835,  806,  840,
      821,  815,  812,  816,  813,  817,  811,  812,  815,  812,
      813,  818,  817,  819,  814,  818,  816,  819,  833,  820,
      821,  822,    0,  816,  835,  823,  840,  821,  815,  812,
      816,  824,  817,  842,  820,  818,  825,  819,  818,  820,
      819,  822,  818,  816,  819,  823,  820,  821,  822,  825,
      826,  824,  823,  843,  846,  849,  825,  826,  824,  850,
      842,  820,  818,  825,  819,  851,  820,  854,  822,  855,
      826,  856,  823,  857,    0,  858,  825,  826,  824,  859,

      843,  846,  849,  825,  826,  882,  850,  854,  861,  855,
      863,  856,  851,  857,  854,  858,  855,  826,  856,  859,
      857,  860,  858,  864,  862,  860,  859,  865,  861,  866,
      863,  867,  882,  867,  854,  861,  855,  863,  856,  862,
      857,  868,  858,  864,  862,  860,  859,  865,  860,  866,
      864,  862,  860,  867,  865,  861,  866,  863,  867,  870,
      867,  868,  869,  871,  872,    0,  862,  874,  868,    0,
      864,  862,  860,  875,  865,  869,  866,  873,    0,  870,
      867,  878,  869,  871,  872,  876,  870,  874,  868,  869,
      871,  872,  873,  875,  874,  877,  879,  873,  876,  884,

      875,  878,  869,  877,  873,  876,  870,  880,  878,  869,
      871,  872,  876,  886,  874,  877,  879,  888,  889,  873,
      875,  891,  877,  879,  873,  876,  884,  880,  878,  893,
      877,  892,  876,  895,  880,  894,    0,  897,  901,  896,
      886,  891,  877,  879,  888,  889,  892,  898,  891,  893,
      894,  892,  896,  895,  880,  894,  893,  897,  892,  896,
      895,  899,  894,  900,  897,  901,  896,  898,  891,  903,
        0,  906,  899,  892,  898,  907,  893,  894,  892,  896,
      895,  899,  894,  900,  897,  909,  896,  908,  899,  910,
      900,  906,    0,  913,  898,  907,  903,  914,  906,  899,

        0,  908,  907,    0,    0,  909,    0,  908,  899,  910,
      900,    0,  909,  913,  908,    0,  910,  914,  906,    0,
      913,    0,  907,    0,  914,    0,    0,    0,  908,    0,
        0,    0,  909,    0,  908,    0,  910,    0,    0,    0,
      913,    0,    0,    0,  914,  916,    0,    0,  916,  917,
        0,  917,  917,  919,    0,  919,  919,  920,    0,  920,
      920,  921,    0,  921,  921,  922,    0,  922,  922,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,

      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1589 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1833 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 916 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 915 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(USE)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 123:
#line 189 "flex_lexer.l"
case 124:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2582 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 916 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 916 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 915);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 219 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
